"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["497013"],{431164:function(e,i,n){n.r(i),n.d(i,{metadata:()=>t,contentTitle:()=>a,default:()=>d,assets:()=>l,toc:()=>u,frontMatter:()=>o});var t=JSON.parse('{"id":"plugins/overview","title":"Plugins Overview","description":"Introduction","source":"@site/docs/plugins/overview.md","sourceDirName":"plugins","slug":"/plugins/overview","permalink":"/msfs-avionics-mirror/2024/docs/plugins/overview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Overview","sidebar_position":1},"sidebar":"sidebar","previous":{"title":"WeatherRadarUserSettingTypes","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/WeatherRadarUserSettingTypes"},"next":{"title":"Adding Plugin Support","permalink":"/msfs-avionics-mirror/2024/docs/plugins/adding-plugin-support"}}'),s=n("785893"),r=n("250065");let o={sidebar_label:"Overview",sidebar_position:1},a="Plugins Overview",l={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Global vs. Airplane Plugins",id:"global-vs-airplane-plugins",level:2}];function p(e){let i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"plugins-overview",children:"Plugins Overview"})}),"\n",(0,s.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(i.p,{children:["Sometimes when building a re-usable instrument or avionics system, you may wish to allow third-parties to configure or add to the system without requiring them to fork your code. One way to do this is to use ",(0,s.jsx)(i.code,{children:"panel.xml"})," to define configuration options. However, what if you want to support customization that goes beyond what can be practically achieved with XML code?"]}),"\n",(0,s.jsxs)(i.p,{children:["The MSFS framework provides a solution in the form of the ",(0,s.jsx)(i.em,{children:"Plugins API"}),". Plugins allow a JS/HTML instrument to load and run arbitrary Typescript/Javascript code (the plugins) while providing a convenient interface for the instrument to pass data to plugins and integrate the behavior and functionality defined by plugins as it sees fit."]}),"\n",(0,s.jsxs)(i.p,{children:["If you are setting up plugin support for an instrument or avionics system, then the ",(0,s.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/plugins/adding-plugin-support",children:"Adding Plugin Support For Your Instrument"})," page will walk you through the process. If you are developing a plugin for an existing instrument, then you can opt to skip to the ",(0,s.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/plugins/creating-plugins",children:"Creating Plugins"})," page (though the ",(0,s.jsx)(i.em,{children:"Adding Plugin Support..."})," page may still contain information useful for understanding the basics of the API)."]}),"\n",(0,s.jsx)(i.h2,{id:"global-vs-airplane-plugins",children:"Global vs. Airplane Plugins"}),"\n",(0,s.jsxs)(i.p,{children:["The Plugin API supports two types of plugins: ",(0,s.jsx)(i.em,{children:"global"})," plugins and ",(0,s.jsx)(i.em,{children:"airplane"})," plugins. The two types are effectively identical at the code level and differ only in how they are loaded by the JS/HTML instrument."]}),"\n",(0,s.jsx)(i.p,{children:"Global plugins are plugins that apply to multiple airplanes. Generally, these will be plugins that target a specific avionics system or related family of avionics systems as opposed to a specific airplane. Global plugins are tagged for loading by XML files placed in a pre-defined common directory and served to every instrument that supports plugins. Each instrument then chooses which global plugins to use based on the target declared by the plugins."}),"\n",(0,s.jsxs)(i.p,{children:["Airplane plugins are plugins that apply to only one airplane. Airplane plugins are tagged for loading and routed to specific instruments in the airplane's ",(0,s.jsx)(i.code,{children:"panel.xml"})," file."]}),"\n",(0,s.jsxs)(i.p,{children:["Please refer to ",(0,s.jsx)(i.a,{href:"creating-plugins#loading-your-plugin",children:"this section"})," for more information on loading plugins."]})]})}function d(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},250065:function(e,i,n){n.d(i,{Z:function(){return a},a:function(){return o}});var t=n(667294);let s={},r=t.createContext(s);function o(e){let i=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);