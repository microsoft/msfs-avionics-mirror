"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[71239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>o,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},o=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,g=m["".concat(p,".").concat(u)]||m[u]||k[u]||l;return n?a.createElement(g,r(r({ref:t},o),{},{components:n})):a.createElement(g,r({ref:t},o))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<l;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},35109:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const l={id:"index.FlightPlanUtils",title:"Class: FlightPlanUtils",sidebar_label:"FlightPlanUtils",custom_edit_url:null},r=void 0,s={unversionedId:"framework/classes/index.FlightPlanUtils",id:"framework/classes/index.FlightPlanUtils",title:"Class: FlightPlanUtils",description:"index.FlightPlanUtils",source:"@site/docs/framework/classes/index.FlightPlanUtils.md",sourceDirName:"framework/classes",slug:"/framework/classes/index.FlightPlanUtils",permalink:"/msfs-avionics-mirror/docs/framework/classes/index.FlightPlanUtils",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"index.FlightPlanUtils",title:"Class: FlightPlanUtils",sidebar_label:"FlightPlanUtils",custom_edit_url:null},sidebar:"sidebar",previous:{title:"FlightPlanSegment",permalink:"/msfs-avionics-mirror/docs/framework/classes/index.FlightPlanSegment"},next:{title:"FlightPlanner",permalink:"/msfs-avionics-mirror/docs/framework/classes/index.FlightPlanner"}},p={},d=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Properties",id:"properties",level:2},{value:"ALTITUDE_LEG_TYPES",id:"altitude_leg_types",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"DISCO_LEG_TYPES",id:"disco_leg_types",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"HEADING_LEG_TYPES",id:"heading_leg_types",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"HOLD_LEG_TYPES",id:"hold_leg_types",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"MANUAL_DISCO_LEG_TYPES",id:"manual_disco_leg_types",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"Methods",id:"methods",level:2},{value:"getTerminatorIcao",id:"getterminatoricao",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"isAltitudeLeg",id:"isaltitudeleg",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"isDiscontinuityLeg",id:"isdiscontinuityleg",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"isHeadingToLeg",id:"isheadingtoleg",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"isHoldLeg",id:"isholdleg",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"isManualDiscontinuityLeg",id:"ismanualdiscontinuityleg",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-10",level:4}],o={toc:d},m="wrapper";function k(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules/"},"index"),".FlightPlanUtils"),(0,i.kt)("p",null,"Utility class for working with flight plans."),(0,i.kt)("h2",{id:"constructors"},"Constructors"),(0,i.kt)("h3",{id:"constructor"},"constructor"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("strong",{parentName:"p"},"new FlightPlanUtils"),"()"),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"altitude_leg_types"},"ALTITUDE","_","LEG","_","TYPES"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"ALTITUDE","_","LEG","_","TYPES"),": readonly [",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#ca"},(0,i.kt)("inlineCode",{parentName:"a"},"CA")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#fa"},(0,i.kt)("inlineCode",{parentName:"a"},"FA")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#va"},(0,i.kt)("inlineCode",{parentName:"a"},"VA")),"]"),(0,i.kt)("p",null,'Array of "to altitude" leg types.'),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:9"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"disco_leg_types"},"DISCO","_","LEG","_","TYPES"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"DISCO","_","LEG","_","TYPES"),": readonly [",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#discontinuity"},(0,i.kt)("inlineCode",{parentName:"a"},"Discontinuity")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#thrudiscontinuity"},(0,i.kt)("inlineCode",{parentName:"a"},"ThruDiscontinuity")),"]"),(0,i.kt)("p",null,"Array of discontinuity leg types."),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:21"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"heading_leg_types"},"HEADING","_","LEG","_","TYPES"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"HEADING","_","LEG","_","TYPES"),": readonly [",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#va"},(0,i.kt)("inlineCode",{parentName:"a"},"VA")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#vd"},(0,i.kt)("inlineCode",{parentName:"a"},"VD")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#vi"},(0,i.kt)("inlineCode",{parentName:"a"},"VI")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#vm"},(0,i.kt)("inlineCode",{parentName:"a"},"VM")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#vr"},(0,i.kt)("inlineCode",{parentName:"a"},"VR")),"]"),(0,i.kt)("p",null,'Array of "heading to" leg types.'),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:12"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"hold_leg_types"},"HOLD","_","LEG","_","TYPES"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"HOLD","_","LEG","_","TYPES"),": readonly [",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#ha"},(0,i.kt)("inlineCode",{parentName:"a"},"HA")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#hf"},(0,i.kt)("inlineCode",{parentName:"a"},"HF")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#hm"},(0,i.kt)("inlineCode",{parentName:"a"},"HM")),"]"),(0,i.kt)("p",null,'Array of "hold" leg types.'),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:15"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"manual_disco_leg_types"},"MANUAL","_","DISCO","_","LEG","_","TYPES"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,i.kt)("strong",{parentName:"p"},"MANUAL","_","DISCO","_","LEG","_","TYPES"),": readonly [",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#fm"},(0,i.kt)("inlineCode",{parentName:"a"},"FM")),", ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType#vm"},(0,i.kt)("inlineCode",{parentName:"a"},"VM")),"]"),(0,i.kt)("p",null,"Array of manual termination leg types that end in a discontinuity."),(0,i.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:18"),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"getterminatoricao"},"getTerminatorIcao"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("strong",{parentName:"p"},"getTerminatorIcao"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"leg"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"Gets the ICAO of the facility defining the terminator of a flight plan leg."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"leg")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPlanLeg"},(0,i.kt)("inlineCode",{parentName:"a"},"FlightPlanLeg"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"A flight plan leg.")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"The ICAO of the facility defining the terminator of the specified flight plan leg, or ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," if\nthe leg's terminator is not defined by a facility."),(0,i.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:74"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"isaltitudeleg"},"isAltitudeLeg"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("strong",{parentName:"p"},"isAltitudeLeg"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"legType"),"): legType is CA ","|"," FA ","|"," VA"),(0,i.kt)("p",null,'Checks if a leg type is an "to altitude" leg type.'),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"legType")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType"},(0,i.kt)("inlineCode",{parentName:"a"},"LegType"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The leg type to check.")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,"legType is CA ","|"," FA ","|"," VA"),(0,i.kt)("p",null,'Whether the leg type is a "to altitude" leg type.'),(0,i.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:28"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"isdiscontinuityleg"},"isDiscontinuityLeg"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("strong",{parentName:"p"},"isDiscontinuityLeg"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"legType"),"): legType is Discontinuity ","|"," ThruDiscontinuity"),(0,i.kt)("p",null,"Checks if a leg type is a discontinuity leg type."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"legType")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType"},(0,i.kt)("inlineCode",{parentName:"a"},"LegType"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The leg type to check.")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,"legType is Discontinuity ","|"," ThruDiscontinuity"),(0,i.kt)("p",null,"Whether the leg type is a discontinuity leg type."),(0,i.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:64"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"isheadingtoleg"},"isHeadingToLeg"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("strong",{parentName:"p"},"isHeadingToLeg"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"legType"),"): legType is VA ","|"," VD ","|"," VI ","|"," VM ","|"," VR"),(0,i.kt)("p",null,'Checks if a leg type is a "heading to" leg type.'),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"legType")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType"},(0,i.kt)("inlineCode",{parentName:"a"},"LegType"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The leg type to check.")))),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,"legType is VA ","|"," VD ","|"," VI ","|"," VM ","|"," VR"),(0,i.kt)("p",null,'Whether the leg type is a "heading to" leg type.'),(0,i.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:37"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"isholdleg"},"isHoldLeg"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("strong",{parentName:"p"},"isHoldLeg"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"legType"),"): legType is HA ","|"," HF ","|"," HM"),(0,i.kt)("p",null,'Checks if a leg type is a "hold" leg type.'),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"legType")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType"},(0,i.kt)("inlineCode",{parentName:"a"},"LegType"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The leg type to check.")))),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,"legType is HA ","|"," HF ","|"," HM"),(0,i.kt)("p",null,'Whether the leg type is a "hold" leg type.'),(0,i.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:46"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"ismanualdiscontinuityleg"},"isManualDiscontinuityLeg"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,i.kt)("strong",{parentName:"p"},"isManualDiscontinuityLeg"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"legType"),"): legType is FM ","|"," VM"),(0,i.kt)("p",null,"Checks if a leg type is a manual termination leg type that ends in a discontinuity."),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"legType")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/enums/index.LegType"},(0,i.kt)("inlineCode",{parentName:"a"},"LegType"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"The leg type to check.")))),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,"legType is FM ","|"," VM"),(0,i.kt)("p",null,"Whether the leg type is a manual termination leg type that ends in a discontinuity."),(0,i.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,i.kt)("p",null,"src/sdk/flightplan/FlightPlanUtils.ts:55"))}k.isMDXComponent=!0}}]);