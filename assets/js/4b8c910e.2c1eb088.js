"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[92288],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),g=i,h=d["".concat(l,".").concat(g)]||d[g]||c[g]||r;return t?a.createElement(h,o(o({ref:n},u),{},{components:t})):a.createElement(h,o({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},81914:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={sidebar_label:"Plugin Support",sidebar_position:11},o="Plugin Support",s={unversionedId:"fmc/plugin-support",id:"fmc/plugin-support",title:"Plugin Support",description:"The FMC framework includes support for extending or replacing functionality through the plugin system.",source:"@site/docs/fmc/plugin-support.md",sourceDirName:"fmc",slug:"/fmc/plugin-support",permalink:"/msfs-avionics-mirror/docs/fmc/plugin-support",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_label:"Plugin Support",sidebar_position:11},sidebar:"sidebar",previous:{title:"Configuring a Scratchpad",permalink:"/msfs-avionics-mirror/docs/fmc/configuring-a-scratchpad"},next:{title:"SoundServer",permalink:"/msfs-avionics-mirror/docs/sounds/soundserver"}},l={},p=[{value:"Considerations for instrument developers when planning plugin support",id:"considerations-for-instrument-developers-when-planning-plugin-support",level:2},{value:"Adding pages via plugins",id:"adding-pages-via-plugins",level:2},{value:"route",id:"route",level:4},{value:"page",id:"page",level:4},{value:"event",id:"event",level:4},{value:"defaultProps",id:"defaultprops",level:4},{value:"Extending pre-existing pages",id:"extending-pre-existing-pages",level:2},{value:"Creating the page extension",id:"creating-the-page-extension",level:3},{value:"onPageRendered",id:"onpagerendered",level:4},{value:"onPageInit",id:"onpageinit",level:4},{value:"onPageResume",id:"onpageresume",level:4},{value:"onPagePause",id:"onpagepause",level:4},{value:"onPageHandleSelectKey",id:"onpagehandleselectkey",level:4},{value:"onPageHandleScrolling",id:"onpagehandlescrolling",level:4},{value:"Registering the page extension",id:"registering-the-page-extension",level:3},{value:"pageClass",id:"pageclass",level:4},{value:"extension",id:"extension",level:4},{value:"Replacing pre-existing pages",id:"replacing-pre-existing-pages",level:2},{value:"route",id:"route-1",level:4},{value:"page",id:"page-1",level:4},{value:"routeEvent",id:"routeevent",level:4}],u={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"plugin-support"},"Plugin Support"),(0,i.kt)("p",null,"The FMC framework includes support for extending or replacing functionality through the plugin system."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"If multiple FMC plugins are registered, then there is no defined order in which they run. They will be ran in the order on which they load, which is unpredictable and can change due to performance. This may be especially problematic where multiple plugins attempt to handle events as one plugin may be considered to have handled the event, when the desired effect is that the other plugin does so.")),(0,i.kt)("h2",{id:"considerations-for-instrument-developers-when-planning-plugin-support"},"Considerations for instrument developers when planning plugin support"),(0,i.kt)("p",null,"When an instrument developer is planning to support the use of plugins with the FMC framework, they must consider the functions that they pass to the plugin, along with the page classes provided in a plugin package."),(0,i.kt)("p",null,"To allow for plugin developers to extend the FMC in any capacity, instrument developers must make available a function which provides an ",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/interfaces/FmcScreenPluginContext"},(0,i.kt)("inlineCode",{parentName:"a"},"FmcScreenPluginContext<InstrumentFmcPage, InstrumentFmcEvents>"))," where ",(0,i.kt)("inlineCode",{parentName:"p"},"InstrumentFmcPage")," is the page class used within the instrument (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"Wt21FmcPage"),"), and ",(0,i.kt)("inlineCode",{parentName:"p"},"InstrumentFmcEvents")," is the interface containing the events available."),(0,i.kt)("p",null,"Instrument developers will need to make available a number of classes and interfaces for plugin developers to provide proper support, such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The instrument-specific interface containing the FMC events (in the case of the WT21, this would be ",(0,i.kt)("inlineCode",{parentName:"li"},"Wt21FmcEvents"),")"),(0,i.kt)("li",{parentName:"ul"},"The instrument-specific classes used for rendering pages (in the case of the WT21, this would be ",(0,i.kt)("inlineCode",{parentName:"li"},"Wt21FmcPage"),")"),(0,i.kt)("li",{parentName:"ul"},"Any components which are available to be used for the rendering of the FMC, such as instrument-specific dialog pages, input fields, etc"),(0,i.kt)("li",{parentName:"ul"},"The classes which the instrument developer plans to support the extension of (in the case of the WT21, we support extension of ",(0,i.kt)("inlineCode",{parentName:"li"},"PerfMenuPage")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"PerfInitPage")," among others)")),(0,i.kt)("h2",{id:"adding-pages-via-plugins"},"Adding pages via plugins"),(0,i.kt)("p",null,"It's possible to extend the FMC by creating new pages through a plugin. This can be done through the ",(0,i.kt)("inlineCode",{parentName:"p"},"FmcScreenPluginContext::addPluginPageRoute(route, page, event, defaultProps)")," function."),(0,i.kt)("p",null,"To navigate to these pages, you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"FmcScreen::navigateTo(route, params)")," function as you would in an instrument implementation of the FMC."),(0,i.kt)("p",null,"This function takes the following parameters:"),(0,i.kt)("h4",{id:"route"},"route"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"]"),(0,i.kt)("p",null,"This string is the route to get to the specified page"),(0,i.kt)("h4",{id:"page"},"page"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"FmcPage implementation"),"]"),(0,i.kt)("p",null,"This parameter takes a class which is extended from the instrument-specific ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractFmcPage")," implementation, and corresponds to the page being displayed."),(0,i.kt)("h4",{id:"event"},"event"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"string | undefined"),"]"),(0,i.kt)("p",null,"This parameter, when defined, is the event that causes this page to be displayed. If undefined the page must be navigated to another way."),(0,i.kt)("h4",{id:"defaultprops"},"defaultProps"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"{[key: string]: any} | undefined"),"]"),(0,i.kt)("p",null,"This parameter, when defined, contains the default props that will be passed to the page. It can be useful for passing objects from the binder, such as an ",(0,i.kt)("inlineCode",{parentName:"p"},"Fms")," object, or a ",(0,i.kt)("inlineCode",{parentName:"p"},"PerformancePlan")," object."),(0,i.kt)("h2",{id:"extending-pre-existing-pages"},"Extending pre-existing pages"),(0,i.kt)("p",null,"The FMC framework also provides support for extending and modifying pages which already exist in the FMC. This can be useful for cases such as performance planning, where different aircraft may have different support for performance planning approaches or takeoff - such as in the WT21 where there is no pre-existing support for performance calculations of takeoff or approach, but which is provided in the CJ4 FMC."),(0,i.kt)("h3",{id:"creating-the-page-extension"},"Creating the page extension"),(0,i.kt)("p",null,"To extend an already existing FMC page, you need to create a class which extends from ",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/classes/AbstractFmcPageExtension"},(0,i.kt)("inlineCode",{parentName:"a"},"AbstractFmcPageExtension")),"."),(0,i.kt)("p",null,"This class provides a number of functions to extend behaviour:"),(0,i.kt)("h4",{id:"onpagerendered"},"onPageRendered"),(0,i.kt)("p",null,"This is the main reason for extending a page - changing the rendering of a page itself.\nThis function contains one parameter, which is the rendered FMC template. From this, you are able to replace or create new entries in the rendered page. An example of how this may be used is as below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export class PerfMenuPageExtension extends AbstractFmcPageExtension<PerfMenuPage> {\n  private readonly TakeoffPerfLink = PageLinkField.createLink(this.page, "<TAKEOFF", "/takeoff-ref");\n\n  private readonly ApproachPerfLink = PageLinkField.createLink(this.page, "APPROACH>", "/approach-ref");\n\n  /** @inheritDoc */\n  public onPageRendered(renderedTemplates: FmcRenderTemplate[]): void {\n    renderedTemplates[0][6] = [this.TakeoffPerfLink, this.ApproachPerfLink];\n  }\n}\n')),(0,i.kt)("h4",{id:"onpageinit"},"onPageInit"),(0,i.kt)("p",null,"This function is called when the extended page is initialised. This function is called before the page runs it's onInit function."),(0,i.kt)("h4",{id:"onpageresume"},"onPageResume"),(0,i.kt)("p",null,"This function is called when the extended page is resumed. This function is called after the page runs it's onPause function."),(0,i.kt)("h4",{id:"onpagepause"},"onPagePause"),(0,i.kt)("p",null,"This function is called when the extended page is paused. This function is called after the page runs it's onResume function."),(0,i.kt)("h4",{id:"onpagehandleselectkey"},"onPageHandleSelectKey"),(0,i.kt)("p",null,"This function is called before the page processes a select key event. If this function returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," then the select key is considered to have been handled and the page will not process it."),(0,i.kt)("h4",{id:"onpagehandlescrolling"},"onPageHandleScrolling"),(0,i.kt)("p",null,"This function is called before the page processes a scrolling event. If this function returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," then the select key is considered to have been handled and the page will not process it."),(0,i.kt)("h3",{id:"registering-the-page-extension"},"Registering the page extension"),(0,i.kt)("p",null,"To extend an already existing page, you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"FmcScreenPluginContext::attachPageExtension(pageClass, extension)")," function."),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"context.attachPageExtension(PerfMenuPage, PerfMenuPageExtension);\n")),(0,i.kt)("p",null,"The parameters are as follows:"),(0,i.kt)("h4",{id:"pageclass"},"pageClass"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"FmcPage implementation"),"]"),(0,i.kt)("p",null,"This parameter should contain the class of the specific page which is being implemented. For example in the WT21, you might pass ",(0,i.kt)("inlineCode",{parentName:"p"},"PerfMenuPage"),"."),(0,i.kt)("h4",{id:"extension"},"extension"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"class extending AbstractFmcPageExtension"),"]"),(0,i.kt)("p",null,"This parameter should contain the unconstructed and uninstantiated class which extends ",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/classes/AbstractFmcPageExtension"},(0,i.kt)("inlineCode",{parentName:"a"},"AbstractFmcPageExtension"))),(0,i.kt)("h2",{id:"replacing-pre-existing-pages"},"Replacing pre-existing pages"),(0,i.kt)("p",null,"It is possible to entirely replace an existing page route. This can be done through the ",(0,i.kt)("inlineCode",{parentName:"p"},"FmcScreenPluginContext::replacePageRoute(route, page, routeEvent)")," function, which takes the following parameters:"),(0,i.kt)("h4",{id:"route-1"},"route"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"]"),(0,i.kt)("p",null,"The page route to be replaced."),(0,i.kt)("h4",{id:"page-1"},"page"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"FmcPage implementation"),"]"),(0,i.kt)("p",null,"The page which this route should direct to."),(0,i.kt)("h4",{id:"routeevent"},"routeEvent"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"string | undefined"),"]"),(0,i.kt)("p",null,"The event which will cause this page to be displayed, or undefined where this wouldn't occur."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If you replace a page route which has a defined routeEvent, you will need to also define the routeEvent for the replacement page if you wish to have that event still cause the same page route to be displayed.")))}c.isMDXComponent=!0}}]);