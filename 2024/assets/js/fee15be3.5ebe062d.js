"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["597625"],{136495:function(e,i,n){n.r(i),n.d(i,{metadata:()=>t,contentTitle:()=>o,default:()=>h,assets:()=>l,toc:()=>d,frontMatter:()=>s});var t=JSON.parse('{"id":"api/garminsdk/type-aliases/GarminPrimaryFlightPlanRouteLoaderOptions","title":"Type Alias: GarminPrimaryFlightPlanRouteLoaderOptions","description":"GarminPrimaryFlightPlanRouteLoaderOptions: object","source":"@site/docs/api/garminsdk/type-aliases/GarminPrimaryFlightPlanRouteLoaderOptions.md","sourceDirName":"api/garminsdk/type-aliases","slug":"/api/garminsdk/type-aliases/GarminPrimaryFlightPlanRouteLoaderOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/GarminPrimaryFlightPlanRouteLoaderOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"GarminPrematureDescentModuleOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/GarminPrematureDescentModuleOptions"},"next":{"title":"GarminTawsOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/GarminTawsOptions"}}'),r=n("785893"),a=n("250065");let s={},o="Type Alias: GarminPrimaryFlightPlanRouteLoaderOptions",l={},d=[{value:"Type declaration",id:"type-declaration",level:2},{value:"flattenAirways?",id:"flattenairways",level:3},{value:"loadRouteBatchName?",id:"loadroutebatchname",level:3},{value:"userFacilityIdentPrefix?",id:"userfacilityidentprefix",level:3},{value:"userFacilityScope?",id:"userfacilityscope",level:3},{value:"Defined in",id:"defined-in",level:2}];function c(e){let i={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"type-alias-garminprimaryflightplanrouteloaderoptions",children:"Type Alias: GarminPrimaryFlightPlanRouteLoaderOptions"})}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"GarminPrimaryFlightPlanRouteLoaderOptions"}),": ",(0,r.jsx)(i.code,{children:"object"})]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["Configuration options for ",(0,r.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminPrimaryFlightPlanRouteLoader",children:"GarminPrimaryFlightPlanRouteLoader"}),"."]}),"\n",(0,r.jsx)(i.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsx)(i.h3,{id:"flattenairways",children:"flattenAirways?"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"optional"})," ",(0,r.jsx)(i.strong,{children:"flattenAirways"}),": ",(0,r.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["Whether to flatten airways to their constituent waypoints when loading a flight plan route into a flight plan.\nDefaults to ",(0,r.jsx)(i.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"loadroutebatchname",children:"loadRouteBatchName?"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"optional"})," ",(0,r.jsx)(i.strong,{children:"loadRouteBatchName"}),": ",(0,r.jsx)(i.code,{children:"string"})]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["The name to assign the flight plan modification batch opened on the primary flight plan when an operation to load\na flight plan route into the plan is in progress. Defaults to\n",(0,r.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminFlightPlanRouteUtils#default_load_route_batch_name",children:"GarminFlightPlanRouteUtils.DEFAULT_LOAD_ROUTE_BATCH_NAME"}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"userfacilityidentprefix",children:"userFacilityIdentPrefix?"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"optional"})," ",(0,r.jsx)(i.strong,{children:"userFacilityIdentPrefix"}),": ",(0,r.jsx)(i.code,{children:"string"})]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["The prefix to use when assigning idents to user facilities created by the loader. A three-digit number is appended\nto the prefix to form the full ident. Must be three characters or less. Defaults to ",(0,r.jsx)(i.code,{children:"'FPL'"}),"."]}),"\n",(0,r.jsx)(i.h3,{id:"userfacilityscope",children:"userFacilityScope?"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"optional"})," ",(0,r.jsx)(i.strong,{children:"userFacilityScope"}),": ",(0,r.jsx)(i.code,{children:"string"})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"The scope to assign user facilities created by the loader. The scope is written to the airport ident field of the\nfacilities' ICAO values. Must be four characters or less. Defaults to the empty string."}),"\n",(0,r.jsx)(i.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:"src/garminsdk/flightplan/GarminPrimaryFlightPlanRouteLoader.ts:16"})]})}function h(e={}){let{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},250065:function(e,i,n){n.d(i,{Z:function(){return o},a:function(){return s}});var t=n(667294);let r={},a=t.createContext(r);function s(e){let i=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);