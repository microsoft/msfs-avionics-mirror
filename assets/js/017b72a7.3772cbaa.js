"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[86213],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),g=i,f=c["".concat(s,".").concat(g)]||c[g]||d[g]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3157:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const o={sidebar_label:"Overview",sidebar_position:1},a="Plugins Overview",l={unversionedId:"plugins/overview",id:"plugins/overview",title:"Plugins Overview",description:"Introduction",source:"@site/docs/plugins/overview.md",sourceDirName:"plugins",slug:"/plugins/overview",permalink:"/msfs-avionics-mirror/docs/plugins/overview",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Overview",sidebar_position:1},sidebar:"sidebar",previous:{title:"WindDisplayProps",permalink:"/msfs-avionics-mirror/docs/garminsdk/interfaces/WindDisplayProps"},next:{title:"Adding Plugin Support",permalink:"/msfs-avionics-mirror/docs/plugins/adding-plugin-support"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Global vs. Airplane Plugins",id:"global-vs-airplane-plugins",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"plugins-overview"},"Plugins Overview"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Sometimes when building a re-usable instrument or avionics system, you may wish to allow third-parties to configure or add to the system without requiring them to fork your code. One way to do this is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," to define configuration options. However, what if you want to support customization that goes beyond what can be practically achieved with XML code?"),(0,i.kt)("p",null,"The MSFS framework provides a solution in the form of the ",(0,i.kt)("em",{parentName:"p"},"Plugins API"),". Plugins allow a JS/HTML instrument to load and run arbitrary Typescript/Javascript code (the plugins) while providing a convenient interface for the instrument to pass data to plugins and integrate the behavior and functionality defined by plugins as it sees fit."),(0,i.kt)("p",null,"If you are setting up plugin support for an instrument or avionics system, then the ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/plugins/adding-plugin-support"},"Adding Plugin Support For Your Instrument")," page will walk you through the process. If you are developing a plugin for an existing instrument, then you can opt to skip to the ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/plugins/creating-plugins"},"Creating Plugins")," page (though the ",(0,i.kt)("em",{parentName:"p"},"Adding Plugin Support...")," page may still contain information useful for understanding the basics of the API)."),(0,i.kt)("h2",{id:"global-vs-airplane-plugins"},"Global vs. Airplane Plugins"),(0,i.kt)("p",null,"The Plugin API supports two types of plugins: ",(0,i.kt)("em",{parentName:"p"},"global")," plugins and ",(0,i.kt)("em",{parentName:"p"},"airplane")," plugins. The two types are effectively identical at the code level and differ only in how they are loaded by the JS/HTML instrument."),(0,i.kt)("p",null,"Global plugins are plugins that apply to multiple airplanes. Generally, these will be plugins that target a specific avionics system or related family of avionics systems as opposed to a specific airplane. Global plugins are tagged for loading by XML files placed in a pre-defined common directory and served to every instrument that supports plugins. Each instrument then chooses which global plugins to use based on the target declared by the plugins."),(0,i.kt)("p",null,"Airplane plugins are plugins that apply to only one airplane. Airplane plugins are tagged for loading and routed to specific instruments in the airplane's ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," file."),(0,i.kt)("p",null,"Please refer to ",(0,i.kt)("a",{parentName:"p",href:"creating-plugins#loading-your-plugin"},"this section")," for more information on loading plugins."))}d.isMDXComponent=!0}}]);