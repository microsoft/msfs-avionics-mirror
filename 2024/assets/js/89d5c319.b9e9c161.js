"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["704744"],{404419:function(e,n,r){r.r(n),r.d(n,{metadata:()=>t,contentTitle:()=>d,default:()=>h,assets:()=>a,toc:()=>c,frontMatter:()=>s});var t=JSON.parse('{"id":"api/framework/type-aliases/APHdgDirectorOptions","title":"Type Alias: APHdgDirectorOptions","description":"APHdgDirectorOptions: object","source":"@site/docs/api/framework/type-aliases/APHdgDirectorOptions.md","sourceDirName":"api/framework/type-aliases","slug":"/api/framework/type-aliases/APHdgDirectorOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APHdgDirectorOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"APGSDirectorVsTargetFunc","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorVsTargetFunc"},"next":{"title":"APHdgHoldDirectorOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APHdgHoldDirectorOptions"}}'),i=r("785893"),o=r("250065");let s={},d="Type Alias: APHdgDirectorOptions",a={},c=[{value:"Type declaration",id:"type-declaration",level:2},{value:"bankRate?",id:"bankrate",level:3},{value:"isToGaMode?",id:"istogamode",level:3},{value:"maxBankAngle?",id:"maxbankangle",level:3},{value:"turnReversalThreshold?",id:"turnreversalthreshold",level:3},{value:"Defined in",id:"defined-in",level:2}];function l(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"type-alias-aphdgdirectoroptions",children:"Type Alias: APHdgDirectorOptions"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"APHdgDirectorOptions"}),": ",(0,i.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Options for ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/APHdgDirector",children:"APHdgDirector"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,i.jsx)(n.h3,{id:"bankrate",children:"bankRate?"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"optional"})," ",(0,i.jsx)(n.strong,{children:"bankRate"}),": ",(0,i.jsx)(n.code,{children:"number"})," | () => ",(0,i.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The bank rate to enforce when the director commands changes in bank angle, in degrees per second, or a function\nwhich returns it. If not undefined, a default bank rate will be used. Defaults to ",(0,i.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"istogamode",children:"isToGaMode?"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"optional"})," ",(0,i.jsx)(n.strong,{children:"isToGaMode"}),": ",(0,i.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Whether the director is to be used as a TO/GA lateral mode. If ",(0,i.jsx)(n.code,{children:"true"}),", the director will not control the\n",(0,i.jsx)(n.code,{children:"AUTOPILOT HEADING LOCK"})," simvar. Defaults to ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"maxbankangle",children:"maxBankAngle?"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"optional"})," ",(0,i.jsx)(n.strong,{children:"maxBankAngle"}),": ",(0,i.jsx)(n.code,{children:"number"})," | () => ",(0,i.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The maximum bank angle, in degrees, supported by the director, or a function which returns it. If not defined,\nthe director will use the maximum bank angle defined by its parent autopilot (via ",(0,i.jsx)(n.code,{children:"apValues"}),"). Defaults to\n",(0,i.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"turnreversalthreshold",children:"turnReversalThreshold?"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"optional"})," ",(0,i.jsx)(n.strong,{children:"turnReversalThreshold"}),": ",(0,i.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The threshold difference between selected heading and current heading, in degrees, at which the director unlocks\nits commanded turn direction and chooses a new optimal turn direction to establish on the selected heading,\npotentially resulting in a turn reversal. Any value less than or equal to 180 degrees effectively prevents the\ndirector from locking a commanded turn direction. Any value greater than or equal to 360 degrees will require the\nselected heading to traverse past the current heading in the desired turn direction in order for the director to\nissue a turn reversal. Defaults to ",(0,i.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/directors/APHdgDirector.ts:12"})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return d},a:function(){return s}});var t=r(667294);let i={},o=t.createContext(i);function s(e){let n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);