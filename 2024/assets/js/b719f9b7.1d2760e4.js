"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["799213"],{545487:function(e,i,n){n.r(i),n.d(i,{metadata:()=>s,contentTitle:()=>a,default:()=>h,assets:()=>c,toc:()=>l,frontMatter:()=>o});var s=JSON.parse('{"id":"g3xtouch/plugins","title":"G3X Touch Plugins","description":"Introduction","source":"@site/docs/g3xtouch/plugins.md","sourceDirName":"g3xtouch","slug":"/g3xtouch/plugins","permalink":"/msfs-avionics-mirror/2024/docs/g3xtouch/plugins","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_label":"Plugins","sidebar_position":6},"sidebar":"sidebar","previous":{"title":"panel.xml Tag Documentation","permalink":"/msfs-avionics-mirror/2024/docs/g3xtouch/panel-xml-tag-documentation"},"next":{"title":"UI Framework","permalink":"/msfs-avionics-mirror/2024/docs/g3xtouch/ui-framework"}}'),t=n("785893"),r=n("250065");let o={sidebar_label:"Plugins",sidebar_position:6},a="G3X Touch Plugins",c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Loading Plugin Scripts",id:"loading-plugin-scripts",level:2},{value:"Plugin Interface",id:"plugin-interface",level:2},{value:"Plugin Functionality",id:"plugin-functionality",level:2},{value:"<code>registerUiViews()</code>",id:"registeruiviews",level:3},{value:"<code>registerMfdMainPages()</code>",id:"registermfdmainpages",level:3},{value:"<code>registerPfdPages()</code>",id:"registerpfdpages",level:3},{value:"<code>registerPfdInsets()</code>",id:"registerpfdinsets",level:3},{value:"<code>renderEis()</code>",id:"rendereis",level:3},{value:"<code>renderToPfdInstruments()</code>",id:"rendertopfdinstruments",level:3},{value:"<code>getPersistentGlobalSettings()</code>/<code>getPersistentLocalSettings()</code>",id:"getpersistentglobalsettingsgetpersistentlocalsettings",level:3}];function d(e){let i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"g3x-touch-plugins",children:"G3X Touch Plugins"})}),"\n",(0,t.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(i.p,{children:["The G3X Touch package uses the ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/plugins/overview",children:"Plugin API"})," to allow developers to inject their own custom Typescript code into the avionics system in order to implement aircraft-specific features."]}),"\n",(0,t.jsx)(i.h2,{id:"loading-plugin-scripts",children:"Loading Plugin Scripts"}),"\n",(0,t.jsxs)(i.p,{children:["Global plugin scripts are loaded via XML files in the ",(0,t.jsx)(i.code,{children:"html_ui/Plugins"})," directory. The declared target of the plugin must be equal to ",(0,t.jsx)(i.code,{children:"G3XTouchv2"})," in order to be loaded by the G3X Touch."]}),"\n",(0,t.jsxs)(i.p,{children:["Airplane plugin scripts are loaded on a per-instrument basis via ",(0,t.jsx)(i.code,{children:"panel.xml"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-xml",children:"<PlaneHTMLConfig>\r\n\r\n  <Instrument>\r\n    <Name>G3XTouch_1</Name>\r\n\r\n    <Plugin>coui://SimObjects/Airplanes/MyAirplane/panel/Instruments/G3XTouch/Plugins/Plugin.js</Plugin>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    <Name>G3XTouch_2</Name>\r\n\r\n    <Plugin>coui://SimObjects/Airplanes/MyAirplane/panel/Instruments/G3XTouch/Plugins/Plugin.js</Plugin>\r\n  </Instrument>\r\n\r\n</PlaneHTMLConfig>\n"})}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["It is best practice to store aircraft-specific G3X Touch plugin script files (",(0,t.jsx)(i.code,{children:".js"}),") in the aircraft's ",(0,t.jsx)(i.code,{children:"panel/Instruments/G3XTouch/Plugins/"})," subdirectory. This greatly reduces the risk of file conflicts within the sim's virtual file system, because the plugin files are contained in an aircraft-specific subdirectory."]})}),"\n",(0,t.jsxs)(i.p,{children:["For more detailed information on how plugins are defined and loaded, please refer to the ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/plugins/overview",children:"Plugin API documentation"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"plugin-interface",children:"Plugin Interface"}),"\n",(0,t.jsxs)(i.p,{children:["G3X Touch plugins conform to the ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3xtouchcommon/interfaces/G3XTouchPlugin",children:(0,t.jsx)(i.code,{children:"G3XTouchPlugin"})})," interface. In addition to all functionality supported by ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/plugins/creating-plugins",children:"standard plugins"}),", G3X Touch plugins support the ",(0,t.jsx)(i.code,{children:"onInit()"})," lifecycle callback method. This callback is called after ",(0,t.jsx)(i.code,{children:"onInstalled()"})," has been called for ",(0,t.jsx)(i.em,{children:"all"})," plugins on the same instrument. It is also guaranteed to be called at the beginning of the instrument's initialization process. It is recommended that any plugin initialization tasks that require interaction with core parts of the G3X Touch avionics and/or other plugins be performed in ",(0,t.jsx)(i.code,{children:"onInit()"}),"."]}),"\n",(0,t.jsxs)(i.p,{children:["G3X Touch plugins are passed the following references via ",(0,t.jsx)(i.code,{children:"binder"}),":"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["The local ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/getting-started/using-the-event-bus",children:"event bus"}),"."]}),"\n",(0,t.jsxs)(i.li,{children:["The ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/InstrumentBackplane",children:"instrument backplane"}),"."]}),"\n",(0,t.jsxs)(i.li,{children:["The avionics configuration object (contains global options parsed from ",(0,t.jsx)(i.code,{children:"panel.xml"}),")."]}),"\n",(0,t.jsxs)(i.li,{children:["The instrument configuration object (contains instrument-specific options parsed from ",(0,t.jsx)(i.code,{children:"panel.xml"}),")"]}),"\n",(0,t.jsxs)(i.li,{children:["An instance of ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FacilityLoader",children:(0,t.jsx)(i.code,{children:"FacilityLoader"})}),"."]}),"\n",(0,t.jsx)(i.li,{children:"The flight plan lateral path calculator."}),"\n",(0,t.jsxs)(i.li,{children:["The local flight management system (FMS) ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3xtouchcommon/classes/G3XFms",children:"instance"}),"."]}),"\n",(0,t.jsxs)(i.li,{children:["The ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3xtouchcommon/classes/UiService",children:"UI service"}),"."]}),"\n",(0,t.jsx)(i.li,{children:"A collection of all G3X Touch navigation indicators."}),"\n",(0,t.jsxs)(i.li,{children:["The ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/cas/cas-system",children:"CAS system"}),"."]}),"\n",(0,t.jsxs)(i.li,{children:["A ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3xtouchcommon/interfaces/G3XFplSourceDataProvider",children:"provider"})," of flight plan source data."]}),"\n",(0,t.jsx)(i.li,{children:"The local GDU user setting manager."}),"\n",(0,t.jsx)(i.li,{children:"The local display user setting manager."}),"\n",(0,t.jsx)(i.li,{children:"The local PFD user setting manager."}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"plugin-functionality",children:"Plugin Functionality"}),"\n",(0,t.jsx)(i.p,{children:"Each G3X Touch plugin can implement one or more of the following optional methods:"}),"\n",(0,t.jsx)(i.h3,{id:"registeruiviews",children:(0,t.jsx)(i.code,{children:"registerUiViews()"})}),"\n",(0,t.jsxs)(i.p,{children:["This method is used to register additional ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/g3xtouch/ui-framework",children:"views"})," with the UI service. This method is guaranteed to be called ",(0,t.jsx)(i.em,{children:"after"})," the base G3X Touch has registered all of its views. Therefore, you may replace views registered by the base G3X Touch by registering your own view under the same key."]}),"\n",(0,t.jsx)(i.admonition,{type:"warning",children:(0,t.jsx)(i.p,{children:"When replacing a base G3X Touch view, ensure that the replacement conforms to the same interface as the view being replaced. Otherwise, you may encounter runtime errors."})}),"\n",(0,t.jsxs)(i.p,{children:["In addition to the UI service, a ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3xtouchcommon/type-aliases/G3XTouchUiComponentContext",children:"context object"})," is also passed to this method. The context object contains references to all items not already referenced by the plugin binder that are required to create the base G3X Touch views. These references are provided primarily to make it easy to replace any of these views. However, you are also free to use them when creating brand new views."]}),"\n",(0,t.jsx)(i.h3,{id:"registermfdmainpages",children:(0,t.jsx)(i.code,{children:"registerMfdMainPages()"})}),"\n",(0,t.jsxs)(i.p,{children:["This method is used to register additional ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/g3xtouch/ui-framework#mfd-main-pages",children:"MFD main pages"}),". This method is guaranteed to be called ",(0,t.jsx)(i.em,{children:"after"})," the base G3X Touch has registered all of its pages. Therefore, you may replace pages registered by the base G3X Touch by registering your own page under the same key."]}),"\n",(0,t.jsxs)(i.p,{children:["In addition to the page registrar, a ",(0,t.jsx)(i.a,{href:"/api/g3xtouchcommon/type-aliases/g3xtouchuicomponentcontext.md",children:"context object"})," is also passed to this method. The context object contains references to all items not already referenced by the plugin binder that are required to create the base G3X Touch MFD main pages. These references are provided primarily to make it easy to replace any of these pages. However, you are also free to use them when creating brand new pages."]}),"\n",(0,t.jsx)(i.h3,{id:"registerpfdpages",children:(0,t.jsx)(i.code,{children:"registerPfdPages()"})}),"\n",(0,t.jsxs)(i.p,{children:["This method is used to register additional ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/g3xtouch/ui-framework#pfd-pages",children:"PFD pages"}),". This method is guaranteed to be called ",(0,t.jsx)(i.em,{children:"after"})," the base G3X Touch has registered all of its pages. Therefore, you may replace pages registered by the base G3X Touch by registering your own page under the same key."]}),"\n",(0,t.jsxs)(i.p,{children:["In addition to the page registrar, a ",(0,t.jsx)(i.a,{href:"/api/g3xtouchcommon/type-aliases/g3xtouchuicomponentcontext.md",children:"context object"})," is also passed to this method. The context object contains references to all items not already referenced by the plugin binder that are required to create the base G3X Touch PFD pages. These references are provided primarily to make it easy to replace any of these pages. However, you are also free to use them when creating brand new pages."]}),"\n",(0,t.jsx)(i.h3,{id:"registerpfdinsets",children:(0,t.jsx)(i.code,{children:"registerPfdInsets()"})}),"\n",(0,t.jsxs)(i.p,{children:["This method is used to register additional PFD insets. This method is guaranteed to be called ",(0,t.jsx)(i.em,{children:"after"})," the base G3X Touch has registered all of its insets. Therefore, you may replace insets registered by the base G3X Touch by registering your own inset under the same key."]}),"\n",(0,t.jsxs)(i.p,{children:["In addition to the inset registrar, a ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3xtouchcommon/type-aliases/G3XTouchUiComponentContext",children:"context object"})," is also passed to this method. The context object contains references to all items not already referenced by the plugin binder that are required to create the base G3X Touch PFD insets. These references are provided primarily to make it easy to replace any of these insets. However, you are also free to use them when creating brand new insets."]}),"\n",(0,t.jsx)(i.h3,{id:"rendereis",children:(0,t.jsx)(i.code,{children:"renderEis()"})}),"\n",(0,t.jsxs)(i.p,{children:["This method is used to render custom EIS content. An EIS rendered in this way will replace ",(0,t.jsx)(i.strong,{children:"all"})," EIS components configured in ",(0,t.jsx)(i.code,{children:"panel.xml"}),"."]}),"\n",(0,t.jsx)(i.admonition,{type:"note",children:(0,t.jsxs)(i.p,{children:["Support for displaying an EIS must still be declared in ",(0,t.jsx)(i.code,{children:"panel.xml"})," via the ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/g3xtouch/panel-xml-tag-documentation#eis",children:(0,t.jsx)(i.code,{children:"<Eis>"})})," tag before EIS content can be rendered by plugin. If the ",(0,t.jsx)(i.code,{children:"<Eis>"})," tag is not properly defined in ",(0,t.jsx)(i.code,{children:"panel.xml"}),", then no EIS will be displayed in the G3X Touch, even if one or more plugins return a non-null value from ",(0,t.jsx)(i.code,{children:"renderEis()"}),"."]})}),"\n",(0,t.jsx)(i.p,{children:"If multiple plugins render their own custom EIS contents with this method, then only the one from the plugin that was loaded last is used."}),"\n",(0,t.jsx)(i.h3,{id:"rendertopfdinstruments",children:(0,t.jsx)(i.code,{children:"renderToPfdInstruments()"})}),"\n",(0,t.jsx)(i.p,{children:"This method is used to render additional components onto the PFD display. Components rendered in this way will be rendered into the DOM after all base G3X Touch components. Therefore, these additional components will by default appear on top of any overlapping base G3X Touch components."}),"\n",(0,t.jsx)(i.admonition,{type:"warning",children:(0,t.jsx)(i.p,{children:"When positioning components within the PFD display, remember that the display changes size when switching between Fullscreen and Splitscreen modes, and when the EIS is toggled on/off (if the installation supports displaying an EIS). Additionally, certain base G3X Touch components in the display may change their size, visibility, and/or positioning when the above changes occur."})}),"\n",(0,t.jsxs)(i.h3,{id:"getpersistentglobalsettingsgetpersistentlocalsettings",children:[(0,t.jsx)(i.code,{children:"getPersistentGlobalSettings()"}),"/",(0,t.jsx)(i.code,{children:"getPersistentLocalSettings()"})]}),"\n",(0,t.jsxs)(i.p,{children:["These methods are used to define user settings whose values should be saved across flights. Settings marked as persistent in this manner will be saved via the MSFS ",(0,t.jsx)(i.code,{children:"DataStore"})," API to the user's cloud save file. Saved settings are loaded during instrument initialization when loading a new flight. Persistent settings are saved on a per-aircraft basis (determined by the airplane's ATC_MODEL)."]}),"\n",(0,t.jsxs)(i.p,{children:["Global settings are those whose un-aliased names are unique across all G3X Touch instruments. These are typically settings that are synced across different JS/HTML instruments. Local settings are those whose un-aliased names are unique within each G3X Touch instrument, but may not be unique when compared across different instruments. These are typically settings that are not synced across instruments (e.g. those managed by a ",(0,t.jsx)(i.code,{children:"DefaultUserSettingManager"})," instantiated with the ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/DefaultUserSettingManager#constructors",children:(0,t.jsx)(i.code,{children:"keepLocal"})})," option)."]}),"\n",(0,t.jsxs)(i.admonition,{type:"tip",children:[(0,t.jsxs)(i.p,{children:["A new cloud save data key is generated and written for each persistent user setting ",(0,t.jsx)(i.em,{children:"per aircraft"})," as soon as the instrument initializes after loading a flight. Currently there is no mechanism by which you can remove data keys from cloud save files. This means that once a key is added to a cloud save, it can never be removed."]}),(0,t.jsx)(i.p,{children:'As such, it is highly recommended that you finalize the names of all would-be persistent user settings before allowing them to be saved. This will help to minimize the number of "junk" keys written to the cloud saves of anybody running your plugin code.'})]})]})}function h(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},250065:function(e,i,n){n.d(i,{Z:function(){return a},a:function(){return o}});var s=n(667294);let t={},r=s.createContext(t);function o(e){let i=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);