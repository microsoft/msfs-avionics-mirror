"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["71428"],{880319:function(e,n,d){d.r(n),d.d(n,{metadata:()=>i,contentTitle:()=>o,default:()=>h,assets:()=>s,toc:()=>r,frontMatter:()=>a});var i=JSON.parse('{"id":"api/g3000common/type-aliases/ToldUserSettingTypes","title":"Type Alias: ToldUserSettingTypes","description":"ToldUserSettingTypes: object","source":"@site/docs/api/g3000common/type-aliases/ToldUserSettingTypes.md","sourceDirName":"api/g3000common/type-aliases","slug":"/api/g3000common/type-aliases/ToldUserSettingTypes","permalink":"/msfs-avionics-mirror/2024/docs/api/g3000common/type-aliases/ToldUserSettingTypes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"ToldThrustReverserSelectableChecker","permalink":"/msfs-avionics-mirror/2024/docs/api/g3000common/type-aliases/ToldThrustReverserSelectableChecker"},"next":{"title":"ToldVSpeed","permalink":"/msfs-avionics-mirror/2024/docs/api/g3000common/type-aliases/ToldVSpeed"}}'),l=d("785893"),t=d("250065");let a={},o="Type Alias: ToldUserSettingTypes",s={},r=[{value:"Type declaration",id:"type-declaration",level:2},{value:"toldDatabaseVersion",id:"tolddatabaseversion",level:3},{value:"toldDestinationDefaultApplied",id:"tolddestinationdefaultapplied",level:3},{value:"toldDestinationIcao",id:"tolddestinationicao",level:3},{value:"toldEnabled",id:"toldenabled",level:3},{value:"toldLandingAntiIceOn",id:"toldlandingantiiceon",level:3},{value:"toldLandingAutothrottleOn",id:"toldlandingautothrottleon",level:3},{value:"toldLandingCalcResult",id:"toldlandingcalcresult",level:3},{value:"toldLandingCanUsePredictedWeight",id:"toldlandingcanusepredictedweight",level:3},{value:"toldLandingDistanceRequired",id:"toldlandingdistancerequired",level:3},{value:"toldLandingFactor",id:"toldlandingfactor",level:3},{value:"toldLandingFactorDefault",id:"toldlandingfactordefault",level:3},{value:"toldLandingFlapsIndex",id:"toldlandingflapsindex",level:3},{value:"toldLandingFlapsIndexDefault",id:"toldlandingflapsindexdefault",level:3},{value:"toldLandingPressure",id:"toldlandingpressure",level:3},{value:"toldLandingPressureAltitude",id:"toldlandingpressurealtitude",level:3},{value:"toldLandingRunwayElevation",id:"toldlandingrunwayelevation",level:3},{value:"toldLandingRunwayGradient",id:"toldlandingrunwaygradient",level:3},{value:"toldLandingRunwayHeading",id:"toldlandingrunwayheading",level:3},{value:"toldLandingRunwayLength",id:"toldlandingrunwaylength",level:3},{value:"toldLandingRunwaySurface",id:"toldlandingrunwaysurface",level:3},{value:"toldLandingTemperature",id:"toldlandingtemperature",level:3},{value:"toldLandingThrustReversers",id:"toldlandingthrustreversers",level:3},{value:"toldLandingUsePredictedWeight",id:"toldlandingusepredictedweight",level:3},{value:"toldLandingVSpeedsAccepted",id:"toldlandingvspeedsaccepted",level:3},{value:"toldLandingWeight",id:"toldlandingweight",level:3},{value:"toldLandingWindDirection",id:"toldlandingwinddirection",level:3},{value:"toldLandingWindSpeed",id:"toldlandingwindspeed",level:3},{value:"toldOriginIcao",id:"toldoriginicao",level:3},{value:"toldTakeoffAntiIceOn",id:"toldtakeoffantiiceon",level:3},{value:"toldTakeoffCalcResult",id:"toldtakeoffcalcresult",level:3},{value:"toldTakeoffCanUseRat",id:"toldtakeoffcanuserat",level:3},{value:"toldTakeoffDistanceRequired",id:"toldtakeoffdistancerequired",level:3},{value:"toldTakeoffFactor",id:"toldtakeofffactor",level:3},{value:"toldTakeoffFlapsIndex",id:"toldtakeoffflapsindex",level:3},{value:"toldTakeoffFlapsIndexDefault",id:"toldtakeoffflapsindexdefault",level:3},{value:"toldTakeoffPressure",id:"toldtakeoffpressure",level:3},{value:"toldTakeoffPressureAltitude",id:"toldtakeoffpressurealtitude",level:3},{value:"toldTakeoffRolling",id:"toldtakeoffrolling",level:3},{value:"toldTakeoffRollingDefault",id:"toldtakeoffrollingdefault",level:3},{value:"toldTakeoffRunwayElevation",id:"toldtakeoffrunwayelevation",level:3},{value:"toldTakeoffRunwayGradient",id:"toldtakeoffrunwaygradient",level:3},{value:"toldTakeoffRunwayHeading",id:"toldtakeoffrunwayheading",level:3},{value:"toldTakeoffRunwayLength",id:"toldtakeoffrunwaylength",level:3},{value:"toldTakeoffRunwaySurface",id:"toldtakeoffrunwaysurface",level:3},{value:"toldTakeoffTemperature",id:"toldtakeofftemperature",level:3},{value:"toldTakeoffThrustReversers",id:"toldtakeoffthrustreversers",level:3},{value:"toldTakeoffUseRat",id:"toldtakeoffuserat",level:3},{value:"toldTakeoffVSpeedsAccepted",id:"toldtakeoffvspeedsaccepted",level:3},{value:"toldTakeoffWeight",id:"toldtakeoffweight",level:3},{value:"toldTakeoffWindDirection",id:"toldtakeoffwinddirection",level:3},{value:"toldTakeoffWindSpeed",id:"toldtakeoffwindspeed",level:3},{value:"Defined in",id:"defined-in",level:2}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"type-alias-toldusersettingtypes",children:"Type Alias: ToldUserSettingTypes"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"ToldUserSettingTypes"}),": ",(0,l.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"TOLD (takeoff/landing) performance calculation user settings."}),"\n",(0,l.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,l.jsx)(n.h3,{id:"tolddatabaseversion",children:"toldDatabaseVersion"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldDatabaseVersion"}),": ",(0,l.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The version of the TOLD database. An empty string indicates no TOLD database is available."}),"\n",(0,l.jsx)(n.h3,{id:"tolddestinationdefaultapplied",children:"toldDestinationDefaultApplied"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldDestinationDefaultApplied"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether the default destination has been applied since the last power cycle."}),"\n",(0,l.jsx)(n.h3,{id:"tolddestinationicao",children:"toldDestinationIcao"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldDestinationIcao"}),": ",(0,l.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The ICAO string (V2) of the landing destination (either an airport or a runway)."}),"\n",(0,l.jsx)(n.h3,{id:"toldenabled",children:"toldEnabled"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldEnabled"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether TOLD performance calculations are enabled."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingantiiceon",children:"toldLandingAntiIceOn"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingAntiIceOn"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether anti-ice is on for landing."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingautothrottleon",children:"toldLandingAutothrottleOn"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingAutothrottleOn"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether autothrottle is on for landing."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingcalcresult",children:"toldLandingCalcResult"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingCalcResult"}),": ",(0,l.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The most recent landing performance calculation results, as a stringified JSON. An empty string indicates there\nis no result."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingcanusepredictedweight",children:"toldLandingCanUsePredictedWeight"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingCanUsePredictedWeight"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether predicted weight can be used for the landing weight."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingdistancerequired",children:"toldLandingDistanceRequired"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingDistanceRequired"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing distance required, in feet. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingfactor",children:"toldLandingFactor"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingFactor"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing factor, in percent."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingfactordefault",children:"toldLandingFactorDefault"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingFactorDefault"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The default landing factor, in percent. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingflapsindex",children:"toldLandingFlapsIndex"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingFlapsIndex"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The index of the landing flaps setting."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingflapsindexdefault",children:"toldLandingFlapsIndexDefault"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingFlapsIndexDefault"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The index of the default landing flaps setting. A negative value indicates an unintialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingpressure",children:"toldLandingPressure"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingPressure"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The pressure setting at the landing runway (QNH), in hectopascals. A negative value indicated an uninitialized\nstate."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingpressurealtitude",children:"toldLandingPressureAltitude"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingPressureAltitude"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The calculated pressure altitude at the landing runway, in feet."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingrunwayelevation",children:"toldLandingRunwayElevation"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingRunwayElevation"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing runway elevation, in feet above MSL. A value less than or equal to Number.MIN_SAFE_INTEGER\nindicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingrunwaygradient",children:"toldLandingRunwayGradient"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingRunwayGradient"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing runway gradient, in hundredths of percent. Positive values indicate an upward slope. A value less than\nor equal to Number.MIN_SAFE_INTEGER indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingrunwayheading",children:"toldLandingRunwayHeading"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingRunwayHeading"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing runway heading, in degrees true. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingrunwaylength",children:"toldLandingRunwayLength"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingRunwayLength"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing runway length, in feet. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingrunwaysurface",children:"toldLandingRunwaySurface"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingRunwaySurface"}),": ",(0,l.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/enumerations/ToldRunwaySurfaceCondition",children:(0,l.jsx)(n.code,{children:"ToldRunwaySurfaceCondition"})})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing runway surface condition."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingtemperature",children:"toldLandingTemperature"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingTemperature"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing temperature, in degrees Celsius. A value less than or equal to Number.MIN_SAFE_INTEGER\nindicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingthrustreversers",children:"toldLandingThrustReversers"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingThrustReversers"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether to take credit for thrust reversers for landing performance calculations."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingusepredictedweight",children:"toldLandingUsePredictedWeight"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingUsePredictedWeight"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether to use predicted weight instead of current weight for the landing weight."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingvspeedsaccepted",children:"toldLandingVSpeedsAccepted"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingVSpeedsAccepted"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether the calculated landing V-speeds have been accepted."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingweight",children:"toldLandingWeight"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingWeight"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing weight, in pounds. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingwinddirection",children:"toldLandingWindDirection"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingWindDirection"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing wind direction, in degrees true. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldlandingwindspeed",children:"toldLandingWindSpeed"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldLandingWindSpeed"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The landing wind speed, in knots. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldoriginicao",children:"toldOriginIcao"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldOriginIcao"}),": ",(0,l.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The ICAO string (V2) of the takeoff origin (either an airport or a runway)."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffantiiceon",children:"toldTakeoffAntiIceOn"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffAntiIceOn"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether anti-ice is on for takeoff."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffcalcresult",children:"toldTakeoffCalcResult"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffCalcResult"}),": ",(0,l.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The most recent takeoff performance calculation results, as a stringified JSON. An empty string indicates there\nis no result."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffcanuserat",children:"toldTakeoffCanUseRat"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffCanUseRat"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether it is possible to use ram air temperature for takeoff temperature."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffdistancerequired",children:"toldTakeoffDistanceRequired"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffDistanceRequired"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff distance required, in feet. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeofffactor",children:"toldTakeoffFactor"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffFactor"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff factor, in percent."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffflapsindex",children:"toldTakeoffFlapsIndex"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffFlapsIndex"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The index of the takeoff flaps setting."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffflapsindexdefault",children:"toldTakeoffFlapsIndexDefault"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffFlapsIndexDefault"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The index of the default takeoff flaps setting. A negative value indicates an unintialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffpressure",children:"toldTakeoffPressure"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffPressure"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The pressure setting at the takeoff runway (QNH), in hectopascals. A negative value indicates an uninitialized\nstate."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffpressurealtitude",children:"toldTakeoffPressureAltitude"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffPressureAltitude"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The calculated pressure altitude at the takeoff runway, in feet."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffrolling",children:"toldTakeoffRolling"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffRolling"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether takeoff is a rolling takeoff."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffrollingdefault",children:"toldTakeoffRollingDefault"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffRollingDefault"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The default rolling takeoff option. 0 = false and 1 = true. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffrunwayelevation",children:"toldTakeoffRunwayElevation"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffRunwayElevation"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff runway elevation, in feet above MSL. A value less than or equal to Number.MIN_SAFE_INTEGER\nindicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffrunwaygradient",children:"toldTakeoffRunwayGradient"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffRunwayGradient"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff runway gradient, in hundredths of percent. Positive values indicate an upward slope. A value less than\nor equal to Number.MIN_SAFE_INTEGER indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffrunwayheading",children:"toldTakeoffRunwayHeading"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffRunwayHeading"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff runway heading, in degrees true. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffrunwaylength",children:"toldTakeoffRunwayLength"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffRunwayLength"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff runway length, in feet. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffrunwaysurface",children:"toldTakeoffRunwaySurface"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffRunwaySurface"}),": ",(0,l.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/enumerations/ToldRunwaySurfaceCondition",children:(0,l.jsx)(n.code,{children:"ToldRunwaySurfaceCondition"})})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff runway surface condition."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeofftemperature",children:"toldTakeoffTemperature"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffTemperature"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff temperature, in degrees Celsius. A value less than or equal to Number.MIN_SAFE_INTEGER\nindicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffthrustreversers",children:"toldTakeoffThrustReversers"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffThrustReversers"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether to take credit for thrust reversers for takeoff performance calculations."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffuserat",children:"toldTakeoffUseRat"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffUseRat"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether to use ram air temperature for takeoff temperature."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffvspeedsaccepted",children:"toldTakeoffVSpeedsAccepted"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffVSpeedsAccepted"}),": ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Whether the calculated takeoff V-speeds have been accepted."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffweight",children:"toldTakeoffWeight"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffWeight"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff weight, in pounds. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffwinddirection",children:"toldTakeoffWindDirection"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffWindDirection"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff wind direction, in degrees true. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h3,{id:"toldtakeoffwindspeed",children:"toldTakeoffWindSpeed"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"toldTakeoffWindSpeed"}),": ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The takeoff wind speed, in knots. A negative value indicates an uninitialized state."}),"\n",(0,l.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:"src/workingtitle-instruments-g3000/html_ui/Shared/Settings/ToldUserSettings.ts:7"})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},250065:function(e,n,d){d.d(n,{Z:function(){return o},a:function(){return a}});var i=d(667294);let l={},t=i.createContext(l);function a(e){let n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);