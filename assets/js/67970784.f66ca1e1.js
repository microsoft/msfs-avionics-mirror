"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[86835],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(t),c=i,h=u["".concat(l,".").concat(c)]||u[c]||d[c]||r;return t?a.createElement(h,s(s({ref:n},m),{},{components:t})):a.createElement(h,s({ref:n},m))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},53036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={sidebar_position:1},s="SimVars",o={unversionedId:"interacting-with-msfs/simvars",id:"interacting-with-msfs/simvars",title:"SimVars",description:"Introduction",source:"@site/docs/interacting-with-msfs/simvars.md",sourceDirName:"interacting-with-msfs",slug:"/interacting-with-msfs/simvars",permalink:"/msfs-avionics-mirror/docs/interacting-with-msfs/simvars",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebar",previous:{title:"Refs and the Component Lifecycle",permalink:"/msfs-avionics-mirror/docs/getting-started/refs-and-component-lifecycle"},next:{title:"Key Events",permalink:"/msfs-avionics-mirror/docs/interacting-with-msfs/key-events"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Types of SimVars",id:"types-of-simvars",level:2},{value:"A Vars",id:"a-vars",level:3},{value:"L Vars",id:"l-vars",level:3},{value:"B Vars",id:"b-vars",level:3},{value:"Setting SimVars in JS",id:"setting-simvars-in-js",level:2},{value:"Setting B Vars",id:"setting-b-vars",level:3},{value:"Bridging SimVars to the Event Bus",id:"bridging-simvars-to-the-event-bus",level:2},{value:"Using <code>SimVarPublisher</code>",id:"using-simvarpublisher",level:3},{value:"Publishing Boolean Values",id:"publishing-boolean-values",level:3},{value:"Publishing Indexed SimVars",id:"publishing-indexed-simvars",level:3},{value:"More Information",id:"more-information",level:2}],m={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"simvars"},"SimVars"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"One of the primary ways by which addons can communicate with MSFS is via Simulation Variables, or ",(0,i.kt)("em",{parentName:"p"},"SimVars"),". These variable contain data and information about the state of the simulator itself, your airplane, and various other components of MSFS."),(0,i.kt)("p",null,"From Javascript, you can utilize several of the types of SimVars available in MSFS."),(0,i.kt)("h2",{id:"types-of-simvars"},"Types of SimVars"),(0,i.kt)("h3",{id:"a-vars"},"A Vars"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"A vars")," are normal MSFS simulation variables which can be queried. Historically, they have been called ",(0,i.kt)("strong",{parentName:"p"},"A vars")," due to needing to prefix those SimVars with the text ",(0,i.kt)("strong",{parentName:"p"},"A:"),", but this is not required from the Javascript framework. To query a SimVar, supply the SimVar name and the units you would like to return the value in:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const indicatedAirspeed = SimVar.GetSimVarValue('INDICATED AIRSPEED', 'knots');\n")),(0,i.kt)("p",null,"Some A vars in the sim can also take an index, such as with engine SimVars. This index can be appended to the end of the SimVar to specify which in a collection of items the value should be retrieved for:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const engineN1 = SimVar.GetSimVarValue('TURB ENG N1:1', 'percent');\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"While you can read the value of any A var, only certain A vars allow you to directly set their values. Attempting to set the value of a read-only A var will ",(0,i.kt)("em",{parentName:"p"},"fail silently"),".")),(0,i.kt)("h3",{id:"l-vars"},"L Vars"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"L vars")," are user-settable values that can have any name, and are prefixed with the text ",(0,i.kt)("strong",{parentName:"p"},"L:")," in their name. These variables are used to store addon specific information that is to be shared with other parts of the addon or with the outside world."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const isInMenuMode = SimVar.GetSimVarValue('L:IS_MENU_ACTIVE', 'bool');\n")),(0,i.kt)("p",null,"L vars must be properly prefixed and their name must be a contiguous string with no spaces. Setting an L var for the first time creates the variable; it is not necessary to define them anywhere ahead of time. All L vars can hold only ",(0,i.kt)("strong",{parentName:"p"},"numeric")," data, and not arbitrary string or binary data."),(0,i.kt)("h3",{id:"b-vars"},"B Vars"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"B vars")," are values associated with ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flightsimulator.com/html/Content_Configuration/Models/ModelBehaviors/Input_Event_Definitions.htm"},"Model Behaviors Input Events")," and are prefixed with ",(0,i.kt)("strong",{parentName:"p"},"B:"),". Each Input Event defined by Model Behaviors has a corresponding B var with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"B:[Input Event Name]")," that stores the value for that Input Event. Input Events are typically used to capture and manage the states of various user-interactable cockpit elements, such as switches, knobs, levers, etc. Therefore, B vars are a convenient method to access the states of these cockpit elements."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const taxiLightSwitchState = SimVar.GetSimVarValue('B:LIGHTING_Taxi_Switch', 'number');\n")),(0,i.kt)("p",null,"B vars can hold only ",(0,i.kt)("strong",{parentName:"p"},"numeric")," data. B vars are user-settable, but require a ",(0,i.kt)("a",{parentName:"p",href:"#setting-b-vars"},"special syntax")," to do so."),(0,i.kt)("h2",{id:"setting-simvars-in-js"},"Setting SimVars in JS"),(0,i.kt)("p",null,"Setting a SimVar is very straightforward:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"SimVar.SetSimVarValue('GENERAL ENG THROTTLE LEVER POSITION:1', 'percent', 100);\n")),(0,i.kt)("p",null,"However, do note that setting SimVars via JS is an asynchronous operation that is not guaranteed to finish by the time the next line of code is run. ",(0,i.kt)("inlineCode",{parentName:"p"},"SetSimVarValue()")," returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise<void>"),", which allows you to wait until the command has been accepted to run additional code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"//Using .then\nSimVar.SetSimVarValue('LIGHT NAV', 'bool', true)\n  .then(() => console.log('Nav light is on!'));\n\n//Using async/await\nawait SimVar.SetSimVarValue('LIGHT NAV', 'bool', true);\nconsole.log('Nav light is on!');\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"For some SimVars, even awaiting the ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise")," will not guarantee the update is complete. Calls into the sim are cached and run at frame end for performance reasons and not all sim systems are synchronous. Nonetheless, we still highly recommend using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise")," form, which yeilds much more consistent results for these cases."),(0,i.kt)("p",{parentName:"admonition"},"Most usages of setting SimVars will not fall into this case, where explicit post-set timings are required.")),(0,i.kt)("h3",{id:"setting-b-vars"},"Setting B Vars"),(0,i.kt)("p",null,"Setting the value of a B Var is a bit different from setting A Vars and L Vars. The usual syntax does not work for B Vars:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Doesn't work!\nSimVar.SetSimVarValue('B:LIGHTING_Taxi_Switch', 'number', 1);\n")),(0,i.kt)("p",null,'Instead, you must "set" or invoke special B Var events (also known as B events) using ',(0,i.kt)("inlineCode",{parentName:"p"},"SetSimVarValue()"),", similar to how ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/interacting-with-msfs/key-events#initiating-a-key-event"},"key events")," can be invoked using the same API. All B Vars have three associated B events:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Set"),": sets the value of a B Var."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Inc"),": increments the value of a B Var."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Dec"),": decrements the value of a B Var.")),(0,i.kt)("p",null,"The exact behavior of each of the above events depends on its associated Input Event/B Var. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," may clamp values to a certain range, and ",(0,i.kt)("inlineCode",{parentName:"p"},"Inc")," may increment values with or without wrapping."),(0,i.kt)("p",null,"To invoke a B event, call ",(0,i.kt)("inlineCode",{parentName:"p"},"SetSimVarValue()")," with the name of the B var suffixed with the event name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Invokes the 'Set' event on the 'B:LIGHTING_Taxi_Switch' B Var with a parameter of 1.\nSimVar.SetSimVarValue('B:LIGHTING_Taxi_Switch_Set', 'number', 1);\n")),(0,i.kt)("p",null,"Some B Vars have additional custom events defined for them (called ",(0,i.kt)("strong",{parentName:"p"},"bindings"),"). These events can be invoked in the same manner as the default events. For example, if the ",(0,i.kt)("inlineCode",{parentName:"p"},"On")," binding is defined as an alias for invoking ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," with a parameter of 1, then the following is equivalent to the previous example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"SimVar.SetSimVarValue('B:LIGHTING_Taxi_Switch_On', 'number', 0);\n")),(0,i.kt)("h2",{id:"bridging-simvars-to-the-event-bus"},"Bridging SimVars to the Event Bus"),(0,i.kt)("p",null,"SimVars are the primary means by which you will retrieve information from the simulator. However, calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"SimVar.GetSimVarValue()")," incur a non-negligible performance cost. Because of this, we want to minimize the number of times we call ",(0,i.kt)("inlineCode",{parentName:"p"},"SimVar.GetSimVarValue()"),". Additionally, there are many scenarios when we would like to use event-driven logic with SimVars by watching the value of a SimVar and executing code only when it changes. We can solve both of these issues by bridging SimVars to the ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/getting-started/using-the-event-bus#publishing-simvar-data-via-the-event-bus"},"event bus"),"."),(0,i.kt)("h3",{id:"using-simvarpublisher"},"Using ",(0,i.kt)("inlineCode",{parentName:"h3"},"SimVarPublisher")),(0,i.kt)("p",null,"We can code the bridge manually as described in the section linked above, but doing this for many SimVars will quickly become tedious. Instead, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimVarPublisher")," class to simplify the process. To use ",(0,i.kt)("inlineCode",{parentName:"p"},"SimVarPublisher"),", we must specify a set of SimVars to read and then take care of some initialization and housekeeping tasks:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { EventBus, SimVarPublisher } from '@microsoft/msfs-sdk';\n\ninterface SpeedEvents {\n  indicated_airspeed: number;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private readonly bus = new EventBus();\n\n  private readonly airspeedPublisher = new SimVarPublisher<SpeedEvents>(new Map([\n    ['indicated_airspeed', { name: 'AIRSPEED INDICATED', type: 'knots' }]\n  ]), this.bus);\n\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    this.airspeedPublisher.startPublish();\n  }\n\n  protected Update(): void {\n    super.Update();\n\n    this.airspeedPublisher.onUpdate();\n  }\n}\n")),(0,i.kt)("p",null,"In the above example, we've created a ",(0,i.kt)("inlineCode",{parentName:"p"},"SimVarPublisher")," that reads the ",(0,i.kt)("inlineCode",{parentName:"p"},"AIRSPEED INDICATED")," SimVar with units ",(0,i.kt)("inlineCode",{parentName:"p"},"knots")," and publishes the value to the ",(0,i.kt)("inlineCode",{parentName:"p"},"indicated_airspeed")," topic on the event bus. The call to ",(0,i.kt)("inlineCode",{parentName:"p"},"startPublish()")," tells the publisher to start reading and publishing SimVar values the next time it is updated. Finally, we call ",(0,i.kt)("inlineCode",{parentName:"p"},"onUpdate()")," in the instrument's update loop to update the publisher once on every instrument update cycle."),(0,i.kt)("p",null,"Publishing just one SimVar doesn't seem so impressive, but we can quite easily add additional SimVars:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface AirDataEvents {\n  indicated_airspeed: number;\n  true_airspeed: number;\n  mach: number;\n  pressure_altitude: number;\n  vertical_speed: number;\n  total_air_temperature: number;\n  static_air_temperature: number;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private readonly bus = new EventBus();\n\n  private readonly airspeedPublisher = new SimVarPublisher<AirDataEvents>(new Map([\n    ['indicated_airspeed', { name: 'AIRSPEED INDICATED', type: 'knots' }],\n    ['true_airspeed', { name: 'AIRSPEED TRUE', type: 'knots' }],\n    ['mach', { name: 'AIRSPEED MACH', type: 'number' }],\n    ['pressure_altitude', { name: 'PRESSURE ALTITUDE', type: 'feet' }],\n    ['vertical_speed', { name: 'VERTICAL SPEED', type: 'feet per minute' }],\n    ['total_air_temperature', { name: 'TOTAL AIR TEMPERATURE', type: 'celsius' }],\n    ['static_air_temperature', { name: 'AMBIENT TEMPERATURE', type: 'celsius' }]\n  ]), this.bus);\n\n  // ...\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"SimVarPublisher")," will only read and publish the SimVars tied to topics that have actually been subscribed to in order to avoid making useless calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"SimVar.GetSimVarValue()"),".")),(0,i.kt)("h3",{id:"publishing-boolean-values"},"Publishing Boolean Values"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SimVar.GetSimVarValue()")," does not return values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean"),", even if you pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"'bool'")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"'boolean'")," as the units argument. Instead, it will return the numeric values ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," to represent ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", respectively. In order to avoid type confusion and to allow SimVar values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," to be published on the bus where a ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," type is expected, ",(0,i.kt)("inlineCode",{parentName:"p"},"SimVarPublisher")," automatically converts numeric SimVar values to their ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," equivalents when ",(0,i.kt)("inlineCode",{parentName:"p"},"'bool'")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"'boolean'")," is specified as the SimVar unit type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface OnGroundEvents {\n  is_on_ground: boolean;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private readonly bus = new EventBus();\n\n  private readonly airspeedPublisher = new SimVarPublisher<OnGroundEvents>(new Map([\n    // A boolean (true/false) will be published to 'is_on_ground' instead of 0/1.\n    ['is_on_ground', { name: 'SIM ON GROUND', type: 'bool' }]\n  ]), this.bus);\n\n  // ...\n}\n")),(0,i.kt)("h3",{id:"publishing-indexed-simvars"},"Publishing Indexed SimVars"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SimVarPublisher")," supports publishing SimVars with arbitrary indexes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface EngineEvents {\n  n1: number;\n\n  [n1: `n1_${number}`]: number;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private readonly bus = new EventBus();\n\n  private readonly airspeedPublisher = new SimVarPublisher<EngineEvents>(new Map([\n    ['n1', { name: 'TURB ENG N1:#index#', type: 'percent', indexed: true }]\n  ]), this.bus);\n\n  // ...\n}\n")),(0,i.kt)("p",null,"In the above example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"n1")," topic is flagged as an indexed SimVar topic by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"indexed")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in its publisher entry. When an entry is flagged as indexed, the publisher will automatically expand the entry to a series of indexed topics and SimVar names, with indexes beginning at 0. The indexed topics are generated using the pattern ",(0,i.kt)("inlineCode",{parentName:"p"},"`${topic}_${index}`"),", and the indexed SimVar names are generated by replacing the ",(0,i.kt)("inlineCode",{parentName:"p"},"#index#")," macro with the numeric index. So, in the above example the SimVars ",(0,i.kt)("inlineCode",{parentName:"p"},"TURB ENG N1:0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TURB ENG N1:1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TURB ENG N1:2"),", ... will be published to the topics ",(0,i.kt)("inlineCode",{parentName:"p"},"n1_0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"n1_1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"n1_2"),", ..."),(0,i.kt)("p",null,"Additionally, the publisher will publish the SimVar at a default index (equal to 1 unless otherwise specified) to the unsuffixed form of the topic. So, in the above example the ",(0,i.kt)("inlineCode",{parentName:"p"},"TURB ENG N1:1")," SimVar will also be published to the topic ",(0,i.kt)("inlineCode",{parentName:"p"},"n1"),". A different default index may be specified through the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultIndex")," property in the publisher entry. Publishing of the default index can be omitted altogether by specifying ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultIndex"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface EngineEventsRoot {\n  n1: number;\n}\n\ninterface EngineEvents {\n  [n1: `n1_${number}`]: number;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private readonly bus = new EventBus();\n\n  // The second type parameter on SimVarPublisher lets it know it should accept entries with topics defined in the\n  // EngineEventsRoot interface in addition to the ones defined in EngineEvents interface. This is needed because the\n  // unsuffixed 'n1' topic is not actually published and so doesn't appear in the EngineEvents interface.\n  private readonly airspeedPublisher = new SimVarPublisher<EngineEvents, EngineEventsRoot>(new Map([\n    ['n1', { name: 'TURB ENG N1:#index#', type: 'percent', indexed: true, defaultIndex: null }]\n  ]), this.bus);\n\n  // ...\n}\n")),(0,i.kt)("p",null,"If you want only certain indexes of a SimVar to be published, pass an iterable of indexes to the entry's ",(0,i.kt)("inlineCode",{parentName:"p"},"indexed")," property instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface EngineEventsRoot {\n  n1: number;\n}\n\ninterface EngineEvents {\n  n1_1: number;\n  n1_2: number;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private readonly bus = new EventBus();\n\n  private readonly airspeedPublisher = new SimVarPublisher<EngineEvents, EngineEventsRoot>(new Map([\n    // Only publish SimVar for engines 1 and 2.\n    ['n1', { name: 'TURB ENG N1:#index#', type: 'percent', indexed: [1, 2], defaultIndex: null }]\n  ]), this.bus);\n\n  // ...\n}\n")),(0,i.kt)("h2",{id:"more-information"},"More Information"),(0,i.kt)("p",null,"For more information about the various SimVars available in MSFS as well as a full list and description of each A var, please see the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.flightsimulator.com/html/index.htm#t=Programming_Tools%2FSimVars%2FSimulation_Variables.htm"},"MSFS SDK Documentation"),"."))}d.isMDXComponent=!0}}]);