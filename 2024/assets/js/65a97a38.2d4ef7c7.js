"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["890159"],{157353:function(e,t,r){r.r(t),r.d(t,{metadata:()=>s,contentTitle:()=>c,default:()=>h,assets:()=>o,toc:()=>d,frontMatter:()=>a});var s=JSON.parse('{"id":"framework-systems/checklist/parsing-checklists-from-dom","title":"Parsing Checklists from DOM","description":"Introduction","source":"@site/docs/framework-systems/checklist/parsing-checklists-from-dom.md","sourceDirName":"framework-systems/checklist","slug":"/framework-systems/checklist/parsing-checklists-from-dom","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/parsing-checklists-from-dom","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Parsing Checklists from DOM","sidebar_position":2},"sidebar":"sidebar","previous":{"title":"Checklist API","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/checklist-api"},"next":{"title":"Extending the Checklist API","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/extending-the-checklist-api"}}'),n=r("785893"),i=r("250065");let a={sidebar_label:"Parsing Checklists from DOM",sidebar_position:2},c="Parsing Checklists from DOM",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"<code>ChecklistDOMParser</code>",id:"checklistdomparser",level:2},{value:"DOM Syntax",id:"dom-syntax",level:2},{value:"The Set Tag",id:"the-set-tag",level:3},{value:"Groups",id:"groups",level:3},{value:"Lists",id:"lists",level:3},{value:"Branch",id:"branch",level:3},{value:"Items",id:"items",level:3},{value:"Actionable Items",id:"actionable-items",level:4},{value:"Branch Items",id:"branch-items",level:4},{value:"Link Items",id:"link-items",level:4},{value:"Note Items",id:"note-items",level:4},{value:"Title Items",id:"title-items",level:4},{value:"Spacer Items",id:"spacer-items",level:4},{value:"XML Text Formatting",id:"xml-text-formatting",level:4}];function l(e){let t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"parsing-checklists-from-dom",children:"Parsing Checklists from DOM"})}),"\n",(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/checklist-api",children:"Checklist API"})," offers a way to parse ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/checklist-api#checklist-definitions",children:"checklist definitions"})," from DOM (document object model) objects. While any object that conforms to the DOM specification can be parsed, the typical use case is parsing definitions from XML. Therefore, the rest of this page is written under the assumption that the source being parsed is XML."]}),"\n",(0,n.jsx)(t.h2,{id:"checklistdomparser",children:(0,n.jsx)(t.code,{children:"ChecklistDOMParser"})}),"\n",(0,n.jsxs)(t.p,{children:["DOM parsing is performed with the ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/ChecklistDOMParser",children:(0,n.jsx)(t.code,{children:"ChecklistDOMParser"})})," class."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import { ChecklistDOMParser } from '@microsoft/msfs-sdk';\r\n\r\nconst parser = new ChecklistDOMParser();\r\n\r\n// Parses a checklist set definition from the DOM element setElement.\r\nconst checklistSetDef = parser.parse(setElement);\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"ChecklistDOMParser"})," parses checklist item definitions that conform to the default item type to item definition mapping defined by ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistItemTypeDefMap",children:(0,n.jsx)(t.code,{children:"ChecklistItemTypeDefMap"})}),". To parse item definitions that conform to a different mapping, a subclass that extends ",(0,n.jsx)(t.code,{children:"ChecklistDOMParser"})," should be created and used instead. For more information on extending ",(0,n.jsx)(t.code,{children:"ChecklistDOMParser"}),", please refer to ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/extending-the-checklist-api#extending-checklistdomparser",children:"this page"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Options defined by ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistDOMParserParseOptions",children:(0,n.jsx)(t.code,{children:"ChecklistDOMParserParseOptions"})})," can be passed to ",(0,n.jsx)(t.code,{children:"parse()"})," to customize the parsing logic."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"// Tell the parser to drop list definitions that don't have any items\r\n// and to drop group definitions that don't have any lists.\r\nconst checklistSetDef = parser.parse(setElement, {\r\n  discardEmptyLists: true,\r\n  discardEmptyGroups: true\r\n});\r\n\r\n// Tell the parser to throw an error when a syntax error is encountered.\r\ntry {\r\n  const checklistSetDef = parser.parse(setElement, {\r\n    errorInsteadOfDiscard: true\r\n  });\r\n} catch (e) {\r\n  console.error(e);\r\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["Finally, the parser can be directed to parse checklist set, group, list, and branch metadata by defining the appropriate metadata parsing functions in ",(0,n.jsx)(t.code,{children:"ChecklistDOMParserParseOptions"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"// Tell the parser to parse metadata for lists that include the shortName property.\r\nconst checklistSetDef = parser.parse(setElement, {\r\n  parseListMetadata: (element, parsed, onError) => {\r\n    const shortName = element.getAttribute('short-name');\r\n\r\n    if (!shortName) {\r\n      onError(`List ${parsed.name} is missing a short name`);\r\n    }\r\n\r\n    return { shortName };\r\n  }\r\n});\r\n\r\nconst firstListShortName = checklistSetDef.groups[0].lists[0].metadata.shortName;\n"})}),"\n",(0,n.jsx)(t.h2,{id:"dom-syntax",children:"DOM Syntax"}),"\n",(0,n.jsx)(t.h3,{id:"the-set-tag",children:"The Set Tag"}),"\n",(0,n.jsx)(t.p,{children:"The definition for a single checklist set is parsed from a single tag. The tag can have any name that isn't already taken by one of the tags described in the following sub-sections. All other tags used for defining groups, lists, and items in a set are descendants of the set tag."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:"<Set>\r\n\r\n  \x3c!-- All other tags go in here. --\x3e\r\n\r\n</Set>\n"})}),"\n",(0,n.jsx)(t.p,{children:"Set tags can be placed anywhere in the DOM tree, including the root of the tree. When parsing the DOM, query selectors should be used to fetch the desired set tag(s) from the DOM:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"// Fetches and parses the element with the ID 'MySet'.\r\nparser.parse(document.querySelector('#MySet'));\r\n\r\n// Fetches and parses all <Set> tags in the document.\r\nfor (const element of document.querySelectorAll('Set')) {\r\n  parser.parse(element);\r\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"groups",children:"Groups"}),"\n",(0,n.jsxs)(t.p,{children:["Groups are defined with ",(0,n.jsx)(t.code,{children:"<Group>"})," tags placed directly under a set tag:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Set>\r\n\r\n  <Group name="Normal Procedures">\r\n  </Group>\r\n\r\n  <Group name="Abnormal Procedures">\r\n  </Group>\r\n\r\n  <Group name="Emergency Procedures">\r\n  </Group>\r\n\r\n</Set>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The order of the ",(0,n.jsx)(t.code,{children:"<Group>"})," tags determines the order in which their definitions appear in the set's group array."]}),"\n",(0,n.jsx)(t.h3,{id:"lists",children:"Lists"}),"\n",(0,n.jsxs)(t.p,{children:["Lists are defined with ",(0,n.jsx)(t.code,{children:"<List>"})," tags placed directly under the ",(0,n.jsx)(t.code,{children:"<Group>"})," tags of their parent groups:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Checklist>\r\n  <Group name="Normal Procedures">\r\n\r\n    <List name="Before Engine Start">\r\n    </List>\r\n\r\n    <List name="Engine Start">\r\n    </List>\r\n\r\n    <List uid="before-taxi" name="Before Taxi">\r\n    </List>\r\n\r\n  </Group>\r\n</Checklist>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The order of the ",(0,n.jsx)(t.code,{children:"<List>"})," tags determines the order in which their definitions appear in their parent group's list array."]}),"\n",(0,n.jsx)(t.h3,{id:"branch",children:"Branch"}),"\n",(0,n.jsxs)(t.p,{children:["Branches are defined with ",(0,n.jsx)(t.code,{children:"<Branch>"})," tags placed directly under the ",(0,n.jsx)(t.code,{children:"<List>"})," tags of their parent lists:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Checklist>\r\n  <Group name="Normal Procedures">\r\n\r\n    <List name="Engine Start">\r\n\r\n      <Branch uid="engine-start-branch-normal" name="Normal Conditions">\r\n      </Branch>\r\n\r\n      <Branch uid="engine-start-branch-cold" name="Cold Weather Conditions">\r\n      </Branch>\r\n\r\n    </List>\r\n\r\n  </Group>\r\n</Checklist>\n'})}),"\n",(0,n.jsx)(t.h3,{id:"items",children:"Items"}),"\n",(0,n.jsxs)(t.p,{children:["Items are defined with ",(0,n.jsx)(t.code,{children:"<Item>"})," tags placed directly under the ",(0,n.jsx)(t.code,{children:"<List>"})," tags of their parent lists if they are members of the base list or under the ",(0,n.jsx)(t.code,{children:"<Branch>"})," tags of their parent branches if they are members of a branch. The order of the ",(0,n.jsx)(t.code,{children:"<Item>"})," tags within their parent tag determines the order of the corresponding items in the list or branch."]}),"\n",(0,n.jsxs)(t.p,{children:["The following sections describe the syntax used to define the item definitions used in the ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistItemTypeDefMap",children:(0,n.jsx)(t.code,{children:"ChecklistItemTypeDefMap"})})," mapping. These are the item definitions that ",(0,n.jsx)(t.code,{children:"ChecklistDOMParser"})," parses by default."]}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["Subclasses of ",(0,n.jsx)(t.code,{children:"ChecklistDOMParser"})," can choose to ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/extending-the-checklist-api#extending-checklistdomparser",children:"override"})," the default parsing behavior and parse item definitions that differ from the default ones. In doing so, these subclasses may require a different DOM syntax for item definitions."]})}),"\n",(0,n.jsx)(t.h4,{id:"actionable-items",children:"Actionable Items"}),"\n",(0,n.jsxs)(t.p,{children:["To define an actionable item, use an ",(0,n.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,n.jsx)(t.code,{children:"type"})," attribute of ",(0,n.jsx)(t.code,{children:"actionable"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Item type="actionable">\r\n  <LabelText>\r\n    1. Preflight Inspection\r\n  </LabelText>\r\n  <ActionText>\r\n    Completed\r\n  </ActionText>\r\n</Item>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"<LabelText>"})," child tag is required and defines the text that describes the item's topic. The ",(0,n.jsx)(t.code,{children:"<ActionText>"})," child tag is optional and defines the text that describes the action to be taken for the item."]}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsx)(t.p,{children:"The presence or absence of action text does not affect whether an actionable item is completable. All actionable items are completable."})}),"\n",(0,n.jsx)(t.h4,{id:"branch-items",children:"Branch Items"}),"\n",(0,n.jsxs)(t.p,{children:["To define a branch item, use an ",(0,n.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,n.jsx)(t.code,{children:"type"})," attribute of ",(0,n.jsx)(t.code,{children:"branch"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Item type="branch">\r\n  <Branch logic="sufficient">engine-start-branch-normal</Branch>\r\n  <Branch logic="sufficient">engine-start-branch-cold</Branch>\r\n  <Text>\r\n    Weather Conditions\r\n  </Text>\r\n</Item>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Each ",(0,n.jsx)(t.code,{children:"<Branch>"})," child tag defines a single linked branch (the text content of the tag is the branch's unique ID) and the logic to apply to the linked branch's completion state when determining the completion state of the branch item. The ",(0,n.jsx)(t.code,{children:"logic"})," attribute can be either ",(0,n.jsx)(t.code,{children:"none"})," (the default if the attribute is omitted), ",(0,n.jsx)(t.code,{children:"sufficient"}),", or ",(0,n.jsx)(t.code,{children:"necessary"}),". See ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/checklist-api#checklist-items",children:"this page"})," for a description of how each logic type behaves."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"<Text>"})," child tag is required and defines the item's text."]}),"\n",(0,n.jsx)(t.h4,{id:"link-items",children:"Link Items"}),"\n",(0,n.jsxs)(t.p,{children:["To define a link item, use an ",(0,n.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,n.jsx)(t.code,{children:"type"})," attribute of ",(0,n.jsx)(t.code,{children:"link"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Item type="link">\r\n  <Target>before-taxi</Target>\r\n  <Text>\r\n    Go to Before Taxi checklist.\r\n  </Text>\r\n</Item>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"<Target>"})," child tag is required and defines the unique ID of the link's target list or branch."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"<Text>"})," child tag is optional and defines the item's text."]}),"\n",(0,n.jsx)(t.h4,{id:"note-items",children:"Note Items"}),"\n",(0,n.jsxs)(t.p,{children:["To define a note item, use an ",(0,n.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,n.jsx)(t.code,{children:"type"})," attribute of ",(0,n.jsx)(t.code,{children:"note"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Item type="note">\r\n  <Text>\r\n    Following engine start, a warm engine should run at idle thrust for at least 2 minutes prior to takeoff.\r\n  </Text>\r\n</Item>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"<Text>"})," child tag is required and defines the item's text."]}),"\n",(0,n.jsx)(t.h4,{id:"title-items",children:"Title Items"}),"\n",(0,n.jsxs)(t.p,{children:["To define a title item, use an ",(0,n.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,n.jsx)(t.code,{children:"type"})," attribute of ",(0,n.jsx)(t.code,{children:"title"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Item type="title">\r\n  <Text>\r\n    Descent\r\n  </Text>\r\n</Item>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"<Text>"})," child tag is required and defines the item's text."]}),"\n",(0,n.jsx)(t.h4,{id:"spacer-items",children:"Spacer Items"}),"\n",(0,n.jsxs)(t.p,{children:["To define a spacer item, use an ",(0,n.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,n.jsx)(t.code,{children:"type"})," attribute of ",(0,n.jsx)(t.code,{children:"spacer"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Item type="spacer" />\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You can also optionally specify a height for the spacer using the ",(0,n.jsx)(t.code,{children:"height"})," attribute:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Item type="spacer" height="1" />\n'})}),"\n",(0,n.jsx)(t.h4,{id:"xml-text-formatting",children:"XML Text Formatting"}),"\n",(0,n.jsxs)(t.admonition,{type:"info",children:[(0,n.jsx)(t.p,{children:"When using XML, all standard XML text formatting conventions must be respected. In particular, this means that certain characters must always be escaped when they appear in the text content for a tag:"}),(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"<"})," (less than): escaped with ",(0,n.jsx)(t.code,{children:"&lt;"})]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"&"})," (ampersand): escaped with ",(0,n.jsx)(t.code,{children:"&amp;"})]}),"\n"]})]}),"\n",(0,n.jsxs)(t.p,{children:["Text parsed from the various text tags in XML preserves all whitespace characters (including newline characters) ",(0,n.jsx)(t.strong,{children:"except"})," leading and trailing whitespace, which are entirely removed. Enclosing the text in quotes (either single or double) causes the text within the quotes to be parsed as a JSON-formatted string (after any XML-escaped characters are resolved)."]}),"\n",(0,n.jsx)(t.p,{children:"To preserve leading and/or trailing whitespace in a text tag, use a JSON-formatted string:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Text>\r\n  "  The spaces before and after this sentence will be preserved.  "\r\n</Text>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["To insert a forced line break, use a JSON-formatted string with an escaped newline character (",(0,n.jsx)(t.code,{children:"\\n"}),"):"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-xml",children:'<Text>\r\n  "This text will have a line break...\\nafter the ellipsis."\r\n</Text>\n'})})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},250065:function(e,t,r){r.d(t,{Z:function(){return c},a:function(){return a}});var s=r(667294);let n={},i=s.createContext(n);function a(e){let t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);