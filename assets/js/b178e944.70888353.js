"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[36999],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var _=i.createContext({}),p=function(e){var t=i.useContext(_),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(_.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,_=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=p(n),u=o,h=s["".concat(_,".").concat(u)]||s[u]||m[u]||a;return n?i.createElement(h,r(r({ref:t},d),{},{components:n})):i.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=u;var l={};for(var _ in t)hasOwnProperty.call(t,_)&&(l[_]=t[_]);l.originalType=e,l[s]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<a;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},33611:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>_,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(87462),o=(n(67294),n(3905));const a={sidebar_label:"Model Behaviors",sidebar_position:3,toc_max_heading_level:2},r="G3X Touch Model Behaviors",l={unversionedId:"g3xtouch/model-behaviors",id:"g3xtouch/model-behaviors",title:"G3X Touch Model Behaviors",description:"Introduction",source:"@site/docs/g3xtouch/model-behaviors.md",sourceDirName:"g3xtouch",slug:"/g3xtouch/model-behaviors",permalink:"/msfs-avionics-mirror/docs/g3xtouch/model-behaviors",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Model Behaviors",sidebar_position:3,toc_max_heading_level:2},sidebar:"sidebar",previous:{title:"Instrument Setup",permalink:"/msfs-avionics-mirror/docs/g3xtouch/instrument-setup"},next:{title:"panel.xml Basics",permalink:"/msfs-avionics-mirror/docs/g3xtouch/panel-xml-basics"}},_={},p=[{value:"Introduction",id:"introduction",level:2},{value:"GDUs",id:"gdus",level:2},{value:"<code>ID</code>",id:"id",level:3},{value:"<code>NODE_ID_SCREEN</code>",id:"node_id_screen",level:3},{value:"<code>NODE_ID_LEFT_OUTER_KNOB</code>",id:"node_id_left_outer_knob",level:3},{value:"<code>NODE_ID_LEFT_INNER_KNOB</code>",id:"node_id_left_inner_knob",level:3},{value:"<code>ANIM_NAME_LEFT_OUTER_KNOB</code>",id:"anim_name_left_outer_knob",level:3},{value:"<code>ANIM_NAME_LEFT_INNER_KNOB</code>",id:"anim_name_left_inner_knob",level:3},{value:"<code>ANIM_NAME_LEFT_INNER_PUSH</code>",id:"anim_name_left_inner_push",level:3},{value:"<code>NODE_ID_RIGHT_OUTER_KNOB</code>",id:"node_id_right_outer_knob",level:3},{value:"<code>NODE_ID_RIGHT_INNER_KNOB</code>",id:"node_id_right_inner_knob",level:3},{value:"<code>ANIM_NAME_RIGHT_OUTER_KNOB</code>",id:"anim_name_right_outer_knob",level:3},{value:"<code>ANIM_NAME_RIGHT_INNER_KNOB</code>",id:"anim_name_right_inner_knob",level:3},{value:"<code>ANIM_NAME_RIGHT_INNER_PUSH</code>",id:"anim_name_right_inner_push",level:3},{value:"<code>SCREEN_EMISSIVE_VAR_CODE</code>",id:"screen_emissive_var_code",level:3},{value:"<code>EMISSIVE_MIN</code>",id:"emissive_min",level:3},{value:"<code>EMISSIVE_MAX</code>",id:"emissive_max",level:3},{value:"<code>EMISSIVE_GAMMA</code>",id:"emissive_gamma",level:3},{value:"<code>SCREEN_EMISSIVE_CODE</code>",id:"screen_emissive_code",level:3},{value:"<code>BUTTON_EMISSIVE_MIN</code>",id:"button_emissive_min",level:3},{value:"<code>BUTTON_EMISSIVE_MAX</code>",id:"button_emissive_max",level:3},{value:"<code>BUTTON_EMISSIVE_GAMMA</code>",id:"button_emissive_gamma",level:3},{value:"<code>BUTTON_EMISSIVE_CODE</code>",id:"button_emissive_code",level:3},{value:"<code>CIRCUIT_ID</code>",id:"circuit_id",level:3},{value:"<code>FAILURE</code>",id:"failure",level:3}],d={toc:p},s="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(s,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"g3x-touch-model-behaviors"},"G3X Touch Model Behaviors"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This page contains topics related to setting up ",(0,o.kt)("a",{parentName:"p",href:"https://docs.flightsimulator.com/html/Content_Configuration/Models/ModelBehaviors/Model_Behaviors.htm"},"Model Behaviors")," for an airplane that includes the G3X Touch."),(0,o.kt)("p",null,"The base G3X Touch package includes Model Behaviors templates meant to be used when integrating the G3X Touch into an airplane. These templates can be included using the following tag within a Model Behaviors xml file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<Include ModelBehaviorFile="WT\\G3XTouch\\G3XTouch.xml"/>\n')),(0,o.kt)("h2",{id:"gdus"},"GDUs"),(0,o.kt)("p",null,"The base G3X Touch package includes a Model Behaviors template for implementing G3X Touch GDUs named ",(0,o.kt)("inlineCode",{parentName:"p"},"WT_G3XTouch_Template"),". When integrating the new G3X Touch, ",(0,o.kt)("inlineCode",{parentName:"p"},"WT_G3XTouch_Template")," should be used instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"ASOBO_AS3X_Touch_Template"),", which is meant to be used with the legacy G3X Touch."),(0,o.kt)("p",null,"One instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"WT_G3XTouch_Template")," needs to be declared for each G3X Touch GDU. The template sets up cockpit interaction behaviors and tooltips for all of the GDU's physical buttons and knobs and controls the emissive properties of the GDU's screen and buttons."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WT_G3XTouch_Template")," accepts the following parameters:"),(0,o.kt)("h3",{id:"id"},(0,o.kt)("inlineCode",{parentName:"h3"},"ID")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"\\\nThe index of the GDU."),(0,o.kt)("h3",{id:"node_id_screen"},(0,o.kt)("inlineCode",{parentName:"h3"},"NODE_ID_SCREEN")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Screen_#ID#"),"\\\nThe Node ID of the GDU's screen texture."),(0,o.kt)("h3",{id:"node_id_left_outer_knob"},(0,o.kt)("inlineCode",{parentName:"h3"},"NODE_ID_LEFT_OUTER_KNOB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Outer_L_#ID#"),"\\\nThe Node ID of the left outer knob."),(0,o.kt)("h3",{id:"node_id_left_inner_knob"},(0,o.kt)("inlineCode",{parentName:"h3"},"NODE_ID_LEFT_INNER_KNOB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Inner_L_#ID#"),"\\\nThe Node ID of the left inner knob."),(0,o.kt)("h3",{id:"anim_name_left_outer_knob"},(0,o.kt)("inlineCode",{parentName:"h3"},"ANIM_NAME_LEFT_OUTER_KNOB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Outer_L_#ID#"),"\\\nThe name of the left outer knob's rotate animation."),(0,o.kt)("h3",{id:"anim_name_left_inner_knob"},(0,o.kt)("inlineCode",{parentName:"h3"},"ANIM_NAME_LEFT_INNER_KNOB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Inner_L_#ID#"),"\\\nThe name of the left inner knob's rotate animation."),(0,o.kt)("h3",{id:"anim_name_left_inner_push"},(0,o.kt)("inlineCode",{parentName:"h3"},"ANIM_NAME_LEFT_INNER_PUSH")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Inner_L_Push_#ID#"),"\\\nThe name of the left inner knob's push animation."),(0,o.kt)("h3",{id:"node_id_right_outer_knob"},(0,o.kt)("inlineCode",{parentName:"h3"},"NODE_ID_RIGHT_OUTER_KNOB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Outer_R_#ID#"),"\\\nThe Node ID of the right outer knob."),(0,o.kt)("h3",{id:"node_id_right_inner_knob"},(0,o.kt)("inlineCode",{parentName:"h3"},"NODE_ID_RIGHT_INNER_KNOB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Inner_R_#ID#"),"\\\nThe Node ID of the right inner knob."),(0,o.kt)("h3",{id:"anim_name_right_outer_knob"},(0,o.kt)("inlineCode",{parentName:"h3"},"ANIM_NAME_RIGHT_OUTER_KNOB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Outer_R_#ID#"),"\\\nThe name of the right outer knob's rotate animation."),(0,o.kt)("h3",{id:"anim_name_right_inner_knob"},(0,o.kt)("inlineCode",{parentName:"h3"},"ANIM_NAME_RIGHT_INNER_KNOB")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Inner_R_#ID#"),"\\\nThe name of the right inner knob's rotate animation."),(0,o.kt)("h3",{id:"anim_name_right_inner_push"},(0,o.kt)("inlineCode",{parentName:"h3"},"ANIM_NAME_RIGHT_INNER_PUSH")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"AS3X_Knob_Inner_R_Push_#ID#"),"\\\nThe name of the right inner knob's push animation."),(0,o.kt)("h3",{id:"screen_emissive_var_code"},(0,o.kt)("inlineCode",{parentName:"h3"},"SCREEN_EMISSIVE_VAR_CODE")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"(L:WTG3X_Screen_Backlight:#ID#)"),"\\\nRPN code to get the GDU's backlight intensity level, in the range ","[0, 1]",". May not apply if the ",(0,o.kt)("inlineCode",{parentName:"p"},"SCREEN_EMISSIVE_CODE")," parameter is overridden."),(0,o.kt)("h3",{id:"emissive_min"},(0,o.kt)("inlineCode",{parentName:"h3"},"EMISSIVE_MIN")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"0.05"),"\\\nRPN code to get the minimum emissive value to apply to the GDU's screen emissive texture (i.e. when the backlight intensity level is 0). May not apply if the ",(0,o.kt)("inlineCode",{parentName:"p"},"SCREEN_EMISSIVE_CODE")," parameter is overridden."),(0,o.kt)("h3",{id:"emissive_max"},(0,o.kt)("inlineCode",{parentName:"h3"},"EMISSIVE_MAX")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"\\\nRPN code to get the maximum emissive value to apply to the GDU's screen emissive texture (i.e. when the backlight intensity level is 1). May not apply if the ",(0,o.kt)("inlineCode",{parentName:"p"},"SCREEN_EMISSIVE_CODE")," parameter is overridden."),(0,o.kt)("h3",{id:"emissive_gamma"},(0,o.kt)("inlineCode",{parentName:"h3"},"EMISSIVE_GAMMA")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"2.2"),"\\\nRPN code to get the gamma value to apply to the GDU's screen emissive curve. May not apply if the ",(0,o.kt)("inlineCode",{parentName:"p"},"SCREEN_EMISSIVE_CODE")," parameter is overridden."),(0,o.kt)("h3",{id:"screen_emissive_code"},(0,o.kt)("inlineCode",{parentName:"h3"},"SCREEN_EMISSIVE_CODE")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"#EMISSIVE_MIN# #SCREEN_EMISSIVE_VAR_CODE# #EMISSIVE_GAMMA# pow #EMISSIVE_MAX# #EMISSIVE_MIN# - * +"),"\\\nRPN code to get the emissive value to apply to the GDU's screen emissive texture."),(0,o.kt)("h3",{id:"button_emissive_min"},(0,o.kt)("inlineCode",{parentName:"h3"},"BUTTON_EMISSIVE_MIN")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"0.05"),"\\\nRPN code to get the minimum emissive value to apply to the GDU's button emissive textures (i.e. when the backlight intensity level is 0). May not apply if the ",(0,o.kt)("inlineCode",{parentName:"p"},"BUTTON_EMISSIVE_CODE")," parameter is overridden."),(0,o.kt)("h3",{id:"button_emissive_max"},(0,o.kt)("inlineCode",{parentName:"h3"},"BUTTON_EMISSIVE_MAX")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),"\\\nRPN code to get the maximum emissive value to apply to the GDU's button emissive textures (i.e. when the backlight intensity level is 1). May not apply if the ",(0,o.kt)("inlineCode",{parentName:"p"},"BUTTON_EMISSIVE_CODE")," parameter is overridden."),(0,o.kt)("h3",{id:"button_emissive_gamma"},(0,o.kt)("inlineCode",{parentName:"h3"},"BUTTON_EMISSIVE_GAMMA")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"2.2"),"\\\nRPN code to get the gamma value to apply to the GDU's button emissive curve. May not apply if the ",(0,o.kt)("inlineCode",{parentName:"p"},"BUTTON_EMISSIVE_CODE")," parameter is overridden."),(0,o.kt)("h3",{id:"button_emissive_code"},(0,o.kt)("inlineCode",{parentName:"h3"},"BUTTON_EMISSIVE_CODE")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"#BUTTON_EMISSIVE_MIN# #SCREEN_EMISSIVE_VAR_CODE# #BUTTON_EMISSIVE_GAMMA# pow #BUTTON_EMISSIVE_MAX# #BUTTON_EMISSIVE_MIN# - * +"),"\\\nRPN code to get the emissive value to apply to the GDU's button emissive textures."),(0,o.kt)("h3",{id:"circuit_id"},(0,o.kt)("inlineCode",{parentName:"h3"},"CIRCUIT_ID")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": None\\\nThe index of the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.flightsimulator.com/html/Content_Configuration/SimObjects/Aircraft_SimO/system/electrical.htm"},"electrical circuit")," that powers the GDU. If defined, then the GDU's screen and button emissives will be forced off when the circuit is not powered. May not apply if the ",(0,o.kt)("inlineCode",{parentName:"p"},"FAILURE")," parameter is overridden."),(0,o.kt)("h3",{id:"failure"},(0,o.kt)("inlineCode",{parentName:"h3"},"FAILURE")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Default"),": None\\\nRPN code to get whether the GDU's screen and button emissives should be forced off. A value of ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," forces the emissives off. If neither this nor ",(0,o.kt)("inlineCode",{parentName:"p"},"CIRCUIT_ID")," are defined, then emissive failure behavior is determined by the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.flightsimulator.com/html/Content_Configuration/Models/ModelBehaviors/TemplateExplorer/Asobo/Generic/Emissive.html#ASOBO_GT_Emissive_Gauge"},(0,o.kt)("inlineCode",{parentName:"a"},"ASOBO_GT_Emissive_Gauge"))," template."))}m.isMDXComponent=!0}}]);