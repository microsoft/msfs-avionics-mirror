"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["309798"],{436526:function(e,n,r){r.r(n),r.d(n,{metadata:()=>s,contentTitle:()=>a,default:()=>h,assets:()=>o,toc:()=>l,frontMatter:()=>i});var s=JSON.parse('{"id":"framework-systems/fmc/setting-up-an-fmc-screen","title":"Setting up an FMC Screen","description":"We will now see how we can configure a simple FMC screen, to a point where it is rendering and can have pages added to it.","source":"@site/docs/framework-systems/fmc/setting-up-an-fmc-screen.md","sourceDirName":"framework-systems/fmc","slug":"/framework-systems/fmc/setting-up-an-fmc-screen","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/fmc/setting-up-an-fmc-screen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Setting up an FMC Screen","sidebar_position":3},"sidebar":"sidebar","previous":{"title":"Pages, Components and Templates","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/fmc/pages-components-templates"},"next":{"title":"Creating Your First Page","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/fmc/creating-your-first-page"}}'),t=r("785893"),c=r("250065");let i={sidebar_label:"Setting up an FMC Screen",sidebar_position:3},a="Setting up an FMC Screen",o={},l=[{value:"Creating an FMC Screen Class",id:"creating-an-fmc-screen-class",level:2},{value:"Defining an event type",id:"defining-an-event-type",level:3},{value:"Creating a page class",id:"creating-a-page-class",level:3},{value:"Creating a page factory",id:"creating-a-page-factory",level:3},{value:"Creating the actual FMC screen class",id:"creating-the-actual-fmc-screen-class",level:3},{value:"Configuring the FMC Screen",id:"configuring-the-fmc-screen",level:2},{value:"Creating a Stylesheet",id:"creating-a-stylesheet",level:2},{value:"Instantiating and Rendering the FMC Screen",id:"instantiating-and-rendering-the-fmc-screen",level:2},{value:"Setting up events",id:"setting-up-events",level:3}];function d(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"setting-up-an-fmc-screen",children:"Setting up an FMC Screen"})}),"\n",(0,t.jsx)(n.p,{children:"We will now see how we can configure a simple FMC screen, to a point where it is rendering and can have pages added to it."}),"\n",(0,t.jsx)(n.h2,{id:"creating-an-fmc-screen-class",children:"Creating an FMC Screen Class"}),"\n",(0,t.jsxs)(n.p,{children:["An FMC screen for a specific CDU starts with creating a class extending ",(0,t.jsx)(n.code,{children:"FmcScreen"}),". This class has two type parameters; the first one\r\nindicates which class the pages on this screen will extend, and the second one defines which events can be sent to the screen."]}),"\n",(0,t.jsx)(n.p,{children:"You will first need to create those two types."}),"\n",(0,t.jsx)(n.h3,{id:"defining-an-event-type",children:"Defining an event type"}),"\n",(0,t.jsx)(n.p,{children:"The event type on the FMC screen is used to register certain events as performing specific actions on the FMC screen. Examples of events\r\nthat are commonly found include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Line select keys (LSKs);"}),"\n",(0,t.jsx)(n.li,{children:"Scrolling keys (left/previous, right/next, up, down);"}),"\n",(0,t.jsx)(n.li,{children:"Page/mode keys (FPLN, LEGS, PERF, INDEX etc.);"}),"\n",(0,t.jsxs)(n.li,{children:["Scratchpad keys (alphanumeric keys, ",(0,t.jsx)(n.code,{children:"+/-"}),", ",(0,t.jsx)(n.code,{children:"/"}),", ",(0,t.jsx)(n.code,{children:"."}),", etc.)."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["You can create an event type with a plain TypeScript ",(0,t.jsx)(n.code,{children:"interface"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'interface MyFmcEvents {\r\n  // Each line select key must be a distinct event\r\n  lsk_1_l: void;\r\n\r\n  lsk_1_r: void;\r\n\r\n  prev_page: void;\r\n\r\n  next_page: void;\r\n\r\n  // It is recommended to use a singular event for text being input into the scratchpad, to avoid having to create 36 separate events\r\n  // for all alphanumeric values\r\n  scratchpad_type: string;\r\n\r\n  // "Special" keys should however have their own events\r\n  scratchpad_plus_mins: void;\r\n\r\n  example_page: void;\r\n\r\n  example_page_2: void;\r\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["As some events are ",(0,t.jsx)(n.em,{children:"nullary"})," (meaning they take no arguments), we can use ",(0,t.jsx)(n.code,{children:"void"})," to not have to specify a value to pass into the event.\r\nWhen firing those events, use ",(0,t.jsx)(n.code,{children:"undefined"})," as the payload value."]})}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-page-class",children:"Creating a page class"}),"\n",(0,t.jsx)(n.p,{children:"Pages for a specific FMC screen must all extend the same base class, which can contain functionality specific to this CDU."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"/**\r\n * A test FMC page class\r\n */\r\nexport class MyFmcPage extends AbstractFmcPage {\r\n  /**\r\n   * Ctor\r\n   * @param bus the event bus\r\n   * @param screen the FMC screen\r\n   * @param renderCallback the FMC render callback\r\n   */\r\n  constructor(\r\n    bus: EventBus,\r\n    screen: FmcScreen<MyFmcPage, MyFmcEvents>, // This can be replaced with your avionics-specific FMC screen class later on\r\n    public readonly renderCallback: FmcRenderCallback\r\n  ) {\r\n    super(bus, screen);\r\n  }\r\n\r\n  /** @inheritDoc */\r\n  render(): FmcRenderTemplate[] {\r\n    return [];\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-page-factory",children:"Creating a page factory"}),"\n",(0,t.jsx)(n.p,{children:"Since the FMC screen creates pages automatically, a page factory is necessary."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export class MyFmcPageFactory extends FmcPageFactory<MyFmcPage> {\r\n  createPage(\r\n    pageCtor: typeof MyFmcPage,\r\n    bus: EventBus,\r\n    screen: FmcScreen<MyFmcPage, any>,\r\n    renderCallback: FmcRenderCallback\r\n  ): MyFmcPage {\r\n    return new pageCtor(bus, screen, renderCallback);\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsxs)(n.p,{children:["If your page class requires more constructor arguments (a common pattern is passing in an FMS or flight planner instance), add those as constructor properties\r\nto your ",(0,t.jsx)(n.code,{children:"MyFmcPageFactory"})," class:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export class MyFmcPageFactory extends FmcPageFactory<MyFmcPage> {\r\n  constructor(private readonly fms: MyFms) {\r\n    super();\r\n  }\r\n\r\n  /* ... */\r\n}\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"creating-the-actual-fmc-screen-class",children:"Creating the actual FMC screen class"}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.a,{href:"#creating-a-page-class",children:(0,t.jsx)(n.code,{children:"MyFmcPage"})}),", ",(0,t.jsx)(n.a,{href:"#defining-an-event-type",children:(0,t.jsx)(n.code,{children:"MyFmcEvents"})})," and ",(0,t.jsx)(n.a,{href:"#creating-a-page-factory",children:(0,t.jsx)(n.code,{children:"MyFmcPageFactory"})}),",\r\nwe can create our class extending ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FmcScreen",children:(0,t.jsx)(n.code,{children:"FmcScreen"})}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const MY_CDU_CELL_WIDTH = 24;\r\nconst MY_CDU_CELL_HEIGHT = 14;\r\n\r\nexport class MyFmcScreen extends FmcScreen<MyFmcPage, MyFmcEvents> {\r\n  constructor(bus: EventBus, renderTarget: HTMLDivElement) {\r\n    super(\r\n      bus,\r\n      new MyFmcPageFactory(),\r\n      { screenDimensions: { cellWidth: MY_CDU_CELL_WIDTH, cellHeight: MY_CDU_CELL_HEIGHT }, enableScratchpad: false },\r\n      new SimpleFmcRenderer(bus, renderTarget, {\r\n        screenCellWidth: MY_CDU_CELL_WIDTH,\r\n        screenCellHeight: MY_CDU_CELL_HEIGHT,\r\n        screenPXWidth: 800,\r\n        screenPXHeight: 600,\r\n      }),\r\n      new FmcScratchpad(bus, { cellWidth: UNS_CDU_CELL_WIDTH }, () => {})\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configuring-the-fmc-screen",children:"Configuring the FMC Screen"}),"\n",(0,t.jsxs)(n.p,{children:["When creating the ",(0,t.jsx)(n.code,{children:"FmcScreen"})," class, you will need to pass a partial ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/FmcScreenOptions",children:(0,t.jsx)(n.code,{children:"FmcScreenOptions"})})," interface which provides multiple options regarding screen size, etc."]}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, you may wish to override some of the default behaviours of the ",(0,t.jsx)(n.code,{children:"FmcScreen"})," class, such as to display an overlay. If you wish to override the default page output, such as for displaying an overlay, you can do so by modifying the rendered output in the ",(0,t.jsx)(n.code,{children:"acceptPageOutput"})," function of ",(0,t.jsx)(n.code,{children:"MyFmcScreen"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-stylesheet",children:"Creating a Stylesheet"}),"\n",(0,t.jsxs)(n.p,{children:["The FMC framework uses simple CSS for styling, allowing developers to simply include and import a css stylesheet.\r\nFor more information regarding styling, see ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/fmc/styling",children:(0,t.jsx)(n.code,{children:"styling"})})]}),"\n",(0,t.jsx)(n.h2,{id:"instantiating-and-rendering-the-fmc-screen",children:"Instantiating and Rendering the FMC Screen"}),"\n",(0,t.jsx)(n.p,{children:"It is recommended to contain the initialization of the FMC screen into its own component where pages and events are configured:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"/**\r\n * Props for {@link MyCduDisplay}\r\n */\r\nexport interface MyCduDisplayProps extends ComponentProps {\r\n  /** The event bus */\r\n  bus: EventBus;\r\n}\r\n\r\n/**\r\n * My CDU display component\r\n */\r\nexport class MyCduDisplay extends DisplayComponent<MyCduDisplayProps> {\r\n  private readonly fmcScreenRef = FSComponent.createRef<HTMLDivElement>();\r\n\r\n  private myFmcScreen: MyFmcScreen | undefined;\r\n\r\n  /** @inheritDoc */\r\n  public override onAfterRender(node: VNode): void {\r\n    super.onAfterRender(node);\r\n\r\n    // We instantiate our FMC screen, passsing in the bus and the element we want it to render its content grid to\r\n    this.myFmcScreen = new MyFmcScreen(\r\n      this.props.bus,\r\n      this.fmcScreenRef.instance\r\n    );\r\n\r\n    this.fmcScreen && this.initialiseFmcScreen(this.fmcScreen);\r\n  }\r\n\r\n  /**\r\n   * Initialises the FMC screen\r\n   * @param fmcScreen The UnsFmcScreen instance\r\n   */\r\n  private initialiseFmcScreen(fmcScreen: MyFmcScreen): void {\r\n    // ...we configure this later\r\n  }\r\n\r\n  /** @inheritDoc */\r\n  public override render(): VNode | null {\r\n    return <div ref={this.fmcScreenRef} />;\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"setting-up-events",children:"Setting up events"}),"\n",(0,t.jsxs)(n.p,{children:["In order for our FMC screen to respond appropriately to different events, we must tell it which events correspond to\r\nwhat actions. (see ",(0,t.jsx)(n.a,{href:"#defining-an-event-type",children:"Defining an event type"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["This is done by calling a couple of utility methods on ",(0,t.jsx)(n.code,{children:"FmcScreen"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'class MyCduDisplay /* ... */ {\r\n  /* ... */\r\n  private initialiseFmcScreen(fmcScreen: MyFmcScreen): void {\r\n    // Here, we configure which events (keys of the event interface we specify as the second type parameter\r\n    // of `FmcScreen` in `MyFmcScreen` - in this case, `MyFmcEvents`) correspond to which line select keys, associating them\r\n    // with row indices and column indices (referring to the left/right automatic layout columns) they correspond to.\r\n    // Any components present at that location will receive those events.\r\n    fmcScreen.addLskEvents([\r\n      ["lsk_1_l", 2, 0],\r\n      ["lsk_1_r", 2, 1],\r\n    ]);\r\n\r\n    // We do the same for scrolling events. It is not nevessary to specify every possible scrolling event, as few CDUs have\r\n    // dedicated up/down scrolling keys.\r\n    fmcScreen.addPagingEvents({\r\n      pageLeft: "prev_page",\r\n      pageRight: "next_page",\r\n    });\r\n\r\n    // For events the FMC screen does not handle automatically, you can easily get a consumer to events, prefixed with\r\n    // the event prefix configured on the FMC screen (by default, none). The prefix is configured when you need tow distinct\r\n    // CDUs which respond to separate events. This is automatically taken care of by `addLskEvents`, `addPagingEvents` and `addPageRoute`.\r\n    //\r\n    // The prefix can be configured using the `eventPeefix` property of the `FmcScreenOptions` object we pass to the\r\n    // parent class in the `MyFmcScreen` constructor.\r\n    fmcScreen.onPrefixedEvent("scratchpad_plus_mins").handle(() => {\r\n      /* ... */\r\n    });\r\n  }\r\n  /* ... */\r\n}\n'})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["The FMC Framework does not publish events automatically, only ",(0,t.jsx)(n.em,{children:"consumes"})," them. The most common way of publishing events is\r\nvia ",(0,t.jsx)(n.a,{href:"/docs/interacting-with-msfs/receiving-h-events",children:"Receiving H Events"}),", and re-publishing\r\nthose (conforming to the created event interface) on the ",(0,t.jsx)(n.a,{href:"/docs/getting-started/using-the-event-bus",children:"event bus"}),"."]}),(0,t.jsx)(n.p,{children:"It is good practice to use H Events even if your CDU buttons are virtual. This is because users employing\r\nexternal software or hardware controls can easily emit H Events, but not EventBus events."})]})]})}function h(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return a},a:function(){return i}});var s=r(667294);let t={},c=s.createContext(t);function i(e){let n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);