"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["685134"],{847779:function(e,n,r){r.r(n),r.d(n,{metadata:()=>i,contentTitle:()=>c,default:()=>h,assets:()=>a,toc:()=>l,frontMatter:()=>d});var i=JSON.parse('{"id":"api/framework/type-aliases/APRollSteerDirectorOptions","title":"Type Alias: APRollSteerDirectorOptions","description":"APRollSteerDirectorOptions: object","source":"@site/docs/api/framework/type-aliases/APRollSteerDirectorOptions.md","sourceDirName":"api/framework/type-aliases","slug":"/api/framework/type-aliases/APRollSteerDirectorOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"APRollDirectorOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollDirectorOptions"},"next":{"title":"APRollSteerDirectorState","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorState"}}'),t=r("785893"),s=r("250065");let d={},c="Type Alias: APRollSteerDirectorOptions",a={},l=[{value:"Type declaration",id:"type-declaration",level:2},{value:"bankRate?",id:"bankrate",level:3},{value:"canActivate()?",id:"canactivate",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"canArm()?",id:"canarm",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"canRemainActive()?",id:"canremainactive",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"canRemainArmed()?",id:"canremainarmed",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"maxBankAngle?",id:"maxbankangle",level:3},{value:"onActivate()?",id:"onactivate",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"onArm()?",id:"onarm",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"onDeactivate()?",id:"ondeactivate",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in",level:2}];function o(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"type-alias-aprollsteerdirectoroptions",children:"Type Alias: APRollSteerDirectorOptions"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"APRollSteerDirectorOptions"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Options for ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/APRollSteerDirector",children:"APRollSteerDirector"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,t.jsx)(n.h3,{id:"bankrate",children:"bankRate?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"bankRate"}),": ",(0,t.jsx)(n.code,{children:"number"})," | () => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The bank rate to enforce when the director commands changes in bank angle, in degrees per second, or a function\nwhich returns it. If not undefined, a default bank rate will be used. Defaults to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"canactivate",children:"canActivate()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"canActivate"}),": (",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"state"}),") => ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that determines whether the director can activate from an armed state."}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"state"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorState",children:(0,t.jsx)(n.code,{children:"APRollSteerDirectorState"})}),">"]}),(0,t.jsx)(n.td,{children:"Data describing the state of the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.p,{children:"Whether the director can remain active once it has already been activated."}),"\n",(0,t.jsx)(n.h3,{id:"canarm",children:"canArm()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"canArm"}),": (",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"state"}),") => ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that determines whether the director can remain active once it has already been activated."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"state"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorState",children:(0,t.jsx)(n.code,{children:"APRollSteerDirectorState"})}),">"]}),(0,t.jsx)(n.td,{children:"Data describing the state of the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.p,{children:"Whether the director can remain active once it has already been activated."}),"\n",(0,t.jsx)(n.h3,{id:"canremainactive",children:"canRemainActive()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"canRemainActive"}),": (",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"state"}),") => ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that determines whether the director can remain active once it has already been activated."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"state"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorState",children:(0,t.jsx)(n.code,{children:"APRollSteerDirectorState"})}),">"]}),(0,t.jsx)(n.td,{children:"Data describing the state of the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.p,{children:"Whether the director can remain active once it has already been activated."}),"\n",(0,t.jsx)(n.h3,{id:"canremainarmed",children:"canRemainArmed()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"canRemainArmed"}),": (",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"state"}),") => ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that determines whether the director can remain active once it has already been activated."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"state"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorState",children:(0,t.jsx)(n.code,{children:"APRollSteerDirectorState"})}),">"]}),(0,t.jsx)(n.td,{children:"Data describing the state of the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.p,{children:"Whether the director can remain active once it has already been activated."}),"\n",(0,t.jsx)(n.h3,{id:"maxbankangle",children:"maxBankAngle?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"maxBankAngle"}),": ",(0,t.jsx)(n.code,{children:"number"})," | () => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The maximum bank angle, in degrees, supported by the director, or a function which returns it. If not defined,\nthe director will use the maximum bank angle defined by its parent autopilot (via ",(0,t.jsx)(n.code,{children:"apValues"}),"). Defaults to\n",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"onactivate",children:"onActivate()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"onActivate"}),": (",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"state"}),") => ",(0,t.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that is called when the director is activated."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"state"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorState",children:(0,t.jsx)(n.code,{children:"APRollSteerDirectorState"})}),">"]}),(0,t.jsx)(n.td,{children:"Data describing the state of the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"void"})}),"\n",(0,t.jsx)(n.h3,{id:"onarm",children:"onArm()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"onArm"}),": (",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"state"}),") => ",(0,t.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that is called when the director is armed."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"state"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorState",children:(0,t.jsx)(n.code,{children:"APRollSteerDirectorState"})}),">"]}),(0,t.jsx)(n.td,{children:"Data describing the state of the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"void"})}),"\n",(0,t.jsx)(n.h3,{id:"ondeactivate",children:"onDeactivate()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"onDeactivate"}),": (",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"state"}),") => ",(0,t.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that is called when the director is deactivated."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"state"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APRollSteerDirectorState",children:(0,t.jsx)(n.code,{children:"APRollSteerDirectorState"})}),">"]}),(0,t.jsx)(n.td,{children:"Data describing the state of the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"void"})}),"\n",(0,t.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/autopilot/directors/APRollSteerDirector.ts:28"})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return c},a:function(){return d}});var i=r(667294);let t={},s=i.createContext(t);function d(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);