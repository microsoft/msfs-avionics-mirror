"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["768021"],{711637:function(e,i,t){t.r(i),t.d(i,{metadata:()=>n,contentTitle:()=>o,default:()=>p,assets:()=>l,toc:()=>c,frontMatter:()=>a});var n=JSON.parse('{"id":"api/garminsdk/type-aliases/GarminAutopilotOptions","title":"Type Alias: GarminAutopilotOptions","description":"GarminAutopilotOptions: object","source":"@site/docs/api/garminsdk/type-aliases/GarminAutopilotOptions.md","sourceDirName":"api/garminsdk/type-aliases","slug":"/api/garminsdk/type-aliases/GarminAutopilotOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/GarminAutopilotOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"GarminApproachType","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/GarminApproachType"},"next":{"title":"GarminChartDisplayProjectionDisplaySelection","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/GarminChartDisplayProjectionDisplaySelection"}}'),r=t("785893"),s=t("250065");let a={},o="Type Alias: GarminAutopilotOptions",l={},c=[{value:"Type declaration",id:"type-declaration",level:2},{value:"altSelectOptions?",id:"altselectoptions",level:3},{value:"metricAltSettingsManager?",id:"metricaltsettingsmanager",level:3},{value:"minimumsDataProvider?",id:"minimumsdataprovider",level:3},{value:"supportMachSelect?",id:"supportmachselect",level:3},{value:"Defined in",id:"defined-in",level:2}];function d(e){let i={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"type-alias-garminautopilotoptions",children:"Type Alias: GarminAutopilotOptions"})}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.strong,{children:"GarminAutopilotOptions"}),": ",(0,r.jsx)(i.code,{children:"object"})]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["Options with which to configure a ",(0,r.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminAutopilot",children:"GarminAutopilot"}),"."]}),"\n",(0,r.jsx)(i.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsx)(i.h3,{id:"altselectoptions",children:"altSelectOptions?"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"optional"})," ",(0,r.jsx)(i.strong,{children:"altSelectOptions"}),": ",(0,r.jsx)(i.code,{children:"Readonly"}),"<",(0,r.jsx)(i.code,{children:"Partial"}),"<",(0,r.jsx)(i.code,{children:"AltitudeSelectManagerOptions"}),">>"]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Options for the autopilot's altitude select manager. The following default options will be applied if they are not\nexplicitly provided:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{children:"supportMetric: true,\nminValue: UnitType.FOOT.createNumber(-1000),\nmaxValue: UnitType.FOOT.createNumber(50000),\ninputIncrLargeThreshold: 999,\nincrSmall: UnitType.FOOT.createNumber(100),\nincrLarge: UnitType.FOOT.createNumber(1000),\nincrSmallMetric: UnitType.METER.createNumber(50),\nincrLargeMetric: UnitType.METER.createNumber(500),\ninitOnInput: true,\ninitToIndicatedAlt: true,\ntransformSetToIncDec: false\n"})}),"\n",(0,r.jsx)(i.h3,{id:"metricaltsettingsmanager",children:"metricAltSettingsManager?"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"optional"})," ",(0,r.jsx)(i.strong,{children:"metricAltSettingsManager"}),": ",(0,r.jsx)(i.code,{children:"MetricAltitudeSettingsManager"})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"A manager of metric altitude mode user settings. Required for the autopilot's altitude select manager to support\nmetric mode."}),"\n",(0,r.jsx)(i.h3,{id:"minimumsdataprovider",children:"minimumsDataProvider?"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"optional"})," ",(0,r.jsx)(i.strong,{children:"minimumsDataProvider"}),": ",(0,r.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/MinimumsDataProvider",children:(0,r.jsx)(i.code,{children:"MinimumsDataProvider"})})]}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"A provider of minimums data. If defined, the autopilot's altitude select manager will add an additional selected\naltitude stop at the baro minimums altitude if one is set."}),"\n",(0,r.jsx)(i.h3,{id:"supportmachselect",children:"supportMachSelect?"}),"\n",(0,r.jsxs)(i.blockquote,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"optional"})," ",(0,r.jsx)(i.strong,{children:"supportMachSelect"}),": ",(0,r.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["Whether to support mach number as the selected airspeed reference. Defaults to ",(0,r.jsx)(i.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(i.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:"src/garminsdk/autopilot/GarminAutopilot.ts:18"})]})}function p(e={}){let{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,i,t){t.d(i,{Z:function(){return o},a:function(){return a}});var n=t(667294);let r={},s=n.createContext(r);function a(e){let i=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);