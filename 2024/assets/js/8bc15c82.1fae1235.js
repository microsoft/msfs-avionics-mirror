"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["622670"],{539460:function(e,n,i){i.r(n),i.d(n,{metadata:()=>s,contentTitle:()=>r,default:()=>h,assets:()=>d,toc:()=>l,frontMatter:()=>o});var s=JSON.parse('{"id":"g3000/mfd-plugins","title":"G3000 MFD Plugins","description":"Introduction","source":"@site/docs/g3000/mfd-plugins.md","sourceDirName":"g3000","slug":"/g3000/mfd-plugins","permalink":"/msfs-avionics-mirror/2024/docs/g3000/mfd-plugins","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_label":"MFD Plugins","sidebar_position":7},"sidebar":"sidebar","previous":{"title":"PFD Plugins","permalink":"/msfs-avionics-mirror/2024/docs/g3000/pfd-plugins"},"next":{"title":"GTC Plugins","permalink":"/msfs-avionics-mirror/2024/docs/g3000/gtc-plugins"}}'),t=i("785893"),a=i("250065");let o={sidebar_label:"MFD Plugins",sidebar_position:7},r="G3000 MFD Plugins",d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Importing Libraries",id:"importing-libraries",level:2},{value:"Binder",id:"binder",level:2},{value:"EIS",id:"eis",level:2},{value:"Display Panes",id:"display-panes",level:2},{value:"Persistent User Settings",id:"persistent-user-settings",level:2},{value:"Display Pane Power-On Options",id:"display-pane-power-on-options",level:2},{value:"Startup Screen Rows",id:"startup-screen-rows",level:2},{value:"Autopilot Customization",id:"autopilot-customization",level:2},{value:"Electronic Stability and Protection",id:"electronic-stability-and-protection",level:2},{value:"Initialization",id:"initialization",level:2},{value:"Weight and Balance Pane",id:"weight-and-balance-pane",level:2},{value:"Takeoff/Landing (TOLD) Performance",id:"takeofflanding-told-performance",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"g3000-mfd-plugins",children:"G3000 MFD Plugins"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["G3000 MFD plugins allow you to render the EIS, register display panes to the MFD, implement takeoff/landing (TOLD) performance calculations, and define user settings that should be saved between flights in addition to the ones already managed by the base G3000. MFD plugins must implement the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000mfd/interfaces/G3000MfdPlugin",children:(0,t.jsx)(n.code,{children:"G3000MfdPlugin"})})," interface."]}),"\n",(0,t.jsxs)(n.p,{children:["For convenience, you may elect to have MFD plugins extend the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000mfd/classes/AbstractG3000MfdPlugin",children:(0,t.jsx)(n.code,{children:"AbstractG3000MfdPlugin"})})," abstract class. This class defines no-op versions of all methods required by the MFD plugin interface. Simply override the methods required for the functionality you wish to add without having to worry about the others."]}),"\n",(0,t.jsx)(n.h2,{id:"importing-libraries",children:"Importing Libraries"}),"\n",(0,t.jsx)(n.p,{children:"MFD plugins can import and use code from the following framework libraries:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"@microsoft/msfs-sdk"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"@microsoft/msfs-garminsdk"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"@microsoft/msfs-wtg3000-common"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"@microsoft/msfs-wtg3000-mfd"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"When building your plugin, you should configure your build tools to consume the above libraries as global externals."}),"\n",(0,t.jsx)(n.h2,{id:"binder",children:"Binder"}),"\n",(0,t.jsxs)(n.p,{children:["In addition to the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/plugin-basics#plugin-interface",children:"references"})," passed to all G3000 plugins, MFD plugins are given the following additional references through ",(0,t.jsx)(n.code,{children:"binder"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The instrument configuration object specific to the MFD instance."}),"\n",(0,t.jsx)(n.li,{children:"The flight plan store."}),"\n",(0,t.jsx)(n.li,{children:"The CAS system."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"eis",children:"EIS"}),"\n",(0,t.jsxs)(n.p,{children:["The EIS (engine indication system) display is located on the left side of the MFD. EIS displays on the G3000 are highly aircraft-specific; therefore the base G3000 does not render any part of the EIS. ",(0,t.jsx)(n.strong,{children:"The EIS must be rendered by an MFD plugin"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A plugin can render the EIS using the ",(0,t.jsx)(n.code,{children:"renderEis()"})," method. This method is called during initialization of the MFD after ",(0,t.jsx)(n.code,{children:"onInstall()"})," and ",(0,t.jsx)(n.code,{children:"onInit()"}),". Once an EIS is rendered by any plugin (by returning a non-null ",(0,t.jsx)(n.code,{children:"VNode"})," from ",(0,t.jsx)(n.code,{children:"renderEis()"}),"), the ",(0,t.jsx)(n.code,{children:"renderEis()"})," methods of all subsequent plugins will be ignored."]}),"\n",(0,t.jsx)(n.p,{children:"The size of the area allocated to the EIS is 280px in width and 800px in height."}),"\n",(0,t.jsx)(n.h2,{id:"display-panes",children:"Display Panes"}),"\n",(0,t.jsxs)(n.p,{children:["The G3000 MFD supports two display panes. Either MFD pane can be displayed as full-size in MFD Full mode, or both can be displayed as half-size in MFD Half mode. For more information on display panes, please refer to the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/display-panes",children:(0,t.jsx)(n.em,{children:"G3000 Display Panes"})})," page."]}),"\n",(0,t.jsxs)(n.p,{children:["You can register your own display pane views to be displayed on the MFD using the MFD plugin's ",(0,t.jsx)(n.code,{children:"registerDisplayPaneViews()"})," method. This method is guaranteed to be called ",(0,t.jsx)(n.em,{children:"after"})," the base G3000 has registered all of its display pane views. Therefore, you may replace views registered by the base G3000 by registering your own view under the same key."]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"The MFD half-size display panes do not have the same dimensions as the PFD half-size display pane. The MFD version is slightly smaller in both dimensions (495px by 748px vs. 508px by 778px). Keep this in mind when designing panes that can appear on both the MFD and PFD."})}),"\n",(0,t.jsx)(n.h2,{id:"persistent-user-settings",children:"Persistent User Settings"}),"\n",(0,t.jsxs)(n.p,{children:["You can define user settings whose values should be saved across flights using the MFD plugin's ",(0,t.jsx)(n.code,{children:"getPersistentSettings()"})," method. Settings marked as persistent in this manner will be saved via the MSFS ",(0,t.jsx)(n.code,{children:"DataStore"})," API to the user's cloud save file. Saved settings are loaded during MFD initialization when loading a new flight. Persistent settings are saved on a per-aircraft basis (determined by the airplane's ATC_MODEL)."]}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:["A new cloud save data key is generated and written for each persistent user setting ",(0,t.jsx)(n.em,{children:"per aircraft"})," as soon as the MFD initializes after loading a flight. Currently there is no mechanism by which you can remove data keys from cloud save files. This means that once a key is added to a cloud save, it can never be removed."]}),(0,t.jsx)(n.p,{children:'As such, it is highly recommended that you finalize the names of all would-be persistent user settings before allowing them to be saved. This will help to minimize the number of "junk" keys written to the cloud saves of anybody running your plugin code.'})]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can disable saving of persistent user settings with the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-tag-documentation#persistentusersettings",children:(0,t.jsx)(n.code,{children:"<PersistentUserSettings>"})})," tag in ",(0,t.jsx)(n.code,{children:"panel.xml"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"display-pane-power-on-options",children:"Display Pane Power-On Options"}),"\n",(0,t.jsxs)(n.p,{children:["You can customize the behavior applied to ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/display-panes",children:"display panes"})," during G3000 system power-on using the MFD plugin's ",(0,t.jsx)(n.code,{children:"getDisplayPanePowerOnOptions()"})," method. If the method returns an instance of ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000mfd/type-aliases/DisplayPanePowerOnOptions",children:(0,t.jsx)(n.code,{children:"DisplayPanePowerOnOptions"})}),", then the options object is used to define power-on behavior. For more information, please refer to the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/display-panes#system-power-on-behavior",children:(0,t.jsx)(n.em,{children:"System Power-On Behavior"})})," section of the ",(0,t.jsx)(n.em,{children:"G3000 Display Panes"})," page."]}),"\n",(0,t.jsxs)(n.p,{children:["If multiple MFD plugins are loaded, then the return value of ",(0,t.jsx)(n.code,{children:"getDisplayPanePowerOnOptions()"})," is evaluated for each plugin. The plugins are evaluated in reverse loading order (the last-loaded plugin is evaluated first and the first-loaded plugin is evaluated last). If ",(0,t.jsx)(n.code,{children:"getDisplayPanePowerOnOptions()"})," is undefined or returns ",(0,t.jsx)(n.code,{children:"undefined"}),", then the next plugin is evaluated. If the method returns an instance of ",(0,t.jsx)(n.code,{children:"DisplayPanePowerOnOptions"}),", then evaluation stops and the returned instance is used to define power-on behavior. If all plugins have been evaluated and none of them returned an instance of ",(0,t.jsx)(n.code,{children:"DisplayPanePowerOnOptions"}),", then default power-on behavior is used."]}),"\n",(0,t.jsx)(n.h2,{id:"startup-screen-rows",children:"Startup Screen Rows"}),"\n",(0,t.jsxs)(n.p,{children:["If your airplane displays the MFD startup screen (as ",(0,t.jsx)(n.a,{href:"panel-xml-tag-documentation#startupscreen",children:"configured"})," in ",(0,t.jsx)(n.code,{children:"panel.xml"}),"), you can customize the data rows which appear on the right side using the MFD plugin's ",(0,t.jsx)(n.code,{children:"getStartupScreenRows()"})," method. If ",(0,t.jsx)(n.code,{children:"getStartupScreenRows()"})," returns a non-",(0,t.jsx)(n.code,{children:"null"})," value, then the returned array will override the default rows. Up to eleven rows can be rendered."]}),"\n",(0,t.jsxs)(n.p,{children:["For each row, the array returned by ",(0,t.jsx)(n.code,{children:"getStartupScreenRows()"})," can specify either a member of the ",(0,t.jsx)(n.code,{children:"StartupScreenPrebuiltRow"})," enum to render one of the pre-defined rows or a row factory to render a custom row. A row factory is a function which returns a ",(0,t.jsx)(n.code,{children:"StartupScreenRowDefinition"})," object that describes the custom row to render. Each row consists of a static icon, a static title, and a static or dynamic value. Additionally, the row may be displayed in an optional caution state in which the title and value are colored amber instead of white."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"When using custom image assets for row icons, the assets should have dimensions 30px (W) by 30px (H)."})}),"\n",(0,t.jsx)(n.p,{children:"The following image shows an example of two startup screen rows, with the icon, title, and value labeled. The second row is displayed in the caution state."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"MFD Startup Screen Rows",src:i(29957).Z+"",width:"412",height:"203"})}),"\n",(0,t.jsx)(n.h2,{id:"autopilot-customization",children:"Autopilot Customization"}),"\n",(0,t.jsxs)(n.p,{children:["You can customize certain aspects of the behavior of the autopilot using the MFD plugin's ",(0,t.jsx)(n.code,{children:"getAutopilotOptions()"})," method. If the method returns an instance of ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000mfd/interfaces/G3000AutopilotPluginOptions",children:(0,t.jsx)(n.code,{children:"G3000AutopilotPluginOptions"})}),", then the options object is used to define custom autopilot behavior. For more information, please refer to the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/features/autopilot#plugin-customization",children:(0,t.jsx)(n.em,{children:"G3000 Autopilot"})})," page."]}),"\n",(0,t.jsx)(n.h2,{id:"electronic-stability-and-protection",children:"Electronic Stability and Protection"}),"\n",(0,t.jsxs)(n.p,{children:["The G3000 supports an optional ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/features/esp",children:"electronic stability and protection (ESP) feature"}),", which automatically applies forces to the airplane's controls to aid in recovery from unusual attitude, overspeed, or underspeed conditions."]}),"\n",(0,t.jsxs)(n.p,{children:["To enable ESP, the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-tag-documentation#esp",children:(0,t.jsx)(n.code,{children:"<Esp>"})})," tag must be defined in ",(0,t.jsx)(n.code,{children:"panel.xml"})," and the MFD plugin's ",(0,t.jsx)(n.code,{children:"getEspDefinition()"})," method must return an instance of ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/type-aliases/G3000EspDefinition",children:(0,t.jsx)(n.code,{children:"G3000EspDefinition"})}),". If more than one plugin returns an ESP definition, then only the definition returned by the plugin that was loaded last will be used."]}),"\n",(0,t.jsxs)(n.p,{children:["The MFD plugin can also be optionally notified when ESP is enabled using the ",(0,t.jsx)(n.code,{children:"onEspCreated()"})," method. This method will be called if and only if ESP is enabled."]}),"\n",(0,t.jsx)(n.h2,{id:"initialization",children:"Initialization"}),"\n",(0,t.jsxs)(n.p,{children:["The G3000 supports an ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/features/initialization",children:"initialization feature"})," that guides users through pre-flight tasks. To configure this feature, use the MFD plugin's ",(0,t.jsx)(n.code,{children:"getInitializationProcess()"})," method. If the method returns an instance of ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/InitializationProcess",children:(0,t.jsx)(n.code,{children:"InitializationProcess"})}),", then the initialization feature will be enabled and the returned ",(0,t.jsx)(n.code,{children:"InitializationProcess"})," instance will be used to configure the feature."]}),"\n",(0,t.jsxs)(n.p,{children:["If multiple MFD plugins are loaded, then the return value of ",(0,t.jsx)(n.code,{children:"getInitializationProcess()"})," is evaluated for each plugin. The plugins are evaluated in reverse loading order (the last-loaded plugin is evaluated first and the first-loaded plugin is evaluated last). If ",(0,t.jsx)(n.code,{children:"getInitializationProcess()"})," is undefined or returns ",(0,t.jsx)(n.code,{children:"undefined"}),", then the next plugin is evaluated. If the method returns ",(0,t.jsx)(n.code,{children:"null"}),", then evaluation stops and the initialization feature is disabled. If the method returns an instance of ",(0,t.jsx)(n.code,{children:"InitializationProcess"}),", then evaluation stops and the initialization is enabled using the returned ",(0,t.jsx)(n.code,{children:"InitializationProcess"})," instance. If all plugins have been evaluated and none of them returned an instance of ",(0,t.jsx)(n.code,{children:"InitializationProcess"}),", then the initialization feature is disabled."]}),"\n",(0,t.jsx)(n.h2,{id:"weight-and-balance-pane",children:"Weight and Balance Pane"}),"\n",(0,t.jsxs)(n.p,{children:["The Weight and Balance pane is available to be displayed when the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/features/weight-balance",children:"weight and balance feature"})," is enabled. Certain aspects of the pane can be customized using plugins. Customization is defined using an instance of ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/WeightBalancePaneViewModule",children:(0,t.jsx)(n.code,{children:"WeightBalancePaneViewModule"})})," returned by the MFD plugin's ",(0,t.jsx)(n.code,{children:"getWeightBalancePaneViewModule()"})," method. For more information on how to use ",(0,t.jsx)(n.code,{children:"WeightBalancePaneViewModule"})," to customize the pane, please refer to the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/features/weight-balance#customizing-the-weight-and-balance-pane",children:(0,t.jsx)(n.em,{children:"G3000 Weight and Balance"})})," page."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Because the Weight and Balance pane can be displayed on both the PFD and MFD, an instance of ",(0,t.jsx)(n.code,{children:"WeightBalancePaneViewModule"})," should also be ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/pfd-plugins#weight-and-balance-pane",children:"returned"})," by a PFD plugin."]})}),"\n",(0,t.jsxs)(n.p,{children:["If multiple MFD plugins are loaded, then the return value of ",(0,t.jsx)(n.code,{children:"getWeightBalancePaneViewModule()"})," is evaluated for each plugin. The plugins are evaluated in reverse loading order (the last-loaded plugin is evaluated first and the first-loaded plugin is evaluated last). If ",(0,t.jsx)(n.code,{children:"getWeightBalancePaneViewModule()"})," is undefined or returns ",(0,t.jsx)(n.code,{children:"undefined"}),", then the next plugin is evaluated. If the method returns an instance of ",(0,t.jsx)(n.code,{children:"WeightBalancePaneViewModule"}),", then evaluation stops and the returned instance is used to customize the Weight and Balance pane. If all plugins have been evaluated and none of them returned an instance of ",(0,t.jsx)(n.code,{children:"WeightBalancePaneViewModule"}),", then no customization is applied."]}),"\n",(0,t.jsx)(n.h2,{id:"takeofflanding-told-performance",children:"Takeoff/Landing (TOLD) Performance"}),"\n",(0,t.jsx)(n.p,{children:"The G3000 supports optional takeoff/landing (TOLD) performance calculations. TOLD calculations provide performance-based runway length required and V-speed numbers."}),"\n",(0,t.jsxs)(n.p,{children:["To implement the TOLD option, two things must be done. First, in ",(0,t.jsx)(n.code,{children:"panel.xml"}),", the ",(0,t.jsx)(n.a,{href:"panel-xml-tag-documentation#told",children:(0,t.jsx)(n.code,{children:"<TOLD>"})})," tag must be defined. Second, at least one MFD plugin must return a valid ",(0,t.jsx)(n.code,{children:"ToldModule"})," from the ",(0,t.jsx)(n.code,{children:"getToldModule()"})," method."]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},29957:function(e,n,i){i.d(n,{Z:function(){return s}});let s=i.p+"assets/images/mfd-startup-screen-rows-d0867f87e1461dd9d38a705947014728.jpg"},250065:function(e,n,i){i.d(n,{Z:function(){return r},a:function(){return o}});var s=i(667294);let t={},a=s.createContext(t);function o(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);