"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["84835"],{131211:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>l,default:()=>o,assets:()=>c,toc:()=>h,frontMatter:()=>s});var t=JSON.parse('{"id":"api/garminsdk/classes/GarminVNavUtils","title":"Class: GarminVNavUtils","description":"A utility class for working with Garmin VNAV.","source":"@site/docs/api/garminsdk/classes/GarminVNavUtils.md","sourceDirName":"api/garminsdk/classes","slug":"/api/garminsdk/classes/GarminVNavUtils","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminVNavUtils","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"GarminVNavManager2","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminVNavManager2"},"next":{"title":"GarminVoiceCalloutModule","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminVoiceCalloutModule"}}'),d=i("785893"),r=i("250065");let s={},l="Class: GarminVNavUtils",c={},h=[{value:"Constructors",id:"constructors",level:2},{value:"new GarminVNavUtils()",id:"new-garminvnavutils",level:3},{value:"Returns",id:"returns",level:4},{value:"Methods",id:"methods",level:2},{value:"getDistanceToConstraint()",id:"getdistancetoconstraint",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"getPathDesiredAltitude()",id:"getpathdesiredaltitude",level:3},{value:"getPathDesiredAltitude(verticalPlan, pathConstraintIndex, distance)",id:"getpathdesiredaltitudeverticalplan-pathconstraintindex-distance",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-1",level:5},{value:"getPathDesiredAltitude(verticalPlan, pathConstraintIndex, globalLegIndex, distanceAlongLeg)",id:"getpathdesiredaltitudeverticalplan-pathconstraintindex-globallegindex-distancealongleg",level:4},{value:"Parameters",id:"parameters-2",level:5},{value:"Returns",id:"returns-3",level:5},{value:"Defined in",id:"defined-in-2",level:5},{value:"getTocBocDetails()",id:"gettocbocdetails",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"getTodBodDetails()",id:"gettodboddetails",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"invalidateClimbConstraint()",id:"invalidateclimbconstraint",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"invalidateDescentConstraint()",id:"invalidatedescentconstraint",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"isLegVNavEligible()",id:"islegvnaveligible",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"shouldUseConstraint()",id:"shoulduseconstraint",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-8",level:4}];function a(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"class-garminvnavutils",children:"Class: GarminVNavUtils"})}),"\n",(0,d.jsx)(n.p,{children:"A utility class for working with Garmin VNAV."}),"\n",(0,d.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,d.jsx)(n.h3,{id:"new-garminvnavutils",children:"new GarminVNavUtils()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"new GarminVNavUtils"}),"(): ",(0,d.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminVNavUtils",children:(0,d.jsx)(n.code,{children:"GarminVNavUtils"})})]}),"\n"]}),"\n",(0,d.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminVNavUtils",children:(0,d.jsx)(n.code,{children:"GarminVNavUtils"})})}),"\n",(0,d.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,d.jsx)(n.h3,{id:"getdistancetoconstraint",children:"getDistanceToConstraint()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"getDistanceToConstraint"}),"(",(0,d.jsx)(n.code,{children:"verticalPlan"}),", ",(0,d.jsx)(n.code,{children:"constraintIndex"}),", ",(0,d.jsx)(n.code,{children:"globalLegIndex"}),", ",(0,d.jsx)(n.code,{children:"distanceAlongLeg"}),"): ",(0,d.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Gets the along-track distance, in meters, from a point along the flight plan to the end of a VNAV constraint."}),"\n",(0,d.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"verticalPlan"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"VerticalFlightPlan"})}),(0,d.jsx)(n.td,{children:"The vertical flight plan."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"constraintIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The index of the VNAV constraint to calculate the distance to."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"globalLegIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The global index of the flight plan leg along which the point to check lies."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"distanceAlongLeg"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The distance, in meters, from the start of the flight plan leg to the point to check."})]})]})]}),"\n",(0,d.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"number"})}),"\n",(0,d.jsx)(n.p,{children:"The along-track distance, in meters, from the specified point to the end of the VNAV constraint."}),"\n",(0,d.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:566"}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h3,{id:"getpathdesiredaltitude",children:"getPathDesiredAltitude()"}),"\n",(0,d.jsx)(n.h4,{id:"getpathdesiredaltitudeverticalplan-pathconstraintindex-distance",children:"getPathDesiredAltitude(verticalPlan, pathConstraintIndex, distance)"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"getPathDesiredAltitude"}),"(",(0,d.jsx)(n.code,{children:"verticalPlan"}),", ",(0,d.jsx)(n.code,{children:"pathConstraintIndex"}),", ",(0,d.jsx)(n.code,{children:"distance"}),"): ",(0,d.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Gets the desired altitude, in meters, along a descent path at a specific point."}),"\n",(0,d.jsx)(n.h5,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"verticalPlan"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"VerticalFlightPlan"})}),(0,d.jsx)(n.td,{children:"The vertical flight plan."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"pathConstraintIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The index of the VNAV constraint defining the descent path."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"distance"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The distance, in meters, from the point to check to the end of the VNAV constraint defining the descent path."})]})]})]}),"\n",(0,d.jsx)(n.h5,{id:"returns-2",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"number"})}),"\n",(0,d.jsx)(n.h5,{id:"defined-in-1",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:602"}),"\n",(0,d.jsx)(n.h4,{id:"getpathdesiredaltitudeverticalplan-pathconstraintindex-globallegindex-distancealongleg",children:"getPathDesiredAltitude(verticalPlan, pathConstraintIndex, globalLegIndex, distanceAlongLeg)"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"getPathDesiredAltitude"}),"(",(0,d.jsx)(n.code,{children:"verticalPlan"}),", ",(0,d.jsx)(n.code,{children:"pathConstraintIndex"}),", ",(0,d.jsx)(n.code,{children:"globalLegIndex"}),", ",(0,d.jsx)(n.code,{children:"distanceAlongLeg"}),"): ",(0,d.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Gets the desired altitude, in meters, along a descent path at a specific point."}),"\n",(0,d.jsx)(n.h5,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"verticalPlan"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"VerticalFlightPlan"})}),(0,d.jsx)(n.td,{children:"The vertical flight plan."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"pathConstraintIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The index of the VNAV constraint defining the descent path."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"globalLegIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The global index of the flight plan leg along which the point to check lies."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"distanceAlongLeg"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The distance, in meters, from the start of the flight plan leg to the point to check."})]})]})]}),"\n",(0,d.jsx)(n.h5,{id:"returns-3",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"number"})}),"\n",(0,d.jsx)(n.p,{children:"The desired altitude, in meters, along the descent path at the specified point."}),"\n",(0,d.jsx)(n.h5,{id:"defined-in-2",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:615"}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h3,{id:"gettocbocdetails",children:"getTocBocDetails()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"getTocBocDetails"}),"(",(0,d.jsx)(n.code,{children:"verticalPlan"}),", ",(0,d.jsx)(n.code,{children:"activeConstraintIndex"}),", ",(0,d.jsx)(n.code,{children:"activeLegIndex"}),", ",(0,d.jsx)(n.code,{children:"distanceAlongLeg"}),", ",(0,d.jsx)(n.code,{children:"currentGroundSpeed"}),", ",(0,d.jsx)(n.code,{children:"currentAltitude"}),", ",(0,d.jsx)(n.code,{children:"currentVS"}),", ",(0,d.jsx)(n.code,{children:"isMapr"}),", ",(0,d.jsx)(n.code,{children:"out"}),"): ",(0,d.jsx)(n.code,{children:"TocBocDetails"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Gets the VNAV TOC/BOC details for a vertical flight plan."}),"\n",(0,d.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"verticalPlan"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"VerticalFlightPlan"})}),(0,d.jsx)(n.td,{children:"The vertical flight plan."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"activeConstraintIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The index of the vertical constraint containing the active flight plan leg."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"activeLegIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The index of the active flight plan leg."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"distanceAlongLeg"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The distance the plane is along the active flight plan leg in meters."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"currentGroundSpeed"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The current ground speed, in knots."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"currentAltitude"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The current indicated altitude in meters."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"currentVS"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The current vertical speed in meters per minute."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"isMapr"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"boolean"})}),(0,d.jsx)(n.td,{children:"Whether to get TOC/BOC details for the missed approach."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"out"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"TocBocDetails"})}),(0,d.jsx)(n.td,{children:"The object to which to write the TOC/BOC details."})]})]})]}),"\n",(0,d.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"TocBocDetails"})}),"\n",(0,d.jsx)(n.p,{children:"The VNAV TOC/BOC details."}),"\n",(0,d.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:386"}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h3,{id:"gettodboddetails",children:"getTodBodDetails()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"getTodBodDetails"}),"(",(0,d.jsx)(n.code,{children:"verticalPlan"}),", ",(0,d.jsx)(n.code,{children:"activeConstraintIndex"}),", ",(0,d.jsx)(n.code,{children:"activeLegIndex"}),", ",(0,d.jsx)(n.code,{children:"distanceAlongLeg"}),", ",(0,d.jsx)(n.code,{children:"currentAltitude"}),", ",(0,d.jsx)(n.code,{children:"currentVS"}),", ",(0,d.jsx)(n.code,{children:"out"}),"): ",(0,d.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/GarminTodBodDetails",children:(0,d.jsx)(n.code,{children:"GarminTodBodDetails"})})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Gets the VNAV TOD/BOD details for a vertical flight plan."}),"\n",(0,d.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"verticalPlan"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"VerticalFlightPlan"})}),(0,d.jsx)(n.td,{children:"The vertical flight plan."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"activeConstraintIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The index of the VNAV constraint containing the active flight plan leg."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"activeLegIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The global index of the active flight plan leg."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"distanceAlongLeg"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The along-track distance from the start of the active flight plan leg to the airplane's position, in meters."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"currentAltitude"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The current indicated altitude in meters."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"currentVS"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The current vertical speed in meters per minute."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"out"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/GarminTodBodDetails",children:(0,d.jsx)(n.code,{children:"GarminTodBodDetails"})})}),(0,d.jsx)(n.td,{children:"The object to which to write the TOD/BOD details."})]})]})]}),"\n",(0,d.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/GarminTodBodDetails",children:(0,d.jsx)(n.code,{children:"GarminTodBodDetails"})})}),"\n",(0,d.jsx)(n.p,{children:"The VNAV TOD/BOD details."}),"\n",(0,d.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:185"}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h3,{id:"invalidateclimbconstraint",children:"invalidateClimbConstraint()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"invalidateClimbConstraint"}),"(",(0,d.jsx)(n.code,{children:"constraint"}),", ",(0,d.jsx)(n.code,{children:"index"}),", ",(0,d.jsx)(n.code,{children:"constraints"}),", ",(0,d.jsx)(n.code,{children:"firstDescentConstraintIndex"}),", ",(0,d.jsx)(n.code,{children:"priorMinAltitude"}),", ",(0,d.jsx)(n.code,{children:"priorMaxAltitude"}),"): ",(0,d.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"A function which checks whether a climb constraint should be invalidated."}),"\n",(0,d.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"constraint"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"VNavConstraint"})}),(0,d.jsx)(n.td,{children:"A descent constraint."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"index"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsxs)(n.td,{children:["The index of the constraint to check if it is already in the vertical flight plan. If the constraint is not already in the vertical flight plan (i.e. the constraint has been previously invalidated), then this value equals ",(0,d.jsx)(n.code,{children:"-(index + 1)"})," where ",(0,d.jsx)(n.code,{children:"index"})," is the index at which the constraint would appear in the vertical flight plan if it were included."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"constraints"})}),(0,d.jsxs)(n.td,{children:["readonly ",(0,d.jsx)(n.code,{children:"VNavConstraint"}),"[]"]}),(0,d.jsx)(n.td,{children:"The array of VNAV constraints currently in the vertical flight plan."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"firstDescentConstraintIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The index of the first descent constraint in the vertical flight plan, if one exists."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"priorMinAltitude"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The most recent minimum altitude, in meters, defined by a VNAV constraint prior to the constraint to check. Only prior constraints connected to the constraint to check by a contiguous sequence of constraints of the same category (climb or missed approach) are included."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"priorMaxAltitude"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The most recent maximum altitude, in meters, defined by a VNAV constraint prior to the constraint to check. Only prior constraints connected to the constraint to check by a contiguous sequence of constraints of the same category (climb or missed approach) are included."})]})]})]}),"\n",(0,d.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"boolean"})}),"\n",(0,d.jsx)(n.p,{children:"Whether the specified climb constraint should be invalidated."}),"\n",(0,d.jsx)(n.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:99"}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h3,{id:"invalidatedescentconstraint",children:"invalidateDescentConstraint()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"invalidateDescentConstraint"}),"(",(0,d.jsx)(n.code,{children:"constraint"}),", ",(0,d.jsx)(n.code,{children:"index"}),", ",(0,d.jsx)(n.code,{children:"constraints"}),", ",(0,d.jsx)(n.code,{children:"priorMinAltitude"}),", ",(0,d.jsx)(n.code,{children:"priorMaxAltitude"}),", ",(0,d.jsx)(n.code,{children:"requiredFpa"}),", ",(0,d.jsx)(n.code,{children:"maxFpa"}),"): ",(0,d.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"A function which checks whether a descent constraint should be invalidated."}),"\n",(0,d.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"constraint"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"VNavConstraint"})}),(0,d.jsx)(n.td,{children:"A descent constraint."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"index"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsxs)(n.td,{children:["The index of the constraint to check if it is already in the vertical flight plan. If the constraint is not already in the vertical flight plan, then this value equals ",(0,d.jsx)(n.code,{children:"-(index + 1)"})," if it is not, where ",(0,d.jsx)(n.code,{children:"index"}),"."]})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"constraints"})}),(0,d.jsxs)(n.td,{children:["readonly ",(0,d.jsx)(n.code,{children:"VNavConstraint"}),"[]"]}),(0,d.jsx)(n.td,{children:"The array of VNAV constraints currently in the vertical flight plan."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"priorMinAltitude"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The most recent minimum altitude, in meters, defined by a VNAV constraint prior to the constraint to check. Only prior constraints connected to the constraint to check by a contiguous sequence of descent constraints are included."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"priorMaxAltitude"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The most recent maximum altitude, in meters, defined by a VNAV constraint prior to the constraint to check. Only prior constraints connected to the constraint to check by a contiguous sequence of descent constraints are included."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"requiredFpa"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The minimum flight path angle, in degrees, required to meet the maximum altitude of the constraint to check, assuming a descent starting from the constraint defining the most recent prior minimum altitude. Positive values indicate a descending path. If there is no required FPA because there is no defined prior minimum altitude or maximum altitude for the constraint to check, or if the constraint to check is higher than the prior minimum altitude, then this value will equal zero."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"maxFpa"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The maximum allowed flight path angle, in degrees. Positive values indicate a descending path."})]})]})]}),"\n",(0,d.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"boolean"})}),"\n",(0,d.jsx)(n.p,{children:"Whether the specified descent constraint should be invalidated."}),"\n",(0,d.jsx)(n.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:148"}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h3,{id:"islegvnaveligible",children:"isLegVNavEligible()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"isLegVNavEligible"}),"(",(0,d.jsx)(n.code,{children:"lateralLeg"}),"): ",(0,d.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Checks if a lateral flight plan leg is eligible for VNAV."}),"\n",(0,d.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsx)(n.tbody,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"lateralLeg"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"LegDefinition"})}),(0,d.jsx)(n.td,{children:"A lateral flight plan leg."})]})})]}),"\n",(0,d.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"boolean"})}),"\n",(0,d.jsx)(n.p,{children:"Whether the specified leg is eligible for VNAV."}),"\n",(0,d.jsx)(n.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:18"}),"\n",(0,d.jsx)(n.hr,{}),"\n",(0,d.jsx)(n.h3,{id:"shoulduseconstraint",children:"shouldUseConstraint()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"static"})," ",(0,d.jsx)(n.strong,{children:"shouldUseConstraint"}),"(",(0,d.jsx)(n.code,{children:"lateralPlan"}),", ",(0,d.jsx)(n.code,{children:"lateralLeg"}),", ",(0,d.jsx)(n.code,{children:"globalLegIndex"}),", ",(0,d.jsx)(n.code,{children:"segment"}),", ",(0,d.jsx)(n.code,{children:"segmentLegIndex"}),"): ",(0,d.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Checks whether an altitude constraint defined for a lateral flight plan leg should be used for VNAV."}),"\n",(0,d.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"lateralPlan"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"FlightPlan"})}),(0,d.jsx)(n.td,{children:"The lateral flight plan that hosts the altitude constraint."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"lateralLeg"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"LegDefinition"})}),(0,d.jsx)(n.td,{children:"The lateral flight plan leg that hosts the altitude constraint."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"globalLegIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The global index of the lateral flight plan leg that hosts the altitude constraint."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"segment"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"FlightPlanSegment"})}),(0,d.jsx)(n.td,{children:"The lateral flight plan segment containing the flight plan leg that hosts the altitude constraint."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"segmentLegIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The index of the lateral flight plan leg that hosts the altitude constraint in its containing segment."})]})]})]}),"\n",(0,d.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"boolean"})}),"\n",(0,d.jsx)(n.p,{children:"Whether the altitude constraint defined for the specified lateral flight plan leg should be used for\nVNAV."}),"\n",(0,d.jsx)(n.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/autopilot/vnav/GarminVNavUtils.ts:45"})]})}function o(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return l},a:function(){return s}});var t=i(667294);let d={},r=t.createContext(d);function s(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);