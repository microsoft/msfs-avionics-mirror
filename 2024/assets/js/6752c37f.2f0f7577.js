"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["186035"],{348273:function(e,t,n){n.r(t),n.d(t,{metadata:()=>r,contentTitle:()=>o,default:()=>l,assets:()=>d,toc:()=>c,frontMatter:()=>s});var r=JSON.parse('{"id":"api/framework/classes/DateTimeFormatter","title":"Class: DateTimeFormatter","description":"A utility class for creating time formatters.","source":"@site/docs/api/framework/classes/DateTimeFormatter.md","sourceDirName":"api/framework/classes","slug":"/api/framework/classes/DateTimeFormatter","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/DateTimeFormatter","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"DataInterface","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/DataInterface"},"next":{"title":"DebounceTimer","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/DebounceTimer"}}'),i=n("785893"),a=n("250065");let s={},o="Class: DateTimeFormatter",d={},c=[{value:"Examples",id:"examples",level:2},{value:"Constructors",id:"constructors",level:2},{value:"new DateTimeFormatter()",id:"new-datetimeformatter",level:3},{value:"Returns",id:"returns",level:4},{value:"Properties",id:"properties",level:2},{value:"DEFAULT_OPTIONS",id:"default_options",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"create()",id:"create",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-1",level:4}];function h(e){let t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"class-datetimeformatter",children:"Class: DateTimeFormatter"})}),"\n",(0,i.jsx)(t.p,{children:"A utility class for creating time formatters."}),"\n",(0,i.jsx)(t.p,{children:"Each time formatter is a function which generates output strings from input time values, expressed as UNIX\ntimestamps in milliseconds. The formatting behavior of a formatter is defined by its format template and options."}),"\n",(0,i.jsxs)(t.p,{children:["Please refer to the ",(0,i.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/DateTimeFormatterOptions",children:"DateTimeFormatterOptions"})," type documentation for more information on individual\nformatting options."]}),"\n",(0,i.jsxs)(t.p,{children:["Format templates are strings which contain zero or more fragments enclosed by curly braces (",(0,i.jsx)(t.code,{children:"{}"}),"); For a given\nformat template, an output string is generated from an input duration by replacing each fragment in the template\nwith a string generated from the input. The parts of the template string that are not contained in any fragment are\npassed to the output unchanged. Each fragment defines how its replacement string is generated. There are two types\nof fragments:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Integer fragment. In EBNF notation, these take the form ",(0,i.jsx)(t.code,{children:"{x}"})," where ",(0,i.jsx)(t.code,{children:"x = 'M' | 'd' | 'w'"}),". Each numeric fragment\nis replaced with an integer representation of the month (",(0,i.jsx)(t.code,{children:"M"}),"), day of month (",(0,i.jsx)(t.code,{children:"d"}),"), or day of week (",(0,i.jsx)(t.code,{children:"w"}),") part of the\ninput time. The number of ",(0,i.jsx)(t.code,{children:"x"})," characters in the definition controls the number of leading zeroes with which the\noutput will be padded."]}),"\n",(0,i.jsxs)(t.li,{children:["Numeric fragment. In EBNF notation, these take the form ",(0,i.jsx)(t.code,{children:"{x}, ['?'], ['.', [{x}], ['(', {x}, ')']]"})," where\n",(0,i.jsx)(t.code,{children:"x = 'H' | 'h' | 'm' | 's'"}),". Each numeric fragment is replaced with a numeric representation of the hour-24 (",(0,i.jsx)(t.code,{children:"H"}),"),\nhour-12 (",(0,i.jsx)(t.code,{children:"h"}),"), minute (",(0,i.jsx)(t.code,{children:"m"}),"), or second (",(0,i.jsx)(t.code,{children:"s"}),") part of the input time. The number of ",(0,i.jsx)(t.code,{children:"x"})," characters in the definition\ncontrols the number of leading zeroes with which the output will be padded. If the optional ",(0,i.jsx)(t.code,{children:"'?'"})," character is\npresent, the output will drop all digits to the left of the decimal point if all such digits are equal to 0. The\ntotal number of ",(0,i.jsx)(t.code,{children:"x"})," characters to the right of the decimal point in the definition controls the decimal precision of\nthe output. Trailing zeroes to the right of the decimal point will be added to the output to a number of decimal\nplaces equal to the number of non-parenthetical ",(0,i.jsx)(t.code,{children:"x"})," characters to the right of the decimal point in the definition.\nIf there are no ",(0,i.jsx)(t.code,{children:"x"})," characters to the right of the decimal point in the definition, then the output will have\ninfinite decimal precision with no extraneous trailing zeroes. Rounding behavior is always round down."]}),"\n",(0,i.jsxs)(t.li,{children:["Year fragment. In EBNF notation, these take the form ",(0,i.jsx)(t.code,{children:"'YY' | 'YYYY'"}),". Each year fragment is replaced with either\nthe two-digit (",(0,i.jsx)(t.code,{children:"YY"}),") or unlimited-digit (",(0,i.jsx)(t.code,{children:"YYYY"}),") year of the input time."]}),"\n",(0,i.jsxs)(t.li,{children:["Month fragment. In EBNF notation, these take the form ",(0,i.jsx)(t.code,{children:"('mon', ['.']) | ('MON', ['.']) | 'month' | 'MONTH'"}),". Each\nmonth fragment is replaced with the name of the month of the input time. The case of the definition determines the\ncase of the output. ",(0,i.jsx)(t.code,{children:"mon"})," will use abbreviated names. The presence of the optional ",(0,i.jsx)(t.code,{children:"'.'"})," character will add a period\nto the end of the abbreviated names."]}),"\n",(0,i.jsxs)(t.li,{children:["Day-of-week fragment. In EBNF notation, these take the form ",(0,i.jsx)(t.code,{children:"('dy', ['.']) | ('DY', ['.']) | 'day' | 'DAY'"}),". Each\nday-of-week fragment is replaced with the name of the day-of-week of the input time. The case of the definition\ndetermines the case of the output. ",(0,i.jsx)(t.code,{children:"dy"})," will use abbreviated names. The presence of the optional ",(0,i.jsx)(t.code,{children:"'.'"})," character\nwill add a period to the end of the abbreviated names."]}),"\n",(0,i.jsxs)(t.li,{children:["AM/PM fragment. In EBNF notation, these take the form ",(0,i.jsx)(t.code,{children:"'am' | 'a.m.' | 'AM' | 'A.M.'"}),". Each AM/PM fragment is\nreplaced with an AM/PM string depending on the time of day of the input. The case of the definition determines the\ncase of the output. Use of periods in the definition will add periods to the output."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"const formatter = DateTimeFormatter.create('{dd}-{MM}-{YY}');\nformatter(0);              // 01-01-70\nformatter(1597723200000);  // 18-08-20\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"const formatter = DateTimeFormatter.create('{HH}:{mm}:{ss}');\nformatter(0);              // 00:00:00\nformatter(5145000);        // 01:25:45\nformatter(57600000);       // 16:00:00\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"const formatter = DateTimeFormatter.create('{hh}:{mm}:{ss} {am}');\nformatter(0);              // 12:00:00 am\nformatter(5145000);        // 01:25:45 am\nformatter(57600000);       // 04:00:00 pm\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"const formatter = DateTimeFormatter.create('{H}:{mm.m(m)}');\nformatter(0);              // 0:00.0\nformatter(5145000);        // 1:25.75\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"const formatter = DateTimeFormatter.create('{YYYY}-{MM}-{dd}T{HH}:{mm}:{ss}');\nformatter(0);              // 1970-01-01T00:00:00\nformatter(1597723200000);  // 2020-08-18T04:00:00\n"})}),"\n",(0,i.jsx)(t.h2,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsx)(t.h3,{id:"new-datetimeformatter",children:"new DateTimeFormatter()"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"new DateTimeFormatter"}),"(): ",(0,i.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/DateTimeFormatter",children:(0,i.jsx)(t.code,{children:"DateTimeFormatter"})})]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/DateTimeFormatter",children:(0,i.jsx)(t.code,{children:"DateTimeFormatter"})})}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(t.h3,{id:"default_options",children:"DEFAULT_OPTIONS"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"readonly"})," ",(0,i.jsx)(t.code,{children:"static"})," ",(0,i.jsx)(t.strong,{children:"DEFAULT_OPTIONS"}),": ",(0,i.jsx)(t.code,{children:"Readonly"}),"<",(0,i.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/DateTimeFormatterOptions",children:(0,i.jsx)(t.code,{children:"DateTimeFormatterOptions"})}),">"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,i.jsx)(t.p,{children:"src/sdk/graphics/text/DateTimeFormatter.ts:118"}),"\n",(0,i.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(t.h3,{id:"create",children:"create()"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"static"})," ",(0,i.jsx)(t.strong,{children:"create"}),"(",(0,i.jsx)(t.code,{children:"format"}),", ",(0,i.jsx)(t.code,{children:"options"}),"?): (",(0,i.jsx)(t.code,{children:"time"}),") => ",(0,i.jsx)(t.code,{children:"string"})]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Creates a function which formats times, expressed as UNIX timestamps in milliseconds, to strings. The formatting\nbehavior of the function is defined by a specified format template and options. For more information on format\ntemplates and their syntax, please refer to the ",(0,i.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/DateTimeFormatter",children:"DateTimeFormatter"})," class documentation. For more\ninformation on individual formatting options, please refer to the ",(0,i.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/DateTimeFormatterOptions",children:"DateTimeFormatterOptions"})," type\ndocumentation."]}),"\n",(0,i.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter"}),(0,i.jsx)(t.th,{children:"Type"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"format"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{children:"A template defining how the function formats durations."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"options"}),"?"]}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"Readonly"}),"<",(0,i.jsx)(t.code,{children:"Partial"}),"<",(0,i.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/DateTimeFormatterOptions",children:(0,i.jsx)(t.code,{children:"DateTimeFormatterOptions"})}),">>"]}),(0,i.jsxs)(t.td,{children:["Options to customize the formatter. Options not explicitly defined will be set to the following default values: * ",(0,i.jsx)(t.code,{children:"monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']"})," * ",(0,i.jsx)(t.code,{children:"monthNamesShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']"})," * ",(0,i.jsx)(t.code,{children:"dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']"})," * ",(0,i.jsx)(t.code,{children:"dayNamesShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']"})," * ",(0,i.jsx)(t.code,{children:"nanString = 'NaN'"})]})]})]})]}),"\n",(0,i.jsx)(t.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"Function"})}),"\n",(0,i.jsx)(t.p,{children:"A function which formats times, expressed as UNIX timestamps in milliseconds, to strings."}),"\n",(0,i.jsx)(t.h5,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter"}),(0,i.jsx)(t.th,{children:"Type"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"time"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"number"})})]})})]}),"\n",(0,i.jsx)(t.h5,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"string"})}),"\n",(0,i.jsx)(t.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,i.jsx)(t.p,{children:"src/sdk/graphics/text/DateTimeFormatter.ts:148"})]})}function l(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},250065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return s}});var r=n(667294);let i={},a=r.createContext(i);function s(e){let t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);