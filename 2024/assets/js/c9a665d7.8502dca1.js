"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["370798"],{219271:function(e,n,r){r.r(n),r.d(n,{metadata:()=>i,contentTitle:()=>s,default:()=>o,assets:()=>a,toc:()=>c,frontMatter:()=>t});var i=JSON.parse('{"id":"api/framework/classes/GlidePathCalculator","title":"Class: GlidePathCalculator","description":"Handles the calculation of a Glide Path.","source":"@site/docs/api/framework/classes/GlidePathCalculator.md","sourceDirName":"api/framework/classes","slug":"/api/framework/classes/GlidePathCalculator","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/GlidePathCalculator","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"GeoProjectionPathStreamStack","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/GeoProjectionPathStreamStack"},"next":{"title":"GNSSPublisher","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/GNSSPublisher"}}'),l=r("785893"),d=r("250065");let t={},s="Class: GlidePathCalculator",a={},c=[{value:"Constructors",id:"constructors",level:2},{value:"new GlidePathCalculator()",id:"new-glidepathcalculator",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"glidepathFpa",id:"glidepathfpa",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"Methods",id:"methods",level:2},{value:"getDesiredGlidepathAltitude()",id:"getdesiredglidepathaltitude",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getGlidepathDistance()",id:"getglidepathdistance",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"getRunwayAltitude()",id:"getrunwayaltitude",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-4",level:4}];function h(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"class-glidepathcalculator",children:"Class: GlidePathCalculator"})}),"\n",(0,l.jsx)(n.p,{children:"Handles the calculation of a Glide Path."}),"\n",(0,l.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,l.jsx)(n.h3,{id:"new-glidepathcalculator",children:"new GlidePathCalculator()"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"new GlidePathCalculator"}),"(",(0,l.jsx)(n.code,{children:"bus"}),", ",(0,l.jsx)(n.code,{children:"flightPlanner"}),", ",(0,l.jsx)(n.code,{children:"primaryPlanIndex"}),"): ",(0,l.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/GlidePathCalculator",children:(0,l.jsx)(n.code,{children:"GlidePathCalculator"})})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Creates a new instance of GlidePathCalculator."}),"\n",(0,l.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Parameter"}),(0,l.jsx)(n.th,{children:"Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"bus"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/EventBus",children:(0,l.jsx)(n.code,{children:"EventBus"})})}),(0,l.jsx)(n.td,{children:"The event bus."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"flightPlanner"})}),(0,l.jsxs)(n.td,{children:[(0,l.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanner",children:(0,l.jsx)(n.code,{children:"FlightPlanner"})}),"<",(0,l.jsx)(n.code,{children:"any"}),">"]}),(0,l.jsx)(n.td,{children:"The flight planner to use with this instance."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"primaryPlanIndex"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.td,{children:"The primary plan index to use for calculating GlidePath."})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/GlidePathCalculator",children:(0,l.jsx)(n.code,{children:"GlidePathCalculator"})})}),"\n",(0,l.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:"src/sdk/autopilot/calculators/GlidePathCalculator.ts:30"}),"\n",(0,l.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(n.h3,{id:"glidepathfpa",children:"glidepathFpa"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"glidepathFpa"}),": ",(0,l.jsx)(n.code,{children:"number"})," = ",(0,l.jsx)(n.code,{children:"0"})]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:"src/sdk/autopilot/calculators/GlidePathCalculator.ts:22"}),"\n",(0,l.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(n.h3,{id:"getdesiredglidepathaltitude",children:"getDesiredGlidepathAltitude()"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"getDesiredGlidepathAltitude"}),"(",(0,l.jsx)(n.code,{children:"distance"}),"): ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Gets the Glidepath desired altitude in meters."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Parameter"}),(0,l.jsx)(n.th,{children:"Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsx)(n.tbody,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"distance"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.td,{children:"The current Glidepath distance in meters."})]})})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),"\n",(0,l.jsx)(n.p,{children:"The current Glidepath desired altitude in meters."}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:"src/sdk/autopilot/calculators/GlidePathCalculator.ts:151"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getglidepathdistance",children:"getGlidepathDistance()"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"getGlidepathDistance"}),"(",(0,l.jsx)(n.code,{children:"index"}),", ",(0,l.jsx)(n.code,{children:"distanceAlongLeg"}),"): ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Gets the current Glidepath distance in meters."}),"\n",(0,l.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Parameter"}),(0,l.jsx)(n.th,{children:"Type"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"index"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.td,{children:"The global index of the active leg."})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"distanceAlongLeg"})}),(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"number"})}),(0,l.jsx)(n.td,{children:"The aircraft's current distance along the active leg, in meters."})]})]})]}),"\n",(0,l.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),"\n",(0,l.jsx)(n.p,{children:"The current Glidepath distance in meters."}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:"src/sdk/autopilot/calculators/GlidePathCalculator.ts:101"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"getrunwayaltitude",children:"getRunwayAltitude()"}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"getRunwayAltitude"}),"(): ",(0,l.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Gets the Glidepath runway altitude in meters."}),"\n",(0,l.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"number"})}),"\n",(0,l.jsx)(n.p,{children:"The Glidepath runway altitude in meters."}),"\n",(0,l.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,l.jsx)(n.p,{children:"src/sdk/autopilot/calculators/GlidePathCalculator.ts:159"})]})}function o(e={}){let{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return t}});var i=r(667294);let l={},d=i.createContext(l);function t(e){let n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);