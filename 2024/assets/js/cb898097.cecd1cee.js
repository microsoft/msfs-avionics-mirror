"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["953234"],{327270:function(e,i,r){r.r(i),r.d(i,{metadata:()=>n,contentTitle:()=>l,default:()=>p,assets:()=>d,toc:()=>c,frontMatter:()=>s});var n=JSON.parse('{"id":"epic2/plugins/upper-mfd-plugins","title":"Epic2 Lower MFD Plugins","description":"Introduction","source":"@site/docs/epic2/plugins/upper-mfd-plugins.md","sourceDirName":"epic2/plugins","slug":"/epic2/plugins/upper-mfd-plugins","permalink":"/msfs-avionics-mirror/2024/docs/epic2/plugins/upper-mfd-plugins","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Upper MFD Plugins","sidebar_position":3},"sidebar":"sidebar","previous":{"title":"PFD Plugins","permalink":"/msfs-avionics-mirror/2024/docs/epic2/plugins/pfd-plugins"},"next":{"title":"Lower MFD Plugins","permalink":"/msfs-avionics-mirror/2024/docs/epic2/plugins/lower-mfd-plugins"}}'),t=r("785893"),o=r("250065");let s={sidebar_label:"Upper MFD Plugins",sidebar_position:3},l="Epic2 Lower MFD Plugins",d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Importing Libraries",id:"importing-libraries",level:2},{value:"Binder",id:"binder",level:2},{value:"Overriding FADEC",id:"overriding-fadec",level:2},{value:"Providing climb performance",id:"providing-climb-performance",level:2},{value:"Overriding autopilot options",id:"overriding-autopilot-options",level:2}];function a(e){let i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"epic2-lower-mfd-plugins",children:"Epic2 Lower MFD Plugins"})}),"\n",(0,t.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(i.p,{children:["Epic2 Upper MFD plugins allow you to override the default Epic2 fadec, provide aircraft climb performance information for climb predictions, override the default autothrottle options, and to render other arbitrary components. These plugins must implement the ",(0,t.jsx)(i.code,{children:"Epic2UpperMfdAvionicsPlugin"})," interface."]}),"\n",(0,t.jsx)(i.h2,{id:"importing-libraries",children:"Importing Libraries"}),"\n",(0,t.jsx)(i.p,{children:"PFD plugins can import and use code from the following framework libraries:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"@microsoft/msfs-sdk"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"@microsoft/msfs-epic2-upper-mfd"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"@microsoft/msfs-epic2-shared"})}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"When building your plugin, you should configure your build tools to consume the above libraries as global externals."}),"\n",(0,t.jsx)(i.h2,{id:"binder",children:"Binder"}),"\n",(0,t.jsxs)(i.p,{children:["Upper MFD plugins are only passed the ",(0,t.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/epic2/plugins/plugin-basics#plugin-interface",children:"references"})," passed to all Epic2 plugins"]}),"\n",(0,t.jsx)(i.h2,{id:"overriding-fadec",children:"Overriding FADEC"}),"\n",(0,t.jsx)(i.p,{children:"The Epic2 by default includes a basic jet and turboprop fadec which is selected based on the aircraft configuration in the sim. These fadecs may not be suitable for all installations, and so developers may wish to override them with their own."}),"\n",(0,t.jsxs)(i.p,{children:["To override the default FADEC, you must use the ",(0,t.jsx)(i.code,{children:"getFadec()"})," method, and set it to return a class which extends from ",(0,t.jsx)(i.code,{children:"Epic2Fadec"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"providing-climb-performance",children:"Providing climb performance"}),"\n",(0,t.jsx)(i.p,{children:"For the Epic2 to provide accurate climb predictions, it requires developers to provide a function to get the predicted climb rate based on the aircraft's current pressure altitude in feet and weight in pounds - this function should then return a climb rate, based on ISA conditions, in feet per minute."}),"\n",(0,t.jsxs)(i.p,{children:["To do so, developers must create a ",(0,t.jsx)(i.code,{children:"getClimbRate(pressureAlt: number, weightLbs: number): number"})," function, which takes the current pressure altitude and weight and returns the climb rate."]}),"\n",(0,t.jsx)(i.h2,{id:"overriding-autopilot-options",children:"Overriding autopilot options"}),"\n",(0,t.jsx)(i.p,{children:"While the default autopilot options are suitable for most aircraft, some aircraft may require autopilot options to be overridden so developers can better tune the autopilot PIDs."}),"\n",(0,t.jsxs)(i.p,{children:["To do so, use the ",(0,t.jsx)(i.code,{children:"getAutothrottleOptions()"})," function and return an ",(0,t.jsx)(i.code,{children:"AutothrottleOptions"})," interface with the configured options."]})]})}function p(e={}){let{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},250065:function(e,i,r){r.d(i,{Z:function(){return l},a:function(){return s}});var n=r(667294);let t={},o=n.createContext(t);function s(e){let i=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);