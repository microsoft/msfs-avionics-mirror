"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["890457"],{48425:function(e,n,r){r.r(n),r.d(n,{metadata:()=>a,contentTitle:()=>t,default:()=>h,assets:()=>o,toc:()=>l,frontMatter:()=>s});var a=JSON.parse('{"id":"api/framework/interfaces/NavToNavManager2","title":"Interface: NavToNavManager2","description":"A manager that handles CDI source switching to a NAV radio source for an autopilot.","source":"@site/docs/api/framework/interfaces/NavToNavManager2.md","sourceDirName":"api/framework/interfaces","slug":"/api/framework/interfaces/NavToNavManager2","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NavToNavManager2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"NavSource","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NavSource"},"next":{"title":"NdbFacility","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NdbFacility"}}'),i=r("785893"),d=r("250065");let s={},t="Interface: NavToNavManager2",o={},l=[{value:"Properties",id:"properties",level:2},{value:"isNavToNavManager2",id:"isnavtonavmanager2",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"onTransferred()?",id:"ontransferred",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"Methods",id:"methods",level:2},{value:"getArmableLateralMode()",id:"getarmablelateralmode",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getArmableNavRadioIndex()",id:"getarmablenavradioindex",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"getArmableVerticalMode()",id:"getarmableverticalmode",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"isTransferInProgress()",id:"istransferinprogress",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"onAfterUpdate()",id:"onafterupdate",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"onBeforeUpdate()",id:"onbeforeupdate",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-7",level:4}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"interface-navtonavmanager2",children:"Interface: NavToNavManager2"})}),"\n",(0,i.jsx)(n.p,{children:"A manager that handles CDI source switching to a NAV radio source for an autopilot."}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.h3,{id:"isnavtonavmanager2",children:"isNavToNavManager2"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"readonly"})," ",(0,i.jsx)(n.strong,{children:"isNavToNavManager2"}),": ",(0,i.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Flags this object as a NavToNavManager2."}),"\n",(0,i.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/managers/NavToNavManager2.ts:8"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"ontransferred",children:"onTransferred()?"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"optional"})," ",(0,i.jsx)(n.strong,{children:"onTransferred"}),": (",(0,i.jsx)(n.code,{children:"activateLateralMode"}),", ",(0,i.jsx)(n.code,{children:"activateVerticalMode"}),") => ",(0,i.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"A callback function that is called when this manager has completed a CDI source switch."}),"\n",(0,i.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"activateLateralMode"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:"The autopilot lateral mode that can be activated as a result of the CDI source switch."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"activateVerticalMode"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"number"})}),(0,i.jsx)(n.td,{children:"The autopilot vertical mode that can be activated as a result of the CDI source switch."})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"void"})}),"\n",(0,i.jsx)(n.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/managers/NavToNavManager2.ts:16"}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h3,{id:"getarmablelateralmode",children:"getArmableLateralMode()"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"getArmableLateralMode"}),"(): ",(0,i.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Gets the autopilot lateral mode that can be armed while waiting for this manager to switch CDI source, or\n",(0,i.jsx)(n.code,{children:"APLateralModes.NONE"})," if no modes can be armed."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"number"})}),"\n",(0,i.jsxs)(n.p,{children:["The autopilot lateral mode that can be armed while waiting for this manager to switch CDI source, or\n",(0,i.jsx)(n.code,{children:"APLateralModes.NONE"})," if no modes can be armed."]}),"\n",(0,i.jsx)(n.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/managers/NavToNavManager2.ts:32"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"getarmablenavradioindex",children:"getArmableNavRadioIndex()"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"getArmableNavRadioIndex"}),"(): ",(0,i.jsx)(n.code,{children:"-1"})," | ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/NavRadioIndex",children:(0,i.jsx)(n.code,{children:"NavRadioIndex"})})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Gets the index of the NAV radio that can be armed for a CDI source switch by this manager, or ",(0,i.jsx)(n.code,{children:"-1"})," if a CDI source\nswitch cannot be armed."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"-1"})," | ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/NavRadioIndex",children:(0,i.jsx)(n.code,{children:"NavRadioIndex"})})]}),"\n",(0,i.jsxs)(n.p,{children:["The index of the NAV radio that can be armed for a CDI source switch by this manager, or ",(0,i.jsx)(n.code,{children:"-1"})," if a CDI\nsource switch cannot be armed."]}),"\n",(0,i.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/managers/NavToNavManager2.ts:24"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"getarmableverticalmode",children:"getArmableVerticalMode()"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"getArmableVerticalMode"}),"(): ",(0,i.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Gets the autopilot vertical mode that can be armed while waiting for this manager to switch CDI source, or\n",(0,i.jsx)(n.code,{children:"APVerticalModes.NONE"})," if no modes can be armed."]}),"\n",(0,i.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"number"})}),"\n",(0,i.jsxs)(n.p,{children:["The autopilot vertical mode that can be armed while waiting for this manager to switch CDI source, or\n",(0,i.jsx)(n.code,{children:"APVerticalModes.NONE"})," if no modes can be armed."]}),"\n",(0,i.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/managers/NavToNavManager2.ts:40"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"istransferinprogress",children:"isTransferInProgress()"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"isTransferInProgress"}),"(): ",(0,i.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Checks whether a CDI source switch initiated by this manager is currently in progress."}),"\n",(0,i.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"boolean"})}),"\n",(0,i.jsx)(n.p,{children:"Whether a CDI source switch initiated by this manager is currently in progress."}),"\n",(0,i.jsx)(n.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/managers/NavToNavManager2.ts:46"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"onafterupdate",children:"onAfterUpdate()"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"onAfterUpdate"}),"(): ",(0,i.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"A method that is called on every autopilot update cycle after the autopilot directors are updated."}),"\n",(0,i.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"void"})}),"\n",(0,i.jsx)(n.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/managers/NavToNavManager2.ts:56"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"onbeforeupdate",children:"onBeforeUpdate()"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"onBeforeUpdate"}),"(): ",(0,i.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"A method that is called on every autopilot update cycle before the autopilot directors are updated."}),"\n",(0,i.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"void"})}),"\n",(0,i.jsx)(n.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,i.jsx)(n.p,{children:"src/sdk/autopilot/managers/NavToNavManager2.ts:51"})]})}function h(e={}){let{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return t},a:function(){return s}});var a=r(667294);let i={},d=a.createContext(i);function s(e){let n=a.useContext(d);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(d.Provider,{value:n},e.children)}}}]);