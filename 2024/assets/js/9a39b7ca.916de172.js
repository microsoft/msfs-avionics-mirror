"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["232039"],{921848:function(e,n,r){r.r(n),r.d(n,{metadata:()=>i,contentTitle:()=>l,default:()=>a,assets:()=>c,toc:()=>h,frontMatter:()=>t});var i=JSON.parse('{"id":"api/garminsdk/classes/GarminFlightPlanRouteSyncManager","title":"Class: GarminFlightPlanRouteSyncManager","description":"A manager for syncing Garmin flight plan routes to and from the sim. The manager supports automatically replying to","source":"@site/docs/api/garminsdk/classes/GarminFlightPlanRouteSyncManager.md","sourceDirName":"api/garminsdk/classes","slug":"/api/garminsdk/classes/GarminFlightPlanRouteSyncManager","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminFlightPlanRouteSyncManager","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"GarminFacilityWaypointCache","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminFacilityWaypointCache"},"next":{"title":"GarminFlightPlanRouteUtils","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminFlightPlanRouteUtils"}}'),s=r("785893"),d=r("250065");let t={},l="Class: GarminFlightPlanRouteSyncManager",c={},h=[{value:"Constructors",id:"constructors",level:2},{value:"new GarminFlightPlanRouteSyncManager()",id:"new-garminflightplanroutesyncmanager",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"awaitInit()",id:"awaitinit",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"cancelLoad()",id:"cancelload",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Throws",id:"throws",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"cancelReply()",id:"cancelreply",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Throws",id:"throws-1",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"destroy()",id:"destroy",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"init()",id:"init",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Throws",id:"throws-2",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"isAutoReplying()",id:"isautoreplying",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"isAutoSyncing()",id:"isautosyncing",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"isInit()",id:"isinit",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"loadFromSyncedRoute()",id:"loadfromsyncedroute",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Throws",id:"throws-3",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"loadRoute()",id:"loadroute",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Throws",id:"throws-4",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"replyToAllPendingRequests()",id:"replytoallpendingrequests",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Throws",id:"throws-5",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"replyToRequest()",id:"replytorequest",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Throws",id:"throws-6",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"startAutoReply()",id:"startautoreply",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Throws",id:"throws-7",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"startAutoSync()",id:"startautosync",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Throws",id:"throws-8",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"stopAutoReply()",id:"stopautoreply",level:3},{value:"Returns",id:"returns-15",level:4},{value:"Throws",id:"throws-9",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"stopAutoSync()",id:"stopautosync",level:3},{value:"Returns",id:"returns-16",level:4},{value:"Throws",id:"throws-10",level:4},{value:"Defined in",id:"defined-in-16",level:4}];function o(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"class-garminflightplanroutesyncmanager",children:"Class: GarminFlightPlanRouteSyncManager"})}),"\n",(0,s.jsx)(n.p,{children:"A manager for syncing Garmin flight plan routes to and from the sim. The manager supports automatically replying to\navionics route requests and can be used to manually or automatically load synced flight plan routes."}),"\n",(0,s.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsx)(n.h3,{id:"new-garminflightplanroutesyncmanager",children:"new GarminFlightPlanRouteSyncManager()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"new GarminFlightPlanRouteSyncManager"}),"(): ",(0,s.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminFlightPlanRouteSyncManager",children:(0,s.jsx)(n.code,{children:"GarminFlightPlanRouteSyncManager"})})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Creates a new instance of GarminFlightPlanRouteSyncManager. The manager is created in an uninitialized state and\nmust be initialized before it can perform any functions."}),"\n",(0,s.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/GarminFlightPlanRouteSyncManager",children:(0,s.jsx)(n.code,{children:"GarminFlightPlanRouteSyncManager"})})}),"\n",(0,s.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:35"}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"awaitinit",children:"awaitInit()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"awaitInit"}),"(): ",(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Waits until this manager is initialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"void"}),">"]}),"\n",(0,s.jsx)(n.p,{children:"A Promise which is fulfilled when this manager is initialized, or rejected if this manager is destroyed\nbefore it is initialized."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:63"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"cancelload",children:"cancelLoad()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"cancelLoad"}),"(): ",(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Stops any in-progress operation to load a synced route. This method has no effect if this manager is not\ninitialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"void"}),">"]}),"\n",(0,s.jsx)(n.p,{children:"A Promise which is fulfilled after the in-progress operation to load a synced route into the primary\nflight plan at the time this method is called has been stopped. If there are no in-progress operations, then the\nPromise is fulfilled immediately."}),"\n",(0,s.jsx)(n.h4,{id:"throws",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:309"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"cancelreply",children:"cancelReply()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"cancelReply"}),"(): ",(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Stops any in-progress operation to reply to avionics route requests. This method has no effect if this manager is\nnot initialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"void"}),">"]}),"\n",(0,s.jsx)(n.p,{children:"A Promise which is fulfilled after the in-progress operation to reply to avionics route requests at the\ntime this method is called has been stopped. If there are no in-progress operations, then the Promise is fulfilled\nimmediately."}),"\n",(0,s.jsx)(n.h4,{id:"throws-1",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:238"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"destroy",children:"destroy()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"destroy"}),"(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Destroys this manager."}),"\n",(0,s.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:439"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"init",children:"init()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"init"}),"(",(0,s.jsx)(n.code,{children:"manager"}),", ",(0,s.jsx)(n.code,{children:"loader"}),", ",(0,s.jsx)(n.code,{children:"provider"}),"): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Initializes this manager. Once initialized, this manager will automatically reply to avionics route requests and\ncan be used to manually or automatically load synced avionics routes."}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"manager"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FlightPlanRouteManager"})}),(0,s.jsx)(n.td,{children:"A flight plan route manager."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"loader"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/GarminFlightPlanRouteLoader",children:(0,s.jsx)(n.code,{children:"GarminFlightPlanRouteLoader"})})}),(0,s.jsx)(n.td,{children:"A flight plan route loader. The loader will be used by this manager to load flight plan routes."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"provider"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/GarminFlightPlanRouteProvider",children:(0,s.jsx)(n.code,{children:"GarminFlightPlanRouteProvider"})})}),(0,s.jsx)(n.td,{children:"A flight plan route provider. The provider will be used by this manager to retrieve flight plan routes with which to reply to avionics route requests."})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"throws-2",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:76"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isautoreplying",children:"isAutoReplying()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"isAutoReplying"}),"(): ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Checks whether this manager is currently set to automatically reply to avionics route requests."}),"\n",(0,s.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether this manager is currently set to automatically reply to avionics route requests."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:103"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isautosyncing",children:"isAutoSyncing()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"isAutoSyncing"}),"(): ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Checks whether this manager is currently set to automatically load synced avionics flight plan routes."}),"\n",(0,s.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether this manager is currently set to automatically load synced avionics flight plan routes."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:111"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isinit",children:"isInit()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"isInit"}),"(): ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Checks whether this manager is initialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"boolean"})}),"\n",(0,s.jsx)(n.p,{children:"Whether this manager is initialized."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:54"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"loadfromsyncedroute",children:"loadFromSyncedRoute()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"loadFromSyncedRoute"}),"(): ",(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"boolean"}),">"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Loads the most recent synced avionics flight plan route, if one exists. This will preempt any existing in-progress\nroute-loading operation. This method has no effect if this manager is not initialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"boolean"}),">"]}),"\n",(0,s.jsx)(n.p,{children:"A Promise which is fulfilled when the loading operation ends. The fulfillment value reports whether the\noperation completed successfully without being cancelled."}),"\n",(0,s.jsx)(n.h4,{id:"throws-3",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:263"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"loadroute",children:"loadRoute()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"loadRoute"}),"(",(0,s.jsx)(n.code,{children:"route"}),"): ",(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"boolean"}),">"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Loads a flight plan route. This will preempt any existing in-progress route-loading operation. This method has no\neffect if this manager is not initialized."}),"\n",(0,s.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"The flight plan route to load."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_FlightPlanRoute"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approach"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"This route's approach procedure."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approach.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_ApproachIdentifier"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approach.runway"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"The approach's associated runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approach.runway.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approach.runway.designator"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The designator of the runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approach.runway.number"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The number of the runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approach.suffix"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The suffix of the approach."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approach.type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The type name of the approach."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approachTransition"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The name of this route's approach procedure transition."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approachVfrPattern"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"This route's VFR traffic pattern approach procedure."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approachVfrPattern.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approachVfrPattern.altitude"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approachVfrPattern.distance"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approachVfrPattern.isLeftTraffic"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.approachVfrPattern.type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FlightPlanRouteVfrPatternApproachType"})}),(0,s.jsx)(n.td,{children:"The selected pattern type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.arrival"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The name of this route's arrival procedure."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.arrivalTransition"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The name of this route's arrival procedure enroute transition."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.cruiseAltitude"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"null"})," | ",(0,s.jsx)(n.code,{children:"object"})]}),(0,s.jsx)(n.td,{children:"This route's cruise altitude."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departure"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The name of this route's departure procedure."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureAirport"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"The ICAO of this route's departure airport."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureAirport.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureAirport.airport"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureAirport.ident"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The facility's ident."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureAirport.region"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The facility's region code."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureAirport.type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The facility's type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureRunway"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"This route's departure runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureRunway.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureRunway.designator"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The designator of the runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureRunway.number"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The number of the runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureTransition"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The name of this route's departure procedure enroute transition."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureVfrPattern"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"This route's VFR traffic pattern departure procedure."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureVfrPattern.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureVfrPattern.altitude"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureVfrPattern.distance"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureVfrPattern.isLeftTraffic"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.departureVfrPattern.type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"FlightPlanRouteVfrPatternDepartureType"})}),(0,s.jsx)(n.td,{children:"The selected pattern type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationAirport"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"The ICAO of this route's destination airport."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationAirport.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationAirport.airport"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationAirport.ident"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The facility's ident."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationAirport.region"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The facility's region code."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationAirport.type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The facility's type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationRunway"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"This route's destination runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationRunway.__Type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,s.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationRunway.designator"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The designator of the runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.destinationRunway.number"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"The number of the runway."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.enroute"})}),(0,s.jsxs)(n.td,{children:["readonly ",(0,s.jsx)(n.code,{children:"object"}),"[]"]}),(0,s.jsx)(n.td,{children:"This route's enroute legs."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"route.isVfr"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"Whether this route is classified as VFR."})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"boolean"}),">"]}),"\n",(0,s.jsx)(n.p,{children:"A Promise which is fulfilled when the loading operation ends. The fulfillment value reports whether the\noperation completed successfully without being cancelled."}),"\n",(0,s.jsx)(n.h4,{id:"throws-4",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:289"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"replytoallpendingrequests",children:"replyToAllPendingRequests()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"replyToAllPendingRequests"}),"(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Replies to all pending avionics route requests. The reply operations are handled asynchronously and so are not\nguaranteed to have completed by the time this method returns. This method has no effect if this manager is not\ninitialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"throws-5",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:199"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"replytorequest",children:"replyToRequest()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"replyToRequest"}),"(",(0,s.jsx)(n.code,{children:"requestId"}),"): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Replies to a specific avionics route request. The reply operation is handled asynchronously and so is not\nguaranteed to have completed by the time this method returns. This method has no effect if this manager is not\ninitialized."}),"\n",(0,s.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"requestId"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The ID of the request to which to reply."})]})})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"throws-6",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:218"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"startautoreply",children:"startAutoReply()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"startAutoReply"}),"(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Starts automatically replying to avionics route requests. This will not initiate replies to any existing pending\nrequests; only requests received after this method is called will receive an automatic reply. This method has no\neffect if this manager is not initialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-13",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"throws-7",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:121"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"startautosync",children:"startAutoSync()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"startAutoSync"}),"(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Starts automatically loading any synced avionics flight plan routes. After automatic sync has started, this\nmanager will wait until the next time a new avionics route is synced before loading the synced route. This method\nhas no effect if this manager is not initialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-14",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"throws-8",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:160"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"stopautoreply",children:"stopAutoReply()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"stopAutoReply"}),"(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Stops automatically replying to avionics route requests. This method does not cancel any reply operation that is\nalready in progress. This method has no effect if this manager is not initialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-15",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"throws-9",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:140"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"stopautosync",children:"stopAutoSync()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"stopAutoSync"}),"(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Stops automatically loading any synced avionics flight plan routes. This method does not cancel any route-loading\noperation that is already in progress. This method has no effect if this manager is not initialized."}),"\n",(0,s.jsx)(n.h4,{id:"returns-16",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"throws-10",children:"Throws"}),"\n",(0,s.jsx)(n.p,{children:"Error if this manager has been destroyed."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/garminsdk/flightplan/GarminFlightPlanRouteSyncManager.ts:179"})]})}function a(e={}){let{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return l},a:function(){return t}});var i=r(667294);let s={},d=i.createContext(s);function t(e){let n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);