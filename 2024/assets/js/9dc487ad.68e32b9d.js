"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["699442"],{729721:function(e,n,s){s.r(n),s.d(n,{metadata:()=>i,contentTitle:()=>a,default:()=>h,assets:()=>r,toc:()=>o,frontMatter:()=>l});var i=JSON.parse('{"id":"api/garminsdk/type-aliases/FmsOptions","title":"Type Alias: FmsOptions","description":"FmsOptions: object","source":"@site/docs/api/garminsdk/type-aliases/FmsOptions.md","sourceDirName":"api/garminsdk/type-aliases","slug":"/api/garminsdk/type-aliases/FmsOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/FmsOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"FmsFplVisualApproachData","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/FmsFplVisualApproachData"},"next":{"title":"FmsVisualApproachOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/FmsVisualApproachOptions"}}'),d=s("785893"),t=s("250065");let l={},a="Type Alias: FmsOptions",r={},o=[{value:"Type declaration",id:"type-declaration",level:2},{value:"cdiId?",id:"cdiid",level:3},{value:"disableApproachAvailablePublish?",id:"disableapproachavailablepublish",level:3},{value:"isAdvancedVnav?",id:"isadvancedvnav",level:3},{value:"lnavIndex?",id:"lnavindex",level:3},{value:"navRadioIndexes?",id:"navradioindexes",level:3},{value:"procedureLegMapper()?",id:"procedurelegmapper",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"useSimObsState?",id:"usesimobsstate",level:3},{value:"visualApproachOptions?",id:"visualapproachoptions",level:3},{value:"vnavIndex?",id:"vnavindex",level:3},{value:"Defined in",id:"defined-in",level:2}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"type-alias-fmsoptions",children:"Type Alias: FmsOptions"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"FmsOptions"}),": ",(0,d.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Configuration options for ",(0,d.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/classes/Fms",children:"Fms"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,d.jsx)(n.h3,{id:"cdiid",children:"cdiId?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"cdiId"}),": ",(0,d.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["The ID of the CDI associated with the FMS. Defaults to the empty string (",(0,d.jsx)(n.code,{children:"''"}),")."]}),"\n",(0,d.jsx)(n.h3,{id:"disableapproachavailablepublish",children:"disableApproachAvailablePublish?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"disableApproachAvailablePublish"}),": ",(0,d.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Whether to prevent the FMS from publishing the FMS flight phase approach active status to the ",(0,d.jsx)(n.code,{children:"approach_available"}),"\nevent bus topic. Defaults to ",(0,d.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"isadvancedvnav",children:"isAdvancedVnav?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"isAdvancedVnav"}),": ",(0,d.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Whether advanced VNAV is supported. Defaults to ",(0,d.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"lnavindex",children:"lnavIndex?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"lnavIndex"}),": ",(0,d.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["The index of the LNAV associated with the FMS's active flight plan. Defaults to ",(0,d.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"navradioindexes",children:"navRadioIndexes?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"navRadioIndexes"}),": ",(0,d.jsx)(n.code,{children:"Iterable"}),"<",(0,d.jsx)(n.code,{children:"NavRadioIndex"}),">"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["The indexes of the sim NAV radios for which the FMS automatically tunes approach frequencies. The FMS will respect\nchanges made to the iterable after the FMS is created. Defaults to ",(0,d.jsx)(n.code,{children:"[1, 2]"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"procedurelegmapper",children:"procedureLegMapper()?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"procedureLegMapper"}),": (",(0,d.jsx)(n.code,{children:"leg"}),") => ",(0,d.jsx)(n.code,{children:"undefined"})," | ",(0,d.jsx)(n.code,{children:"FlightPlanLeg"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["A function that maps flight plan legs in a procedure to flight plan legs to insert into a flight plan when loading\nthe procedure. If the function returns ",(0,d.jsx)(n.code,{children:"undefined"}),", then the corresponding procedure leg will be omitted from the\nflight plan entirely. If not defined, then all procedure flight plan legs are inserted into the flight plan\nwithout modification."]}),"\n",(0,d.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"})]})}),(0,d.jsx)(n.tbody,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"leg"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"FlightPlanLeg"})})]})})]}),"\n",(0,d.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"undefined"})," | ",(0,d.jsx)(n.code,{children:"FlightPlanLeg"})]}),"\n",(0,d.jsx)(n.h3,{id:"usesimobsstate",children:"useSimObsState?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"useSimObsState"}),": ",(0,d.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Whether to use the sim's native OBS state. If ",(0,d.jsx)(n.code,{children:"true"}),", then the sim's OBS state as exposed through the event bus\ntopics defined in ",(0,d.jsx)(n.code,{children:"NavEvents"})," will be used, and standard sim OBS key events will be used to control the state. If\n",(0,d.jsx)(n.code,{children:"false"}),", then the OBS state exposed through the event bus topics defined in ",(0,d.jsx)(n.code,{children:"LNavObsEvents"})," will be used, and\ncontrol events defined in ",(0,d.jsx)(n.code,{children:"LNavObsControlEvents"})," will be used to control the state. Defaults to ",(0,d.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,d.jsx)(n.h3,{id:"visualapproachoptions",children:"visualApproachOptions?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"visualApproachOptions"}),": ",(0,d.jsx)(n.code,{children:"Readonly"}),"<",(0,d.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/garminsdk/type-aliases/FmsVisualApproachOptions",children:(0,d.jsx)(n.code,{children:"FmsVisualApproachOptions"})}),">"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Options for visual approach procedures. If not defined, then visual approach fix distances will default to 2.5\nnautical miles for both runway to FINAL and FINAL to STRGHT."}),"\n",(0,d.jsx)(n.h3,{id:"vnavindex",children:"vnavIndex?"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"optional"})," ",(0,d.jsx)(n.strong,{children:"vnavIndex"}),": ",(0,d.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["The index of the VNAV associated with the FMS's flight plans. Defaults to ",(0,d.jsx)(n.code,{children:"0"}),". If a vertical path calculator is\nnot provided to the FMS, then this option will be ignored."]}),"\n",(0,d.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/flightplan/Fms.ts:40"})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return l}});var i=s(667294);let d={},t=i.createContext(d);function l(e){let n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);