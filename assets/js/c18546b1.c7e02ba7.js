"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[57575],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>k});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=r.createContext({}),s=function(e){var a=r.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=s(e.components);return r.createElement(d.Provider,{value:a},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(t),u=n,k=m["".concat(d,".").concat(u)]||m[u]||c[u]||i;return t?r.createElement(k,o(o({ref:a},p),{},{components:t})):r.createElement(k,o({ref:a},p))}));function k(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var d in a)hasOwnProperty.call(a,d)&&(l[d]=a[d]);l.originalType=e,l[m]="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},49075:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(87462),n=(t(67294),t(3905));const i={id:"NavToNavManager2",title:"Interface: NavToNavManager2",sidebar_label:"NavToNavManager2",sidebar_position:0,custom_edit_url:null},o=void 0,l={unversionedId:"framework/interfaces/NavToNavManager2",id:"framework/interfaces/NavToNavManager2",title:"Interface: NavToNavManager2",description:"A manager that handles CDI source switching to a NAV radio source for an autopilot.",source:"@site/docs/framework/interfaces/NavToNavManager2.md",sourceDirName:"framework/interfaces",slug:"/framework/interfaces/NavToNavManager2",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/NavToNavManager2",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"NavToNavManager2",title:"Interface: NavToNavManager2",sidebar_label:"NavToNavManager2",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"NavToNavManager",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/NavToNavManager"},next:{title:"NdbFacility",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/NdbFacility"}},d={},s=[{value:"Properties",id:"properties",level:2},{value:"isNavToNavManager2",id:"isnavtonavmanager2",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"onTransferred",id:"ontransferred",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in-1",level:4},{value:"Methods",id:"methods",level:2},{value:"getArmableLateralMode",id:"getarmablelateralmode",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getArmableNavRadioIndex",id:"getarmablenavradioindex",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"getArmableVerticalMode",id:"getarmableverticalmode",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"isTransferInProgress",id:"istransferinprogress",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"onAfterUpdate",id:"onafterupdate",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"onBeforeUpdate",id:"onbeforeupdate",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-7",level:4}],p={toc:s},m="wrapper";function c(e){let{components:a,...t}=e;return(0,n.kt)(m,(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"A manager that handles CDI source switching to a NAV radio source for an autopilot."),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("h3",{id:"isnavtonavmanager2"},"isNavToNavManager2"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,n.kt)("strong",{parentName:"p"},"isNavToNavManager2"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"true")),(0,n.kt)("p",null,"Flags this object as a NavToNavManager2."),(0,n.kt)("h4",{id:"defined-in"},"Defined in"),(0,n.kt)("p",null,"src/sdk/autopilot/managers/NavToNavManager2.ts:9"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"ontransferred"},"onTransferred"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Optional")," ",(0,n.kt)("strong",{parentName:"p"},"onTransferred"),": (",(0,n.kt)("inlineCode",{parentName:"p"},"activateLateralMode"),": ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/APLateralModes"},(0,n.kt)("inlineCode",{parentName:"a"},"APLateralModes")),", ",(0,n.kt)("inlineCode",{parentName:"p"},"activateVerticalMode"),": ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/APVerticalModes"},(0,n.kt)("inlineCode",{parentName:"a"},"APVerticalModes")),") => ",(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("p",null,"A callback function that is called when this manager has completed a CDI source switch."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Param"))),(0,n.kt)("p",null,"The autopilot lateral mode that can be activated as a result of the CDI source switch."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Param"))),(0,n.kt)("p",null,"The autopilot vertical mode that can be activated as a result of the CDI source\nswitch."),(0,n.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,n.kt)("p",null,"\u25b8 (",(0,n.kt)("inlineCode",{parentName:"p"},"activateLateralMode"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"activateVerticalMode"),"): ",(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("p",null,"A callback function that is called when this manager has completed a CDI source switch."),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"activateLateralMode")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/enums/APLateralModes"},(0,n.kt)("inlineCode",{parentName:"a"},"APLateralModes"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The autopilot lateral mode that can be activated as a result of the CDI source switch.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"activateVerticalMode")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/enums/APVerticalModes"},(0,n.kt)("inlineCode",{parentName:"a"},"APVerticalModes"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The autopilot vertical mode that can be activated as a result of the CDI source switch.")))),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,n.kt)("p",null,"src/sdk/autopilot/managers/NavToNavManager2.ts:17"),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"getarmablelateralmode"},"getArmableLateralMode"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"getArmableLateralMode"),"(): ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/APLateralModes"},(0,n.kt)("inlineCode",{parentName:"a"},"APLateralModes"))),(0,n.kt)("p",null,"Gets the autopilot lateral mode that can be armed while waiting for this manager to switch CDI source, or\n",(0,n.kt)("inlineCode",{parentName:"p"},"APLateralModes.NONE")," if no modes can be armed."),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/APLateralModes"},(0,n.kt)("inlineCode",{parentName:"a"},"APLateralModes"))),(0,n.kt)("p",null,"The autopilot lateral mode that can be armed while waiting for this manager to switch CDI source, or\n",(0,n.kt)("inlineCode",{parentName:"p"},"APLateralModes.NONE")," if no modes can be armed."),(0,n.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,n.kt)("p",null,"src/sdk/autopilot/managers/NavToNavManager2.ts:33"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"getarmablenavradioindex"},"getArmableNavRadioIndex"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"getArmableNavRadioIndex"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"-1")," ","|"," ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules#navradioindex"},(0,n.kt)("inlineCode",{parentName:"a"},"NavRadioIndex"))),(0,n.kt)("p",null,"Gets the index of the NAV radio that can be armed for a CDI source switch by this manager, or ",(0,n.kt)("inlineCode",{parentName:"p"},"-1")," if a CDI source\nswitch cannot be armed."),(0,n.kt)("h4",{id:"returns-2"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"-1")," ","|"," ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules#navradioindex"},(0,n.kt)("inlineCode",{parentName:"a"},"NavRadioIndex"))),(0,n.kt)("p",null,"The index of the NAV radio that can be armed for a CDI source switch by this manager, or ",(0,n.kt)("inlineCode",{parentName:"p"},"-1")," if a CDI\nsource switch cannot be armed."),(0,n.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,n.kt)("p",null,"src/sdk/autopilot/managers/NavToNavManager2.ts:25"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"getarmableverticalmode"},"getArmableVerticalMode"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"getArmableVerticalMode"),"(): ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/APVerticalModes"},(0,n.kt)("inlineCode",{parentName:"a"},"APVerticalModes"))),(0,n.kt)("p",null,"Gets the autopilot vertical mode that can be armed while waiting for this manager to switch CDI source, or\n",(0,n.kt)("inlineCode",{parentName:"p"},"APVerticalModes.NONE")," if no modes can be armed."),(0,n.kt)("h4",{id:"returns-3"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/enums/APVerticalModes"},(0,n.kt)("inlineCode",{parentName:"a"},"APVerticalModes"))),(0,n.kt)("p",null,"The autopilot vertical mode that can be armed while waiting for this manager to switch CDI source, or\n",(0,n.kt)("inlineCode",{parentName:"p"},"APVerticalModes.NONE")," if no modes can be armed."),(0,n.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,n.kt)("p",null,"src/sdk/autopilot/managers/NavToNavManager2.ts:41"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"istransferinprogress"},"isTransferInProgress"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"isTransferInProgress"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Checks whether a CDI source switch initiated by this manager is currently in progress."),(0,n.kt)("h4",{id:"returns-4"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Whether a CDI source switch initiated by this manager is currently in progress."),(0,n.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,n.kt)("p",null,"src/sdk/autopilot/managers/NavToNavManager2.ts:47"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"onafterupdate"},"onAfterUpdate"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"onAfterUpdate"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("p",null,"A method that is called on every autopilot update cycle after the autopilot directors are updated."),(0,n.kt)("h4",{id:"returns-5"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,n.kt)("p",null,"src/sdk/autopilot/managers/NavToNavManager2.ts:57"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"onbeforeupdate"},"onBeforeUpdate"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"onBeforeUpdate"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("p",null,"A method that is called on every autopilot update cycle before the autopilot directors are updated."),(0,n.kt)("h4",{id:"returns-6"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,n.kt)("p",null,"src/sdk/autopilot/managers/NavToNavManager2.ts:52"))}c.isMDXComponent=!0}}]);