"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["61861"],{975183:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>l,default:()=>h,assets:()=>c,toc:()=>a,frontMatter:()=>d});var i=JSON.parse('{"id":"api/framework/type-aliases/SmoothingPathCalculatorOptions","title":"Type Alias: SmoothingPathCalculatorOptions","description":"SmoothingPathCalculatorOptions: object","source":"@site/docs/api/framework/type-aliases/SmoothingPathCalculatorOptions.md","sourceDirName":"api/framework/type-aliases","slug":"/api/framework/type-aliases/SmoothingPathCalculatorOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/SmoothingPathCalculatorOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"SimVarPublisherEntry","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/SimVarPublisherEntry"},"next":{"title":"SoundPacket","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/SoundPacket"}}'),r=t("785893"),s=t("250065");let d={},l="Type Alias: SmoothingPathCalculatorOptions",c={},a=[{value:"Type declaration",id:"type-declaration",level:2},{value:"defaultFpa?",id:"defaultfpa",level:3},{value:"directToLegOffset?",id:"directtolegoffset",level:3},{value:"forceFirstApproachAtConstraint?",id:"forcefirstapproachatconstraint",level:3},{value:"index?",id:"index",level:3},{value:"invalidateClimbConstraint()?",id:"invalidateclimbconstraint",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"invalidateDescentConstraint()?",id:"invalidatedescentconstraint",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"isLegEligible()?",id:"islegeligible",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"maxFpa?",id:"maxfpa",level:3},{value:"minFpa?",id:"minfpa",level:3},{value:"shouldUseConstraint()?",id:"shoulduseconstraint",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in",level:2}];function o(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"type-alias-smoothingpathcalculatoroptions",children:"Type Alias: SmoothingPathCalculatorOptions"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"SmoothingPathCalculatorOptions"}),": ",(0,r.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Options for a SmoothingPathCalculator."}),"\n",(0,r.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsx)(n.h3,{id:"defaultfpa",children:"defaultFpa?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"defaultFpa"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The default flight path angle, in degrees, for descent paths. Increasingly positive values indicate steeper\ndescents. Defaults to 3 degrees."}),"\n",(0,r.jsx)(n.h3,{id:"directtolegoffset",children:"directToLegOffset?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"directToLegOffset"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The index offset of a lateral direct-to leg from its direct-to target leg. Defaults to ",(0,r.jsx)(n.code,{children:"3"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"forcefirstapproachatconstraint",children:"forceFirstApproachAtConstraint?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"forceFirstApproachAtConstraint"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Whether to force the first constraint in the approach to an AT constraint. Defaults to ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"index",children:"index?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"index"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The VNAV index to assign to the path calculator. The VNAV index determines the index of the control events used\nto control the calculator. Defaults to ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"invalidateclimbconstraint",children:"invalidateClimbConstraint()?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"invalidateClimbConstraint"}),": (",(0,r.jsx)(n.code,{children:"constraint"}),", ",(0,r.jsx)(n.code,{children:"index"}),", ",(0,r.jsx)(n.code,{children:"constraints"}),", ",(0,r.jsx)(n.code,{children:"firstDescentConstraintIndex"}),", ",(0,r.jsx)(n.code,{children:"priorMinAltitude"}),", ",(0,r.jsx)(n.code,{children:"priorMaxAltitude"}),") => ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A function which checks whether a climb constraint should be invalidated. Invalidated constraints will not appear\nin the vertical flight plan. If not defined, no climb constraints will be invalidated."}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"constraint"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/VNavConstraint",children:(0,r.jsx)(n.code,{children:"VNavConstraint"})})}),(0,r.jsx)(n.td,{children:"A descent constraint."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"index"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The index of the constraint to check."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"constraints"})}),(0,r.jsxs)(n.td,{children:["readonly ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/VNavConstraint",children:(0,r.jsx)(n.code,{children:"VNavConstraint"})}),"[]"]}),(0,r.jsx)(n.td,{children:"The array of VNAV constraints currently in the vertical flight plan."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"firstDescentConstraintIndex"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The index of the first descent constraint in the vertical flight plan, if one exists."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"priorMinAltitude"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The most recent minimum altitude, in meters, defined by a VNAV constraint prior to the constraint to check. Only prior constraints connected to the constraint to check by a contiguous sequence of constraints of the same category (climb or missed approach) are included."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"priorMaxAltitude"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The most recent maximum altitude, in meters, defined by a VNAV constraint prior to the constraint to check. Only prior constraints connected to the constraint to check by a contiguous sequence of constraints of the same category (climb or missed approach) are included."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.p,{children:"Whether the specified climb constraint should be invalidated."}),"\n",(0,r.jsx)(n.h3,{id:"invalidatedescentconstraint",children:"invalidateDescentConstraint()?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"invalidateDescentConstraint"}),": (",(0,r.jsx)(n.code,{children:"constraint"}),", ",(0,r.jsx)(n.code,{children:"index"}),", ",(0,r.jsx)(n.code,{children:"constraints"}),", ",(0,r.jsx)(n.code,{children:"priorMinAltitude"}),", ",(0,r.jsx)(n.code,{children:"priorMaxAltitude"}),", ",(0,r.jsx)(n.code,{children:"requiredFpa"}),", ",(0,r.jsx)(n.code,{children:"maxFpa"}),") => ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A function which checks whether a descent constraint should be invalidated. Invalidated constraints will not\nappear in the vertical flight plan. If not defined, no descent constraints will be invalidated."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"constraint"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/VNavConstraint",children:(0,r.jsx)(n.code,{children:"VNavConstraint"})})}),(0,r.jsx)(n.td,{children:"A descent constraint."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"index"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The index of the constraint to check."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"constraints"})}),(0,r.jsxs)(n.td,{children:["readonly ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/VNavConstraint",children:(0,r.jsx)(n.code,{children:"VNavConstraint"})}),"[]"]}),(0,r.jsx)(n.td,{children:"The array of VNAV constraints currently in the vertical flight plan."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"priorMinAltitude"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The most recent minimum altitude, in meters, defined by a VNAV constraint prior to the constraint to check. Only prior constraints connected to the constraint to check by a contiguous sequence of descent constraints are included."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"priorMaxAltitude"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The most recent maximum altitude, in meters, defined by a VNAV constraint prior to the constraint to check. Only prior constraints connected to the constraint to check by a contiguous sequence of descent constraints are included."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"requiredFpa"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The minimum flight path angle, in degrees, required to meet the maximum altitude of the constraint to check, assuming a descent starting from the constraint defining the most recent prior minimum altitude. Positive values indicate a descending path. If there is no required FPA because there is no defined prior minimum altitude or maximum altitude for the constraint to check, or if the constraint to check is higher than the prior minimum altitude, then this value will equal zero."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"maxFpa"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The maximum allowed flight path angle, in degrees. Positive values indicate a descending path."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.p,{children:"Whether the specified descent constraint should be invalidated."}),"\n",(0,r.jsx)(n.h3,{id:"islegeligible",children:"isLegEligible()?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"isLegEligible"}),": (",(0,r.jsx)(n.code,{children:"lateralLeg"}),") => ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A function which checks whether a lateral flight plan leg is eligible for VNAV. VNAV descent paths will not be\ncalculated through VNAV-ineligible legs. If not defined, a leg will be considered eligible if and only if it\ndoes not contain a discontinuity."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lateralLeg"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/LegDefinition",children:(0,r.jsx)(n.code,{children:"LegDefinition"})})})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.h3,{id:"maxfpa",children:"maxFpa?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"maxFpa"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The maximum allowed flight path angle, in degrees, for descent paths. Increasingly positive values indicate\nsteeper descents. Paths that require angles greater than the maximum value will have their FPAs clamped to the\nmaximum value, even if this would create a discontinuity in the vertical profile. Defaults to 6 degrees."}),"\n",(0,r.jsx)(n.h3,{id:"minfpa",children:"minFpa?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"minFpa"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The minimum allowed flight path angle, in degrees, for descent paths. Increasingly positive values indicate\nsteeper descents. Paths that require angles less than the minimum value will be assigned the default flight path\nangle instead to create a step-down descent. Vertical direct-to paths are exempt from the minimum FPA requirement.\nDefaults to 1.5 degrees."}),"\n",(0,r.jsx)(n.h3,{id:"shoulduseconstraint",children:"shouldUseConstraint()?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"shouldUseConstraint"}),": (",(0,r.jsx)(n.code,{children:"lateralPlan"}),", ",(0,r.jsx)(n.code,{children:"lateralLeg"}),", ",(0,r.jsx)(n.code,{children:"globalLegIndex"}),", ",(0,r.jsx)(n.code,{children:"segment"}),", ",(0,r.jsx)(n.code,{children:"segmentLegIndex"}),") => ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A function which checks whether an altitude constraint defined for a lateral flight plan leg should be used for\nVNAV. If not defined, all constraints will be used."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lateralPlan"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlan",children:(0,r.jsx)(n.code,{children:"FlightPlan"})})}),(0,r.jsx)(n.td,{children:"The lateral flight plan that hosts the altitude constraint."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lateralLeg"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/LegDefinition",children:(0,r.jsx)(n.code,{children:"LegDefinition"})})}),(0,r.jsx)(n.td,{children:"The lateral flight plan leg that hosts the altitude constraint."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"globalLegIndex"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The global index of the lateral flight plan leg that hosts the altitude constraint."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"segment"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanSegment",children:(0,r.jsx)(n.code,{children:"FlightPlanSegment"})})}),(0,r.jsx)(n.td,{children:"The lateral flight plan segment containing the flight plan leg that hosts the altitude constraint."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"segmentLegIndex"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The index of the lateral flight plan leg that hosts the altitude constraint in its containing segment."})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"boolean"})}),"\n",(0,r.jsx)(n.p,{children:"Whether the altitude constraint defined for the specified lateral flight plan leg should be used for\nVNAV."}),"\n",(0,r.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(n.p,{children:"src/sdk/autopilot/calculators/SmoothingPathCalculator.ts:20"})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return d}});var i=t(667294);let r={},s=i.createContext(r);function d(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);