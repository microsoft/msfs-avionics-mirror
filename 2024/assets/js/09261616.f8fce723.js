"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["533604"],{799238:function(e,t,i){i.r(t),i.d(t,{metadata:()=>n,contentTitle:()=>l,default:()=>h,assets:()=>a,toc:()=>d,frontMatter:()=>s});var n=JSON.parse('{"id":"g3000/features/autopilot","title":"G3000 Autopilot","description":"Introduction","source":"@site/docs/g3000/features/autopilot.md","sourceDirName":"g3000/features","slug":"/g3000/features/autopilot","permalink":"/msfs-avionics-mirror/2024/docs/g3000/features/autopilot","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Autopilot","sidebar_position":1},"sidebar":"sidebar","previous":{"title":"H Event List","permalink":"/msfs-avionics-mirror/2024/docs/g3000/h-event-list"},"next":{"title":"ESP","permalink":"/msfs-avionics-mirror/2024/docs/g3000/features/esp"}}'),o=i("785893"),r=i("250065");let s={sidebar_label:"Autopilot",sidebar_position:1},l="G3000 Autopilot",a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"<code>systems.cfg</code> Customization",id:"systemscfg-customization",level:2},{value:"Enabling the Sim Autopilot",id:"enabling-the-sim-autopilot",level:3},{value:"Pitch/Roll PIDs",id:"pitchroll-pids",level:3},{value:"Additional Pitch/Roll Tuning",id:"additional-pitchroll-tuning",level:3},{value:"Vertical Speed Reference",id:"vertical-speed-reference",level:3},{value:"Airspeed Reference",id:"airspeed-reference",level:3},{value:"<code>panel.xml</code> Customization",id:"panelxml-customization",level:2},{value:"Selected Altitude Reference",id:"selected-altitude-reference",level:3},{value:"Plugin Customization",id:"plugin-customization",level:2},{value:"Flight Director Mode Injection",id:"flight-director-mode-injection",level:3}];function c(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"g3000-autopilot",children:"G3000 Autopilot"})}),"\n",(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(t.p,{children:"By default, the G3000 includes an autopilot simulation that aims to replicate the behavior of the real-world Garmin GFC 500/700 (and related) autopilots. Many aspects of this autopilot simulation can be customized to suit a particular aircraft installation."}),"\n",(0,o.jsx)(t.p,{children:"There are three avenues with which you can customize the autopilot:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"systems.cfg"})," file"]}),"\n",(0,o.jsxs)(t.li,{children:["Airplane ",(0,o.jsx)(t.code,{children:"panel.xml"})," file"]}),"\n",(0,o.jsx)(t.li,{children:"Plugins"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"The following sections describe how to customize the autopilot using each of the three avenues."}),"\n",(0,o.jsxs)(t.h2,{id:"systemscfg-customization",children:[(0,o.jsx)(t.code,{children:"systems.cfg"})," Customization"]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.a,{href:"https://docs.flightsimulator.com/msfs2024/html/5_Content_Configuration/CFG_Files/systems_cfg.htm",children:(0,o.jsx)(t.code,{children:"systems.cfg"})})," file is used to enable the sim autopilot (required for the G3000 autopilot simulation to function) and to set up some basic autopilot parameters. All autopilot customization is done in the ",(0,o.jsx)(t.code,{children:"[AUTOPILOT]"})," section."]}),"\n",(0,o.jsxs)(t.p,{children:["While there are many parameters under the ",(0,o.jsx)(t.code,{children:"[AUTOPILOT]"})," section that are listed in the MSFS SDK documentation, only a subset of them are relevant for customizing the G3000 autopilot. This is because the G3000 uses the sim's ",(0,o.jsx)(t.strong,{children:"Avionics Managed Mode"})," feature to override many of the sim's autopilot functions."]}),"\n",(0,o.jsxs)(t.p,{children:["The following subsections describe all of the ",(0,o.jsx)(t.code,{children:"systems.cfg"})," parameters that can be used to customize the G3000 autopilot. If a parameter is not included below, then under most circumstances it should be omitted from the file in order to revert it to its default value."]}),"\n",(0,o.jsx)(t.h3,{id:"enabling-the-sim-autopilot",children:"Enabling the Sim Autopilot"}),"\n",(0,o.jsxs)(t.p,{children:["First, the ",(0,o.jsx)(t.code,{children:"autopilot_available"})," and ",(0,o.jsx)(t.code,{children:"flight_director_available"})," parameters ",(0,o.jsx)(t.strong,{children:"must"})," be set to 1. This will enable the sim's autopilot and flight director functions. Second, the ",(0,o.jsx)(t.code,{children:"autothrottle_available"})," parameter ",(0,o.jsx)(t.strong,{children:"must"})," be set to 0. If you wish to add an autothrottle system to a plane, you should implement the autothrottle using plugins."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"[AUTOPILOT]\r\nautopilot_available = 1\r\nflight_director_available = 1\r\nautothrottle_available = 0\n"})}),"\n",(0,o.jsxs)(t.p,{children:["These are the only ",(0,o.jsx)(t.em,{children:"required"})," parameters to set in ",(0,o.jsx)(t.code,{children:"systems.cfg"})," for the G3000 autopilot to function, but it is highly recommended to set some or all of the additional parameters described in the following subsections."]}),"\n",(0,o.jsx)(t.h3,{id:"pitchroll-pids",children:"Pitch/Roll PIDs"}),"\n",(0,o.jsxs)(t.p,{children:["The following parameters tune the ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Proportional%E2%80%93integral%E2%80%93derivative_controller",children:"PID controllers"})," that adjust the aircraft's pitch and roll to track the flight director's commands when the autopilot is active:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_pid_max_I_accumulation"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_proportional_control"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_integrator_control"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_derivative_control"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_integrator_boundary"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_derivative_boundary"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"roll_pid_max_I_accumulation"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"roll_proportional_control"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"roll_integrator_control"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"roll_derivative_control"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"roll_integrator_boundary"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"roll_derivative_boundary"})}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"An explanation for how to tune PIDs is beyond the scope of this documentation, but in short these parameters should be manually tuned until the autopilot is able to track the flight director accurately without too much delay and without too much overshoot/oscillation."}),"\n",(0,o.jsx)(t.p,{children:"In addition to the above parameters, the following two parameters control how the autopilot behaves when switched from the OFF state to the ON state:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_pid_reset_mode"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"roll_pid_reset_mode"})}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["For more information on the specifics of how these two parameters work, please refer to the MSFS SDK documentation. However, it is ",(0,o.jsx)(t.strong,{children:"highly recommended"})," to set both of them to 2:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"pitch_pid_reset_mode = 2\r\nroll_pid_reset_mode = 2\n"})}),"\n",(0,o.jsx)(t.h3,{id:"additional-pitchroll-tuning",children:"Additional Pitch/Roll Tuning"}),"\n",(0,o.jsx)(t.p,{children:"The following parameters allow for additional turning of pitch and roll behavior:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_use_trim"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"pitch_use_elevator_only"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_pitch"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_pitch_acceleration"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_pitch_velocity_lo_alt"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_pitch_velocity_hi_alt"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_pitch_velocity_lo_alt_breakpoint"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_pitch_velocity_hi_alt_breakpoint"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_bank"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_bank_acceleration"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_bank_velocity"})}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"For more information on the specifics of how these parameters work, please refer to the MSFS SDK documentation."}),"\n",(0,o.jsxs)(t.p,{children:["Note that when configuring the ",(0,o.jsx)(t.code,{children:"max_bank"})," parameter, the limit should be set to the largest bank angle that can ever be commanded by any flight director mode. Bank angle limits for individual flight director modes are configured using ",(0,o.jsx)(t.code,{children:"panel.xml"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Additionally, the G3000 autopilot supports what Garmin calls Low Bank Mode. The G3000 uses the sim's Max Bank ID feature under the hood to implement Low Bank Mode. Max Bank ID 1 is used when Low Bank Mode is active, and Max Bank ID 0 is used when Low Bank Mode is not active. The bank angle limits for Low Bank Mode are configured in ",(0,o.jsx)(t.code,{children:"panel.xml"}),", and so should ",(0,o.jsx)(t.strong,{children:"not"})," be configured here in ",(0,o.jsx)(t.code,{children:"systems.cfg"}),"."]}),"\n",(0,o.jsx)(t.h3,{id:"vertical-speed-reference",children:"Vertical Speed Reference"}),"\n",(0,o.jsx)(t.p,{children:"The following parameters control the minimum and maximum values that can be set as the vertical speed reference when the flight director's vertical speed (VS) mode is active:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"min_vertical_speed_ref"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_vertical_speed_ref"})}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Both parameters take values in units of feet per minute. The limits default to -9900 FPM to 9900 FPM if not explicitly defined."}),"\n",(0,o.jsx)(t.h3,{id:"airspeed-reference",children:"Airspeed Reference"}),"\n",(0,o.jsx)(t.p,{children:"If the airplane does not have an autothrottle, then the airspeed reference is typically only used when the flight director's flight level change (FLC) mode is active. If the airplane does have an autothrottle, then the airspeed reference can also be used to set the autothrottle's speed target."}),"\n",(0,o.jsx)(t.p,{children:"The following parameters control the minimum and maximum values that can be set as the airspeed reference:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"min_IAS_ref"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_IAS_ref"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"min_Mach_ref"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.code,{children:"max_Mach_ref"})}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["The G3000 supports both manual and FMS speed modes. The above parameters control the limits for ",(0,o.jsx)(t.strong,{children:"both"})," speed modes."]})}),"\n",(0,o.jsx)(t.p,{children:"If more complicated logic is required for the airspeed reference limits (e.g. setting dynamic limits), then this logic should be implemented using plugins, and the above parameters should be set to the absolute minimum/maximum limits that are applied under any conditions."}),"\n",(0,o.jsxs)(t.h2,{id:"panelxml-customization",children:[(0,o.jsx)(t.code,{children:"panel.xml"})," Customization"]}),"\n",(0,o.jsxs)(t.p,{children:["Customization of additional G3000-specific autopilot parameters can be done via ",(0,o.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-basics",children:(0,o.jsx)(t.code,{children:"panel.xml"})}),". These parameters are defined using the ",(0,o.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-tag-documentation#autopilot",children:(0,o.jsx)(t.code,{children:"<Autopilot>"})})," tag. Please refer to the tag documentation for a listing of all the available customization options and details on how to use them."]}),"\n",(0,o.jsxs)(t.p,{children:["The following subsections provide additional context for some of the customization options found in ",(0,o.jsx)(t.code,{children:"panel.xml"}),"."]}),"\n",(0,o.jsx)(t.h3,{id:"selected-altitude-reference",children:"Selected Altitude Reference"}),"\n",(0,o.jsxs)(t.p,{children:["By default, the G3000 supports input acceleration for changing the selected altitude reference. Input acceleration can be triggered when the G3000 receives the ",(0,o.jsx)(t.code,{children:"AP_ALT_VAR_DEC"})," or ",(0,o.jsx)(t.code,{children:"AP_ALT_VAR_INC"})," key events with zero as the first parameter. If these key events are received with a non-zero value as the first parameter, then input acceleration will not be triggered. Key events that ",(0,o.jsx)(t.em,{children:"set"})," the selected altitude reference to a specific value never trigger input acceleration."]}),"\n",(0,o.jsx)(t.p,{children:"When the rate of received key events eligible for input acceleration exceeds a threshold value, the observed input rate is transformed into an accelerated input rate. The selected altitude reference is then changed using the accelerated input rate rather than the observed input rate. The accelerated input rate is capped to an asymptotic maximum value. The accelerated input rate will never exceed this maximum value, no matter how high the observed input rate is."}),"\n",(0,o.jsx)(t.p,{children:"By default, the threshold input rate to trigger acceleration is 5 inputs per second. The maximum accelerated input rate is 50 inputs per second. The accelerated input rate reaches 99% of the maximum value at an observed input rate of 13.3 inputs per second."}),"\n",(0,o.jsxs)(t.p,{children:["It is recommended to use the default configuration for input acceleration, since it has been tuned to give good results. However, you can also customize the behavior using the ",(0,o.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-tag-documentation#altsel",children:(0,o.jsx)(t.code,{children:"<AltSel>"})})," tag."]}),"\n",(0,o.jsx)(t.h2,{id:"plugin-customization",children:"Plugin Customization"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/plugin-basics",children:"Plugins"})," can be used to define or add certain complex behaviors to the G3000 autopilot. This is done by returning an instance of ",(0,o.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000mfd/interfaces/G3000AutopilotPluginOptions",children:(0,o.jsx)(t.code,{children:"G3000AutopilotPluginOptions"})})," from the MFD plugin's ",(0,o.jsxs)(t.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/mfd-plugins#autopilot-customization",children:[(0,o.jsx)(t.code,{children:"getAutopilotOptions()"})," method"]}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["The following subsections describe what can be customized using ",(0,o.jsx)(t.code,{children:"G3000AutopilotPluginOptions"}),"."]}),"\n",(0,o.jsx)(t.h3,{id:"flight-director-mode-injection",children:"Flight Director Mode Injection"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"G3000AutopilotPluginOptions"})," can be used to inject additional flight director modes to the autopilot beyond the standard suite of modes that is included by default. You can only inject additional modes; you cannot replace or override any of the standard modes."]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["The standard modes that cannot be replaced can be accessed from ",(0,o.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/classes/G3000AutopilotUtils",children:(0,o.jsx)(t.code,{children:"G3000AutopilotUtils"})})," - specifically from the ",(0,o.jsx)(t.code,{children:"RESTRICTED_LATERAL_MODES"})," and ",(0,o.jsx)(t.code,{children:"RESTRICTED_VERTICAL_MODES"})," static properties."]})}),"\n",(0,o.jsxs)(t.p,{children:["To define additional modes to inject, use the optional ",(0,o.jsx)(t.code,{children:"createAdditionalLateralDirectors()"})," and ",(0,o.jsx)(t.code,{children:"createAdditionalVerticalDirectors()"})," methods on ",(0,o.jsx)(t.code,{children:"G3000AutopilotPluginOptions"}),". Both methods should return an iterable of ",(0,o.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000mfd/type-aliases/G3000AutopilotAdditionalDirectorEntry",children:(0,o.jsx)(t.code,{children:"G3000AutopilotAdditionalDirectorEntry"})}),". Each entry defines one flight director mode to inject and a factory that creates the ",(0,o.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/PlaneDirector",children:(0,o.jsx)(t.code,{children:"PlaneDirector"})})," to use for the mode."]}),"\n",(0,o.jsx)(t.p,{children:"The following code shows an example of how to use a plugin to inject additional flight director modes."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { APValues, registerPlugin } from '@microsoft/msfs-sdk';\r\nimport { AbstractG3000MfdPlugin, G3000AutopilotPluginOptions } from '@microsoft/msfs-wtg3000-mfd';\r\n\r\n// When defining your custom flight director modes, it is recommended to choose values (numbers)\r\n// that are sufficiently different from the standard mode values to reduce the chances of conflicts\r\n// in case more standard modes are added in the future.\r\n\r\nenum MyAPLateralModes {\r\n  EXAMPLE1 = 1000,\r\n  EXAMPLE2 = 1001,\r\n}\r\n\r\nenum MyAPVerticalModes {\r\n  EXAMPLE1 = 1000,\r\n  EXAMPLE2 = 1001,\r\n}\r\n\r\nclass MyAutopilotMfdPlugin extends AbstractG3000MfdPlugin {\r\n\r\n  public getAutopilotOptions(): G3000AutopilotPluginOptions {\r\n    return {\r\n      createAdditionalLateralDirectors: () => {\r\n        return [\r\n          {\r\n            mode: MyAPLateralModes.EXAMPLE1,\r\n            directorFactory: (apValues: APValues) => new MyLateralDirector(apValues)\r\n          },\r\n          {\r\n            mode: MyAPLateralModes.EXAMPLE2,\r\n            directorFactory: (apValues: APValues) => new MyOtherLateralDirector(apValues)\r\n          }\r\n        ];\r\n      },\r\n\r\n      createAdditionalVerticalDirectors: () => {\r\n        return [\r\n          {\r\n            mode: MyAPVerticalModes.EXAMPLE1,\r\n            directorFactory: (apValues: APValues) => new MyVerticalDirector(apValues)\r\n          },\r\n          {\r\n            mode: MyAPVerticalModes.EXAMPLE2,\r\n            directorFactory: (apValues: APValues) => new MyOtherVerticalDirector(apValues)\r\n          }\r\n        ];\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n\r\nregisterPlugin(MyAutopilotMfdPlugin);\n"})}),"\n",(0,o.jsx)(t.p,{children:"Multiple plugins can each inject their own set of additional flight director modes. If more than one plugin attempts to inject the same mode, then the plugin that was loaded last has priority and will preempt the other plugins' attempt to inject the mode. Directors for preempted modes are not instantiated - in other words if an additional mode director is instantiated, then it is guaranteed to be added to the autopilot."}),"\n",(0,o.jsxs)(t.p,{children:["Any additional flight director modes injected into the autopilot will never be armed or activated by any base G3000 autopilot logic. This means that the only way to arm or activate an injected mode is to directly call the ",(0,o.jsx)(t.code,{children:"arm()"})," or ",(0,o.jsx)(t.code,{children:"activate()"})," methods on the mode's ",(0,o.jsx)(t.code,{children:"PlaneDirector"}),". Additionally, all ",(0,o.jsx)(t.code,{children:"PlaneDirector"})," instances for injected modes ",(0,o.jsx)(t.strong,{children:"must"})," call their ",(0,o.jsx)(t.code,{children:"onArm()"})," and ",(0,o.jsx)(t.code,{children:"onActivate()"})," callbacks at the appropriate times if the callback functions are defined."]}),"\n",(0,o.jsxs)(t.p,{children:["You may also choose to define how injected flight director modes are annunciated in the PFD AFCS status box. By default, any additional modes are not annunciated (they are labeled using the empty string). To define labels for injected modes, use the PFD plugin's ",(0,o.jsxs)(t.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/pfd-plugins#afcs-status-box-customization",children:[(0,o.jsx)(t.code,{children:"getAfcsStatusBoxOptions()"})," method"]}),". If more than one plugin attempts to define labels for the same mode, then the labels defined by the plugin that was loaded last will be used."]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsx)(t.p,{children:"You can only define labels for additional injected modes. You cannot override the labels for any of the standard modes."})}),"\n",(0,o.jsx)(t.p,{children:"The following code shows how to use a plugin to define custom labels for the additional flight director modes used in the example above."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { registerPlugin } from '@microsoft/msfs-sdk';\r\n\r\nimport { AbstractG3000PfdPlugin, AfcsStatusBoxPluginOptions } from '@microsoft/msfs-wtg3000-pfd';\r\n\r\nexport class MyAutopilotPfdPlugin extends AbstractG3000PfdPlugin {\r\n\r\n  public getAfcsStatusBoxOptions(): AfcsStatusBoxPluginOptions {\r\n    return {\r\n      getAdditionalLateralModeLabels: () => {\r\n        return [\r\n          {\r\n            mode: MyAPLateralModes.EXAMPLE1,\r\n            activeLabel: 'EX1',\r\n            armedLabel: 'EX1'\r\n          },\r\n          {\r\n            mode: MyAPLateralModes.EXAMPLE2,\r\n            activeLabel: 'EX2',\r\n            armedLabel: 'EX2'\r\n          }\r\n        ];\r\n      },\r\n\r\n      getAdditionalVerticalModeLabels: () => {\r\n        return [\r\n          {\r\n            mode: MyAPVerticalModes.EXAMPLE1,\r\n            activeLabel: 'EX1',\r\n            armedLabel: 'EX1'\r\n          },\r\n          {\r\n            mode: MyAPVerticalModes.EXAMPLE2,\r\n            activeLabel: 'EX2',\r\n            armedLabel: 'EX2'\r\n          }\r\n        ];\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n\r\nregisterPlugin(MyAutopilotPfdPlugin);\n"})})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},250065:function(e,t,i){i.d(t,{Z:function(){return l},a:function(){return s}});var n=i(667294);let o={},r=n.createContext(o);function s(e){let t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);