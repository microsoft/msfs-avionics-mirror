"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[75332],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,f=c["".concat(l,".").concat(u)]||c[u]||m[u]||r;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},50300:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_label:"Displaying and Managing Data in Components",sidebar_position:5},o="Displaying and Managing Data in Components",s={unversionedId:"fmc/displaying-and-managing-data-in-components",id:"fmc/displaying-and-managing-data-in-components",title:"Displaying and Managing Data in Components",description:"Formatting data for render",source:"@site/docs/fmc/displaying-and-managing-data-in-components.md",sourceDirName:"fmc",slug:"/fmc/displaying-and-managing-data-in-components",permalink:"/msfs-avionics-mirror/docs/fmc/displaying-and-managing-data-in-components",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Displaying and Managing Data in Components",sidebar_position:5},sidebar:"sidebar",previous:{title:"Creating Your First Page",permalink:"/msfs-avionics-mirror/docs/fmc/creating-your-first-page"},next:{title:"Interaction with Components",permalink:"/msfs-avionics-mirror/docs/fmc/interaction-with-components"}},l={},p=[{value:"Formatting data for render",id:"formatting-data-for-render",level:2},{value:"Accepting input data",id:"accepting-input-data",level:2},{value:"Data Binding",id:"data-binding",level:2},{value:"One-way binding",id:"one-way-binding",level:3},{value:"Two-way binding",id:"two-way-binding",level:3}],d={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"displaying-and-managing-data-in-components"},"Displaying and Managing Data in Components"),(0,i.kt)("h2",{id:"formatting-data-for-render"},"Formatting data for render"),(0,i.kt)("p",null,"Any component extending ",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/classes/DisplayField"},(0,i.kt)("inlineCode",{parentName:"a"},"DisplayField")),' keeps\ntrack of a "current value". This value is stored internally in the component, but is not manually accessible. Values can be edited in\ntwo ways - the ',(0,i.kt)("inlineCode",{parentName:"p"},"takeValue")," method of ",(0,i.kt)("inlineCode",{parentName:"p"},"DisplayField"),", or via ",(0,i.kt)("a",{parentName:"p",href:"#data-binding"},"data binding"),". Because fields are initialized without an existing\nvalue, ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," is always a valid type to pass into ",(0,i.kt)("inlineCode",{parentName:"p"},"takeValue"),"."),(0,i.kt)("p",null,"Whenever the field receives a new value, it must render it for output to the screen. There is no default rendering behaviour, and therefore, a formatter must be specified in the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," object of a ",(0,i.kt)("inlineCode",{parentName:"p"},"DisplayField<T>"),"\n(see ",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/interfaces/DisplayFieldOptions"},(0,i.kt)("inlineCode",{parentName:"a"},"DisplayFieldOptions")),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const FieldA = new DisplayField<T>(this, {\n  formatter: {\n    // This is automatically picked if the value is `null` - it is optional, and defaults to an empty string.\n    nullValueString: 'NULL',\n\n    // This function is called when the value is **not** `null` - it is not optional, and can return either\n    // a string or an FmcRenderTemplate. This function takes `T`, because `nullValueString` handles\n    // the `null` case.\n    format(value: T): FmcFormatterOutput {\n      return value.someOperation();\n    },\n  },\n})\n\nconst FieldB = new DisplayField<T>(this, {\n  formatter: (value: T | null) => 'HELLO', // alternatively, a function taking `T | null` can be specified instead of an object\n})\n\nconst FieldC = new DisplayField<T>(this, {\n  formatter: RawFormatter, // a very basic formatter which calls `toString()` is available\n                           // for `string | number` types\n})\n")),(0,i.kt)("h2",{id:"accepting-input-data"},"Accepting input data"),(0,i.kt)("p",null,"Any component extending ",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/classes/EditableField"},(0,i.kt)("inlineCode",{parentName:"a"},"EditableField"))," can\noutput a value. The type of this value is by default the same as the input type, but this can be changed by specifying two type parameters."),(0,i.kt)("p",null,"This relies on another interface, ",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/interfaces/Validator"},(0,i.kt)("inlineCode",{parentName:"a"},"Validator<T>")),"\n(where ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," is the component's output type), with a single method, ",(0,i.kt)("inlineCode",{parentName:"p"},"parse(input: string): T | null"),". This parsing method will convert any\nuser input into the value specified by type ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," if the input is invalid. User input can be provided in two ways - the ",(0,i.kt)("inlineCode",{parentName:"p"},"takeTextInput")," method\nof ",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/classes/TextInputField"},(0,i.kt)("inlineCode",{parentName:"a"},"TextInputField")),", or via a ",(0,i.kt)("a",{parentName:"p",href:"#"},"scratchpad"),"."),(0,i.kt)("p",null,"These components expect this interface to be implemented on the same object that is passed as the formatter - this also means they cannot\naccept a single function instead of the formatter object."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It is good practice to create avionics-specific formatters implementing\n",(0,i.kt)("a",{parentName:"p",href:"/docs/framework/modules#fmcformatter"},(0,i.kt)("inlineCode",{parentName:"a"},"FmcFormatter<T>"))," to share formatters between fields that\nhave similar data input/output formats. Likewise, you can also implement common parsers that implement ",(0,i.kt)("inlineCode",{parentName:"p"},"Validator<T>"),".")),(0,i.kt)("h2",{id:"data-binding"},"Data Binding"),(0,i.kt)("p",null,"One of the major features of components is their ability to automatically render data they are bound to. This is done using\nthe generic subscribable facilities found in the SDK - about which more can be read in\nthe ",(0,i.kt)("a",{parentName:"p",href:"/docs/subscriptions/intro-to-subscriptions"},(0,i.kt)("inlineCode",{parentName:"a"},"Subscriptions"))," section."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"All data binding methods available on components exported by the SDK automatically manage the lifetime of the subscriptions\nthey create. This is done using the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/fmc/page-lifecycle#binding-subscriptions-to-the-pages-lifecycle"},"page-bound subscription lifecycle management")," feature.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"However"),", if you pass in a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subscribable")," that is itself a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subscription")," (such as a ",(0,i.kt)("inlineCode",{parentName:"p"},"MappedSubject"),"), it will ",(0,i.kt)("em",{parentName:"p"},"not")," be bound to the page's\nlifecycle automatically. This is because it would be undesirable, in most cases, to pause a ",(0,i.kt)("inlineCode",{parentName:"p"},"MappedSubject")," that may very well come from a data provider\nlocated outside the page class."),(0,i.kt)("p",{parentName:"admonition"},"Therefore, it is important to take this into account to avoid potential memory leaks or unnecessary computation.")),(0,i.kt)("h3",{id:"one-way-binding"},"One-way binding"),(0,i.kt)("p",null,"This ability is introduced by the ",(0,i.kt)("inlineCode",{parentName:"p"},"DisplayField")," class's ",(0,i.kt)("inlineCode",{parentName:"p"},"bind()")," method. Any ",(0,i.kt)("inlineCode",{parentName:"p"},"Subcribable")," passed into it will be subscribed to in order to update the\nvalue the field is displaying."),(0,i.kt)("p",null,"Whenever said value changes, the formatter that is configured on the field is called to generate a new string to render."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const data = Subject.create(0);\n\nconst FieldA = new DisplayField(this, {\n  formatter: (value) => value.toFixed(1),\n}).bind(data);\n\ndata.set(1);   // Field outputs `1.0`\ndata.set(2);   // Field outputs `2.0`\ndata.set(3.4); // Field outputs `3.4`\n")),(0,i.kt)("h3",{id:"two-way-binding"},"Two-way binding"),(0,i.kt)("p",null,"If a ",(0,i.kt)("inlineCode",{parentName:"p"},"MutableSubscribable")," is passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"bind()")," method of an ",(0,i.kt)("inlineCode",{parentName:"p"},"EditableField"),", the output of that component is automatically piped\ninto it. Note that this only works if the output type of a component is the same as its input type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const data = Subject.create(0);\n\nconst FieldA = new TextInputField(this, {\n  formatter: {\n    format: (value) => value.toFixed(1),\n\n    parse(input: string): number {\n      const int = parseInt(input);\n\n      if (!Number.isFinite(int)) {\n        return null;\n      }\n\n      return int;\n    },\n  },\n}).bind(data);\n\n// *user types 1 into the field* -> `data` becomes 1, field displays `1.0`\n// *user types 2 into the field* -> `data` becomes 2, field displays `2.0`\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This behavior can be undesirable in certain cases - if there is a special process involved in modifying the data, add an ",(0,i.kt)("inlineCode",{parentName:"p"},"onModified")," callback, and\nreturn ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". This will prevent the default behavior from running.")),(0,i.kt)("p",null,"Read more about the different interaction callbacks in ",(0,i.kt)("a",{parentName:"p",href:"/docs/fmc/interaction-with-components"},"Interaction with Components"),"."))}m.isMDXComponent=!0}}]);