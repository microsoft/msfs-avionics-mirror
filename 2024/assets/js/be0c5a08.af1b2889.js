"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["954790"],{503971:function(e,n,r){r.r(n),r.d(n,{metadata:()=>d,contentTitle:()=>c,default:()=>a,assets:()=>h,toc:()=>l,frontMatter:()=>s});var d=JSON.parse('{"id":"api/framework/classes/FlightPlanRouteManager","title":"Class: FlightPlanRouteManager","description":"A manager for working with flight plan routes. The manager can be used to send or retrieve routes. It also","source":"@site/docs/api/framework/classes/FlightPlanRouteManager.md","sourceDirName":"api/framework/classes","slug":"/api/framework/classes/FlightPlanRouteManager","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanRouteManager","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"FlightPlanPredictorUtils","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanPredictorUtils"},"next":{"title":"FlightPlanRouteUtils","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanRouteUtils"}}'),t=r("785893"),i=r("250065");let s={},c="Class: FlightPlanRouteManager",h={},l=[{value:"Properties",id:"properties",level:2},{value:"avionicsRouteRequested",id:"avionicsrouterequested",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"avionicsRouteRequestResponse",id:"avionicsrouterequestresponse",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"efbRoute",id:"efbroute",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"__Type",id:"__type",level:5},{value:"approach",id:"approach",level:5},{value:"approach.__Type",id:"approach__type",level:5},{value:"approach.runway",id:"approachrunway",level:5},{value:"approach.runway.__Type",id:"approachrunway__type",level:5},{value:"approach.runway.designator",id:"approachrunwaydesignator",level:5},{value:"approach.runway.number",id:"approachrunwaynumber",level:5},{value:"approach.suffix",id:"approachsuffix",level:5},{value:"approach.type",id:"approachtype",level:5},{value:"approachTransition",id:"approachtransition",level:5},{value:"approachVfrPattern",id:"approachvfrpattern",level:5},{value:"approachVfrPattern.__Type",id:"approachvfrpattern__type",level:5},{value:"approachVfrPattern.altitude",id:"approachvfrpatternaltitude",level:5},{value:"approachVfrPattern.distance",id:"approachvfrpatterndistance",level:5},{value:"approachVfrPattern.isLeftTraffic",id:"approachvfrpatternislefttraffic",level:5},{value:"approachVfrPattern.type",id:"approachvfrpatterntype",level:5},{value:"arrival",id:"arrival",level:5},{value:"arrivalTransition",id:"arrivaltransition",level:5},{value:"cruiseAltitude",id:"cruisealtitude",level:5},{value:"departure",id:"departure",level:5},{value:"departureAirport",id:"departureairport",level:5},{value:"departureAirport.__Type",id:"departureairport__type",level:5},{value:"departureAirport.airport",id:"departureairportairport",level:5},{value:"departureAirport.ident",id:"departureairportident",level:5},{value:"departureAirport.region",id:"departureairportregion",level:5},{value:"departureAirport.type",id:"departureairporttype",level:5},{value:"departureRunway",id:"departurerunway",level:5},{value:"departureRunway.__Type",id:"departurerunway__type",level:5},{value:"departureRunway.designator",id:"departurerunwaydesignator",level:5},{value:"departureRunway.number",id:"departurerunwaynumber",level:5},{value:"departureTransition",id:"departuretransition",level:5},{value:"departureVfrPattern",id:"departurevfrpattern",level:5},{value:"departureVfrPattern.__Type",id:"departurevfrpattern__type",level:5},{value:"departureVfrPattern.altitude",id:"departurevfrpatternaltitude",level:5},{value:"departureVfrPattern.distance",id:"departurevfrpatterndistance",level:5},{value:"departureVfrPattern.isLeftTraffic",id:"departurevfrpatternislefttraffic",level:5},{value:"departureVfrPattern.type",id:"departurevfrpatterntype",level:5},{value:"destinationAirport",id:"destinationairport",level:5},{value:"destinationAirport.__Type",id:"destinationairport__type",level:5},{value:"destinationAirport.airport",id:"destinationairportairport",level:5},{value:"destinationAirport.ident",id:"destinationairportident",level:5},{value:"destinationAirport.region",id:"destinationairportregion",level:5},{value:"destinationAirport.type",id:"destinationairporttype",level:5},{value:"destinationRunway",id:"destinationrunway",level:5},{value:"destinationRunway.__Type",id:"destinationrunway__type",level:5},{value:"destinationRunway.designator",id:"destinationrunwaydesignator",level:5},{value:"destinationRunway.number",id:"destinationrunwaynumber",level:5},{value:"enroute",id:"enroute",level:5},{value:"isVfr",id:"isvfr",level:5},{value:"Defined in",id:"defined-in-2",level:4},{value:"pendingAvionicsRouteRequests",id:"pendingavionicsrouterequests",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"syncedAvionicsRoute",id:"syncedavionicsroute",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"Methods",id:"methods",level:2},{value:"fileRouteWithAtc()",id:"fileroutewithatc",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"getAtcRoute()",id:"getatcroute",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"getEfbRoute()",id:"getefbroute",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"replyToAvionicsRouteRequest()",id:"replytoavionicsrouterequest",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"requestAvionicsRoute()",id:"requestavionicsroute",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"saveEfbRoute()",id:"saveefbroute",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"sendRouteToAvionics()",id:"sendroutetoavionics",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"sendRouteToEfb()",id:"sendroutetoefb",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"getManager()",id:"getmanager",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-13",level:4}];function o(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"class-flightplanroutemanager",children:"Class: FlightPlanRouteManager"})}),"\n",(0,t.jsx)(n.p,{children:"A manager for working with flight plan routes. The manager can be used to send or retrieve routes. It also\nautomatically publishes the event bus topics defined in FlightPlanRouteEvents in response to events related\nto flight plan routes."}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"avionicsrouterequested",children:"avionicsRouteRequested"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"avionicsRouteRequested"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ReadonlySubEvent",children:(0,t.jsx)(n.code,{children:"ReadonlySubEvent"})}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanRouteManager",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteManager"})}),", ",(0,t.jsx)(n.code,{children:"number"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"An event that fires when an avionics route is requested. The event data is the ID of the request."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:40"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"avionicsrouterequestresponse",children:"avionicsRouteRequestResponse"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"avionicsRouteRequestResponse"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ReadonlySubEvent",children:(0,t.jsx)(n.code,{children:"ReadonlySubEvent"})}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanRouteManager",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteManager"})}),", ",(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/FlightPlanRouteAvionicsRequestResponse",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteAvionicsRequestResponse"})}),">>"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"An event that fires when a response to an avionics route request is received. The event data is the response."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:44"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"efbroute",children:"efbRoute"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"efbRoute"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/Subscribable",children:(0,t.jsx)(n.code,{children:"Subscribable"})}),"<",(0,t.jsx)(n.code,{children:"object"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The current EFB flight plan route."}),"\n",(0,t.jsx)(n.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,t.jsx)(n.h5,{id:"__type",children:"__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_FlightPlanRoute"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"approach",children:"approach"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"approach"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This route's approach procedure."}),"\n",(0,t.jsx)(n.h5,{id:"approach__type",children:"approach.__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_ApproachIdentifier"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"approachrunway",children:"approach.runway"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"runway"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The approach's associated runway."}),"\n",(0,t.jsx)(n.h5,{id:"approachrunway__type",children:"approach.runway.__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"approachrunwaydesignator",children:"approach.runway.designator"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"designator"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The designator of the runway."}),"\n",(0,t.jsx)(n.h5,{id:"approachrunwaynumber",children:"approach.runway.number"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"number"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The number of the runway."}),"\n",(0,t.jsx)(n.h5,{id:"approachsuffix",children:"approach.suffix"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"suffix"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The suffix of the approach."}),"\n",(0,t.jsx)(n.h5,{id:"approachtype",children:"approach.type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"type"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The type name of the approach."}),"\n",(0,t.jsx)(n.h5,{id:"approachtransition",children:"approachTransition"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"approachTransition"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The name of this route's approach procedure transition."}),"\n",(0,t.jsx)(n.h5,{id:"approachvfrpattern",children:"approachVfrPattern"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"approachVfrPattern"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This route's VFR traffic pattern approach procedure."}),"\n",(0,t.jsx)(n.h5,{id:"approachvfrpattern__type",children:"approachVfrPattern.__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"approachvfrpatternaltitude",children:"approachVfrPattern.altitude"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"altitude"}),": ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The pattern altitude, in feet AGL."}),"\n",(0,t.jsx)(n.h5,{id:"approachvfrpatterndistance",children:"approachVfrPattern.distance"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"distance"}),": ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The pattern leg distance, in nautical miles."}),"\n",(0,t.jsx)(n.h5,{id:"approachvfrpatternislefttraffic",children:"approachVfrPattern.isLeftTraffic"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"isLeftTraffic"}),": ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."}),"\n",(0,t.jsx)(n.h5,{id:"approachvfrpatterntype",children:"approachVfrPattern.type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"type"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternApproachType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternApproachType"})})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The selected pattern type."}),"\n",(0,t.jsx)(n.h5,{id:"arrival",children:"arrival"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"arrival"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The name of this route's arrival procedure."}),"\n",(0,t.jsx)(n.h5,{id:"arrivaltransition",children:"arrivalTransition"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"arrivalTransition"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The name of this route's arrival procedure enroute transition."}),"\n",(0,t.jsx)(n.h5,{id:"cruisealtitude",children:"cruiseAltitude"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"cruiseAltitude"}),": ",(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This route's cruise altitude."}),"\n",(0,t.jsx)(n.h5,{id:"departure",children:"departure"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"departure"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The name of this route's departure procedure."}),"\n",(0,t.jsx)(n.h5,{id:"departureairport",children:"departureAirport"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"departureAirport"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The ICAO of this route's departure airport."}),"\n",(0,t.jsx)(n.h5,{id:"departureairport__type",children:"departureAirport.__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_ICAO"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"departureairportairport",children:"departureAirport.airport"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"airport"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The ident of the facility's associated airport."}),"\n",(0,t.jsx)(n.h5,{id:"departureairportident",children:"departureAirport.ident"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"ident"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The facility's ident."}),"\n",(0,t.jsx)(n.h5,{id:"departureairportregion",children:"departureAirport.region"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"region"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The facility's region code."}),"\n",(0,t.jsx)(n.h5,{id:"departureairporttype",children:"departureAirport.type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"type"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The facility's type."}),"\n",(0,t.jsx)(n.h5,{id:"departurerunway",children:"departureRunway"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"departureRunway"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This route's departure runway."}),"\n",(0,t.jsx)(n.h5,{id:"departurerunway__type",children:"departureRunway.__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"departurerunwaydesignator",children:"departureRunway.designator"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"designator"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The designator of the runway."}),"\n",(0,t.jsx)(n.h5,{id:"departurerunwaynumber",children:"departureRunway.number"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"number"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The number of the runway."}),"\n",(0,t.jsx)(n.h5,{id:"departuretransition",children:"departureTransition"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"departureTransition"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The name of this route's departure procedure enroute transition."}),"\n",(0,t.jsx)(n.h5,{id:"departurevfrpattern",children:"departureVfrPattern"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"departureVfrPattern"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This route's VFR traffic pattern departure procedure."}),"\n",(0,t.jsx)(n.h5,{id:"departurevfrpattern__type",children:"departureVfrPattern.__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"departurevfrpatternaltitude",children:"departureVfrPattern.altitude"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"altitude"}),": ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The pattern altitude, in feet AGL."}),"\n",(0,t.jsx)(n.h5,{id:"departurevfrpatterndistance",children:"departureVfrPattern.distance"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"distance"}),": ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The pattern leg distance, in nautical miles."}),"\n",(0,t.jsx)(n.h5,{id:"departurevfrpatternislefttraffic",children:"departureVfrPattern.isLeftTraffic"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"isLeftTraffic"}),": ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."}),"\n",(0,t.jsx)(n.h5,{id:"departurevfrpatterntype",children:"departureVfrPattern.type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"type"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternDepartureType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternDepartureType"})})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The selected pattern type."}),"\n",(0,t.jsx)(n.h5,{id:"destinationairport",children:"destinationAirport"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"destinationAirport"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The ICAO of this route's destination airport."}),"\n",(0,t.jsx)(n.h5,{id:"destinationairport__type",children:"destinationAirport.__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_ICAO"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"destinationairportairport",children:"destinationAirport.airport"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"airport"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The ident of the facility's associated airport."}),"\n",(0,t.jsx)(n.h5,{id:"destinationairportident",children:"destinationAirport.ident"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"ident"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The facility's ident."}),"\n",(0,t.jsx)(n.h5,{id:"destinationairportregion",children:"destinationAirport.region"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"region"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The facility's region code."}),"\n",(0,t.jsx)(n.h5,{id:"destinationairporttype",children:"destinationAirport.type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"type"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The facility's type."}),"\n",(0,t.jsx)(n.h5,{id:"destinationrunway",children:"destinationRunway"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"destinationRunway"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This route's destination runway."}),"\n",(0,t.jsx)(n.h5,{id:"destinationrunway__type",children:"destinationRunway.__Type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"__Type"}),": ",(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Coherent C++ object binding type."}),"\n",(0,t.jsx)(n.h5,{id:"destinationrunwaydesignator",children:"destinationRunway.designator"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"designator"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The designator of the runway."}),"\n",(0,t.jsx)(n.h5,{id:"destinationrunwaynumber",children:"destinationRunway.number"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"number"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The number of the runway."}),"\n",(0,t.jsx)(n.h5,{id:"enroute",children:"enroute"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"enroute"}),": readonly ",(0,t.jsx)(n.code,{children:"object"}),"[]"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This route's enroute legs."}),"\n",(0,t.jsx)(n.h5,{id:"isvfr",children:"isVfr"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"isVfr"}),": ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Whether this route is classified as VFR."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:32"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"pendingavionicsrouterequests",children:"pendingAvionicsRouteRequests"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"pendingAvionicsRouteRequests"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/Subscribable",children:(0,t.jsx)(n.code,{children:"Subscribable"})}),"<readonly ",(0,t.jsx)(n.code,{children:"number"}),"[]>"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"An array of the IDs of all avionics route requests that have not received a response yet, in order of decreasing\nage."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:51"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syncedavionicsroute",children:"syncedAvionicsRoute"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"readonly"})," ",(0,t.jsx)(n.strong,{children:"syncedAvionicsRoute"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/Subscribable",children:(0,t.jsx)(n.code,{children:"Subscribable"})}),"<",(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"object"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The most recent synced avionics flight plan route."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:36"}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.h3,{id:"fileroutewithatc",children:"fileRouteWithAtc()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"fileRouteWithAtc"}),"(",(0,t.jsx)(n.code,{children:"route"}),"): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Files a route with the sim's ATC service."}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The route to file."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_FlightPlanRoute"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ApproachIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The approach's associated runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.suffix"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The suffix of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The type name of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's approach procedure transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternApproachType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternApproachType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrival"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrivalTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.cruiseAltitude"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"object"})]}),(0,t.jsx)(n.td,{children:"This route's cruise altitude."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departure"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's departure airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's departure runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternDepartureType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternDepartureType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's destination airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's destination runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.enroute"})}),(0,t.jsxs)(n.td,{children:["readonly ",(0,t.jsx)(n.code,{children:"object"}),"[]"]}),(0,t.jsx)(n.td,{children:"This route's enroute legs."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.isVfr"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether this route is classified as VFR."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A Promise which is fulfilled when the route has been scheduled to be delivered to the ATC service. This\ndoes not guarantee that the route will have been filed when the Promise is fulfilled."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:143"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"getatcroute",children:"getAtcRoute()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getAtcRoute"}),"(): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/FlightPlanRoute",children:(0,t.jsx)(n.code,{children:"FlightPlanRoute"})}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Gets the filed ATC route."}),"\n",(0,t.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/FlightPlanRoute",children:(0,t.jsx)(n.code,{children:"FlightPlanRoute"})}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A Promise which is fulfilled with the filed ATC route once it has been retrieved."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:151"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"getefbroute",children:"getEfbRoute()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"getEfbRoute"}),"(): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/FlightPlanRoute",children:(0,t.jsx)(n.code,{children:"FlightPlanRoute"})}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Gets the saved EFB route."}),"\n",(0,t.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/FlightPlanRoute",children:(0,t.jsx)(n.code,{children:"FlightPlanRoute"})}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A Promise which is fulfilled with the saved EFB route once it has been retrieved."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:93"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"replytoavionicsrouterequest",children:"replyToAvionicsRouteRequest()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"replyToAvionicsRouteRequest"}),"(",(0,t.jsx)(n.code,{children:"requestId"}),", ",(0,t.jsx)(n.code,{children:"route"}),"): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Reply to an avionics route request with a flight plan route."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"requestId"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The ID of the request to which to reply."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The route to send as the reply."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_FlightPlanRoute"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ApproachIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The approach's associated runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.suffix"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The suffix of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The type name of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's approach procedure transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternApproachType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternApproachType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrival"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrivalTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.cruiseAltitude"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"object"})]}),(0,t.jsx)(n.td,{children:"This route's cruise altitude."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departure"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's departure airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's departure runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternDepartureType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternDepartureType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's destination airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's destination runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.enroute"})}),(0,t.jsxs)(n.td,{children:["readonly ",(0,t.jsx)(n.code,{children:"object"}),"[]"]}),(0,t.jsx)(n.td,{children:"This route's enroute legs."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.isVfr"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether this route is classified as VFR."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A Promise which is fulfilled when the route has been scheduled to be delivered to reply listeners. This\ndoes not guarantee that any listeners will have received the reply when the Promise is fulfilled."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:133"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"requestavionicsroute",children:"requestAvionicsRoute()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"requestAvionicsRoute"}),"(): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"number"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Sends an avionics route request to all request listeners."}),"\n",(0,t.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"number"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A Promise which is fulfilled with the ID of the request when the request has been scheduled to be\ndelivered to request listeners. This does not guarantee that any listeners will have received the request when the\nPromise is fulfilled."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:122"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"saveefbroute",children:"saveEfbRoute()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"saveEfbRoute"}),"(",(0,t.jsx)(n.code,{children:"route"}),"): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Saves a route as the EFB route."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The route to save."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_FlightPlanRoute"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ApproachIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The approach's associated runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.suffix"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The suffix of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The type name of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's approach procedure transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternApproachType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternApproachType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrival"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrivalTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.cruiseAltitude"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"object"})]}),(0,t.jsx)(n.td,{children:"This route's cruise altitude."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departure"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's departure airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's departure runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternDepartureType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternDepartureType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's destination airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's destination runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.enroute"})}),(0,t.jsxs)(n.td,{children:["readonly ",(0,t.jsx)(n.code,{children:"object"}),"[]"]}),(0,t.jsx)(n.td,{children:"This route's enroute legs."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.isVfr"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether this route is classified as VFR."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A Promise which is fulfilled when the route has been saved as the EFB route."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:102"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"sendroutetoavionics",children:"sendRouteToAvionics()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"sendRouteToAvionics"}),"(",(0,t.jsx)(n.code,{children:"route"}),"): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Sends a flight plan route to avionics for sync."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The route to send."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_FlightPlanRoute"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ApproachIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The approach's associated runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.suffix"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The suffix of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The type name of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's approach procedure transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternApproachType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternApproachType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrival"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrivalTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.cruiseAltitude"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"object"})]}),(0,t.jsx)(n.td,{children:"This route's cruise altitude."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departure"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's departure airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's departure runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternDepartureType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternDepartureType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's destination airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's destination runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.enroute"})}),(0,t.jsxs)(n.td,{children:["readonly ",(0,t.jsx)(n.code,{children:"object"}),"[]"]}),(0,t.jsx)(n.td,{children:"This route's enroute legs."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.isVfr"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether this route is classified as VFR."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A Promise which is fulfilled when the route has been scheduled to be delivered to listeners. This does\nnot guarantee that any listeners will have received the route when the Promise is fulfilled."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:112"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"sendroutetoefb",children:"sendRouteToEfb()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"sendRouteToEfb"}),"(",(0,t.jsx)(n.code,{children:"route"}),"): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Sends a flight plan route to the EFB."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The route to send."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_FlightPlanRoute"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ApproachIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The approach's associated runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.runway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.suffix"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The suffix of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approach.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The type name of the approach."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's approach procedure transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern approach procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.approachVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternApproachType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternApproachType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrival"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.arrivalTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's arrival procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.cruiseAltitude"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.code,{children:"object"})]}),(0,t.jsx)(n.td,{children:"This route's cruise altitude."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departure"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's departure airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's departure runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureTransition"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The name of this route's departure procedure enroute transition."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's VFR traffic pattern departure procedure."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_VfrPatternProcedure"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.altitude"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern altitude, in feet AGL."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.distance"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})}),(0,t.jsx)(n.td,{children:"The pattern leg distance, in nautical miles."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.isLeftTraffic"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the pattern uses a left-hand traffic pattern (true) instead of a right-hand traffic pattern (false)."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.departureVfrPattern.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPlanRouteVfrPatternDepartureType",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteVfrPatternDepartureType"})})}),(0,t.jsx)(n.td,{children:"The selected pattern type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"The ICAO of this route's destination airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_ICAO"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.airport"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The ident of the facility's associated airport."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.ident"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's ident."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.region"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's region code."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationAirport.type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The facility's type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object"})}),(0,t.jsx)(n.td,{children:"This route's destination runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.__Type"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:'"JS_RunwayIdentifier"'})}),(0,t.jsx)(n.td,{children:"Coherent C++ object binding type."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.designator"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The designator of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.destinationRunway.number"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"string"})}),(0,t.jsx)(n.td,{children:"The number of the runway."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.enroute"})}),(0,t.jsxs)(n.td,{children:["readonly ",(0,t.jsx)(n.code,{children:"object"}),"[]"]}),(0,t.jsx)(n.td,{children:"This route's enroute legs."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"route.isVfr"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether this route is classified as VFR."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.code,{children:"void"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A Promise which is fulfilled when the route has been scheduled to be delivered to the EFB. This does\nnot guarantee that the EFB will have received the route when the Promise is fulfilled."}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:85"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"getmanager",children:"getManager()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"static"})," ",(0,t.jsx)(n.strong,{children:"getManager"}),"(): ",(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanRouteManager",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteManager"})}),">"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Gets an instance of ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanRouteManager",children:"FlightPlanRouteManager"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanRouteManager",children:(0,t.jsx)(n.code,{children:"FlightPlanRouteManager"})}),">"]}),"\n",(0,t.jsxs)(n.p,{children:["A Promise which is fulfilled with an instance of ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/FlightPlanRouteManager",children:"FlightPlanRouteManager"})," when the manager is\nready."]}),"\n",(0,t.jsx)(n.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/flightplan/FlightPlanRouteManager.ts:75"})]})}function a(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return c},a:function(){return s}});var d=r(667294);let t={},i=d.createContext(t);function s(e){let n=d.useContext(i);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),d.createElement(i.Provider,{value:n},e.children)}}}]);