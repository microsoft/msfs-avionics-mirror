"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[63393],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||a;return n?o.createElement(g,i(i({ref:t},c),{},{components:n})):o.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[d]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3807:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var o=n(87462),r=(n(67294),n(3905));const a={sidebar_position:4},i="Adding Component Props",p={unversionedId:"getting-started/adding-component-props",id:"getting-started/adding-component-props",title:"Adding Component Props",description:"Defining Component Props",source:"@site/docs/getting-started/adding-component-props.md",sourceDirName:"getting-started",slug:"/getting-started/adding-component-props",permalink:"/msfs-avionics-mirror/docs/getting-started/adding-component-props",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar",previous:{title:"Styling Your Component",permalink:"/msfs-avionics-mirror/docs/getting-started/styling-your-component"},next:{title:"Dealing With Dynamic Data",permalink:"/msfs-avionics-mirror/docs/getting-started/dealing-with-dynamic-data"}},s={},l=[{value:"Defining Component Props",id:"defining-component-props",level:2},{value:"Making and Referencing the Props Interface",id:"making-and-referencing-the-props-interface",level:2},{value:"Utilizing the Props",id:"utilizing-the-props",level:2},{value:"Setting the Prop Value",id:"setting-the-prop-value",level:2}],c={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adding-component-props"},"Adding Component Props"),(0,r.kt)("h2",{id:"defining-component-props"},"Defining Component Props"),(0,r.kt)("p",null,"Just as in React, in FSComponent, components can take props that can be used to pass data or functions into them, making them more composable and able to take dependencies from their parent components. In order to define the props on a component, one must first make an interface that specifies what those properties will be. Let's define exactly what the text in our component should be via a prop, instead of hard-coding ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello World!")," into the component itself."),(0,r.kt)("h2",{id:"making-and-referencing-the-props-interface"},"Making and Referencing the Props Interface"),(0,r.kt)("p",null,"Above the ",(0,r.kt)("inlineCode",{parentName:"p"},"MyComponent")," class, add the following interface definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface MyComponentProps extends ComponentProps {\n  text: string;\n}\n")),(0,r.kt)("p",null,"and add ",(0,r.kt)("inlineCode",{parentName:"p"},"ComponentProps")," to the import from ",(0,r.kt)("inlineCode",{parentName:"p"},"@microsoft/msfs-sdk"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { FSComponent, DisplayComponent, VNode, ComponentProps } from '@microsoft/msfs-sdk';\n")),(0,r.kt)("p",null,"This will define a props interface that has a single property named ",(0,r.kt)("inlineCode",{parentName:"p"},"text"),", which takes a string. We can then tell the system that we would like to use this set of props in our component by adding it to our class's extension of ",(0,r.kt)("inlineCode",{parentName:"p"},"DisplayComponent"),", so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export class MyComponent extends DisplayComponent<any> {\n")),(0,r.kt)("p",null,"should become"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export class MyComponent extends DisplayComponent<MyComponentProps> {\n")),(0,r.kt)("h2",{id:"utilizing-the-props"},"Utilizing the Props"),(0,r.kt)("p",null,"All component props appear in ",(0,r.kt)("inlineCode",{parentName:"p"},"this.props"),", just as they do in React. Therefore, we can now replace our ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello World!")," text in our component with a prop reference:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"...\nreturn (\n  <div class='my-component'>{this.props.text}</div>\n);\n...\n")),(0,r.kt)("p",null,"Now, when the component is rendered, it will reference the value of that prop and replace this ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," tag with the value."),(0,r.kt)("h2",{id:"setting-the-prop-value"},"Setting the Prop Value"),(0,r.kt)("p",null,"You may notice that your editor is now complaining, adding a red underline in ",(0,r.kt)("inlineCode",{parentName:"p"},"MyInstrument.tsx")," underneath ",(0,r.kt)("inlineCode",{parentName:"p"},"MyComponent"),". This is because in our interface, we defined a mandatory prop ",(0,r.kt)("inlineCode",{parentName:"p"},"text"),", but we have not yet provided a value for it. Let's do that now by changing that line and adding the prop:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"FSComponent.render(<MyComponent text='Hello MSFS!' />, document.getElementById('InstrumentContent'));\n")),(0,r.kt)("p",null,"You can see that we added ",(0,r.kt)("inlineCode",{parentName:"p"},"text='Hello MSFS!'")," as a prop of the component. Props work a lot like HTML attibutes, and can be assigned values. After a rebuild/resync, you should see the text on your panel now reflect the prop value."))}m.isMDXComponent=!0}}]);