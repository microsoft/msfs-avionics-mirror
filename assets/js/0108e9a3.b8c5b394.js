"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[41769],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return t?i.createElement(g,r(r({ref:n},u),{},{components:t})):i.createElement(g,r({ref:n},u))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<a;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},39076:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=t(87462),o=(t(67294),t(3905));const a={sidebar_position:3},r="Creating Plugins",l={unversionedId:"plugins/creating-plugins",id:"plugins/creating-plugins",title:"Creating Plugins",description:"The Plugin API is included as part of the MSFS SDK library (@microsoft/msfs-sdk). In order to use the API, the first step is to make sure your plugin imports @microsoft/msfs-sdk. Once the library is imported, you can start using the Plugin API classes.",source:"@site/docs/plugins/creating-plugins.md",sourceDirName:"plugins",slug:"/plugins/creating-plugins",permalink:"/msfs-avionics-mirror/docs/plugins/creating-plugins",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar",previous:{title:"Adding Plugin Support",permalink:"/msfs-avionics-mirror/docs/plugins/adding-plugin-support"},next:{title:"Intro to Subscriptions",permalink:"/msfs-avionics-mirror/docs/subscriptions/intro-to-subscriptions"}},s={},p=[{value:"Setting Up Your Plugin Class",id:"setting-up-your-plugin-class",level:2},{value:"Loading Your Plugin",id:"loading-your-plugin",level:2},{value:"Loading Global Plugins",id:"loading-global-plugins",level:3},{value:"Loading Airplane Plugins",id:"loading-airplane-plugins",level:3},{value:"Getting Data from the Instrument",id:"getting-data-from-the-instrument",level:2},{value:"Overriding Rendered Components",id:"overriding-rendered-components",level:2},{value:"Component Hooks",id:"component-hooks",level:2}],u={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-plugins"},"Creating Plugins"),(0,o.kt)("p",null,"The Plugin API is included as part of the MSFS SDK library (",(0,o.kt)("inlineCode",{parentName:"p"},"@microsoft/msfs-sdk"),"). In order to use the API, the first step is to make sure your plugin imports ",(0,o.kt)("inlineCode",{parentName:"p"},"@microsoft/msfs-sdk"),". Once the library is imported, you can start using the Plugin API classes."),(0,o.kt)("h2",{id:"setting-up-your-plugin-class"},"Setting Up Your Plugin Class"),(0,o.kt)("p",null,"Plugins are implemented as classes that extend the abstract class ",(0,o.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin"),". Individual instruments have the option to define their own plugin interfaces, so before doing anything else, you should take a minute to look up the specific interface required by the instrument for which you are developing your plugin. Once you have done that, simply create a class that both inherits from ",(0,o.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin")," and implements the instrument-specific plugin interface (if one exists)."),(0,o.kt)("p",null,"Below is an example of a very basic plugin. To keep things simple, the example assumes that there is no instrument-specific plugin interface, so we just have to extend ",(0,o.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AvionicsPlugin } from '@microsoft/msfs-sdk';\n\n// Don't worry about the type parameter for now; we'll get to that later.\nclass MyPlugin extends AvionicsPlugin<void> {\n  public onInstalled(): void {\n    // ...\n  }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin")," only requires one method to be implemented: ",(0,o.kt)("inlineCode",{parentName:"p"},"onInstalled()"),". This is a callback method that is called when the plugin is first loaded by the instrument. It is a good place to run initialization code."),(0,o.kt)("p",null,"Once you have defined your plugin class, the next step is to register it with the plugin system. You can do this using the global function ",(0,o.kt)("inlineCode",{parentName:"p"},"registerPlugin()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AvionicsPlugin, registerPlugin } from '@microsoft/msfs-sdk';\n\n// Don't worry about the type parameter for now; we'll get to that later.\nclass MyPlugin extends AvionicsPlugin<void> {\n  public onInstalled(): void {\n    // ...\n  }\n}\n\nregisterPlugin(MyPlugin);\n")),(0,o.kt)("h2",{id:"loading-your-plugin"},"Loading Your Plugin"),(0,o.kt)("p",null,"Next, you need to build your plugin code to a Javascript (.js) file and place the file in a directory that will be loaded by the sim's virtual file system."),(0,o.kt)("p",null,"If you are creating an airplane-specific plugin, then a good location would be under the airplane's ",(0,o.kt)("inlineCode",{parentName:"p"},"panel/Instruments/")," directory. Another possible location is under the global ",(0,o.kt)("inlineCode",{parentName:"p"},"html_ui/")," directory; however care must be used when adding files here to avoid conflicts with files from the base sim or other third-party packages."),(0,o.kt)("p",null,"After you have chosen a suitable location for your plugin file, you need to tell the sim where your plugin file is located so it can be loaded. The method to do this depends on if your plugin is a ",(0,o.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/plugins/overview#global-vs-airplane-plugins"},"global plugin or an airplane plugin"),"."),(0,o.kt)("h3",{id:"loading-global-plugins"},"Loading Global Plugins"),(0,o.kt)("p",null,"Global plugins are loaded using XML files placed in the following directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"html_ui/Plugins\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"While you are free to choose any name for your global plugin XML files, please take care to choose names that are not likely to conflict with files used by other plugins. Files with the same names will overwrite one another and will cause issues if the overwriting is not intended.")),(0,o.kt)("p",null,"Global plugin XML files should contain the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Plugins>")," tag at the root. The ",(0,o.kt)("inlineCode",{parentName:"p"},"<Plugins>")," tag should in turn contain one or more ",(0,o.kt)("inlineCode",{parentName:"p"},"<Plugin>")," tags. Each ",(0,o.kt)("inlineCode",{parentName:"p"},"<Plugin>")," tag loads one plugin .js file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<Plugins>\n\n  <Plugin target="MyInstrument">\n    coui://html_ui/Path/To/My/Plugin/MyPlugin.js\n  </Plugin>\n\n  <Plugin target="MyOtherInstrument">\n    coui://html_ui/Path/To/My/Plugin/MyOtherPlugin.js\n  </Plugin>\n\n</Plugins>\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," attribute of each ",(0,o.kt)("inlineCode",{parentName:"p"},"<Plugin>")," tag defines the ",(0,o.kt)("em",{parentName:"p"},"target")," of all plugins loaded from the tag's .js file. The target is used by instruments to determine whether to use a particular global plugin. This allows instruments to avoid using plugins that were not meant to be applied to them. Each instrument that supports plugins is free to filter global plugins based on whatever arbitrary criteria it chooses, so please always confirm that your plugin's declared target matches what is expected by the instrument. If you want your plugin to apply to multiple instruments that expect different target strings, create separate ",(0,o.kt)("inlineCode",{parentName:"p"},"<Plugin>")," tags with the appropriate target strings for the different instruments."),(0,o.kt)("h3",{id:"loading-airplane-plugins"},"Loading Airplane Plugins"),(0,o.kt)("p",null,"Airplane plugins are loaded using the airplane's ",(0,o.kt)("inlineCode",{parentName:"p"},"panel.xml")," file. Find (or create) the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag associated with your plugin's parent instrument, then add a ",(0,o.kt)("inlineCode",{parentName:"p"},"<Plugin>")," tag as a child with the content of the tag specifying the full absolute path to the plugin file."),(0,o.kt)("p",null,"For example, the following ",(0,o.kt)("inlineCode",{parentName:"p"},"panel.xml")," will cause the instrument with ID ",(0,o.kt)("inlineCode",{parentName:"p"},"MyInstrument")," to load ",(0,o.kt)("inlineCode",{parentName:"p"},"MyPlugin.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"<PlaneHTMLConfig>\n  <Instrument>\n    <Name>MyInstrument</Name>\n    <Plugin>\n      coui://SimObjects/Airplanes/Company_MyAirplane/panel/Instruments/MyPlugin.js\n    </Plugin>\n  </Instrument>\n</PlaneHTMLConfig>\n")),(0,o.kt)("p",null,"If you wish to load multiple plugins for a single instrument, you may either build them all to a single .js file and load that file or build each plugin to its own .js file and specify multiple files to be loaded in ",(0,o.kt)("inlineCode",{parentName:"p"},"panel.xml"),". When loading more than one .js file, create a separate ",(0,o.kt)("inlineCode",{parentName:"p"},"<Plugin>")," tag for each file to be loaded."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If an airplane has multiple instances of an instrument that all need to load the same plugin(s), the plugin file(s) should be specified for ",(0,o.kt)("em",{parentName:"p"},"all")," instances of the instrument, each of which will have its own ",(0,o.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag in ",(0,o.kt)("inlineCode",{parentName:"p"},"panel.xml"),".")),(0,o.kt)("h2",{id:"getting-data-from-the-instrument"},"Getting Data from the Instrument"),(0,o.kt)("p",null,"Instruments may choose pass data to plugins via a ",(0,o.kt)("em",{parentName:"p"},"binder"),", which is an object that is passed to plugins via their constructors. Instruments that use plugin binders should also declare an interface for such binders so that plugins are aware of what is contained in the binder. Once the binder interface is known, it can be used as the type parameter on ",(0,o.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin")," to properly expose the type of the ",(0,o.kt)("inlineCode",{parentName:"p"},"binder")," class property:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// ------------------------------------\n// Declared by the instrument somewhere\nexport interface PluginBinder {\n  readonly bus: EventBus;\n}\n// ------------------------------------\n\nclass MyPlugin extends AvionicsPlugin<PluginBinder> {\n  public onInstalled(): void {\n    // 'this.binder' now has the type 'PluginBinder'\n    this.binder.bus\n      .getSubscriber<ClockEvents>()\n      .sub('realTime')\n      .handle(time => { console.log(`The time is now ${new Date(time).toTimeString()}`); });\n  }\n}\n")),(0,o.kt)("h2",{id:"overriding-rendered-components"},"Overriding Rendered Components"),(0,o.kt)("p",null,"Normally, instruments get to decide how plugin-specific functionality is integrated. For example, an instrument may allow plugins to render or replace certain display components through the use of specific methods declared by its plugin interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface InstrumentPlugin extends AvionicsPlugin<void> {\n  /**\n   * Renders a component.\n   * @returns The rendered component, or null if this plugin does not support rendering the component.\n   */\n  renderComponent(): VNode | null;\n}\n")),(0,o.kt)("p",null,"This allows instruments a certain degree of control over what parts of themselves plugins can and cannot override. However, sometimes you may find yourself in the position of needing your plugin to override a display component in a manner that the instrument plugin interface does not explicitly support. The Plugin API allows you to accomplish this without resorting to forking the instrument code."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin")," supports an optional callback method ",(0,o.kt)("inlineCode",{parentName:"p"},"onComponentCreating()"),". If this method is defined in a subclass, then it will be called whenever ",(0,o.kt)("em",{parentName:"p"},"any")," instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"DisplayComponent")," is about to be created on the plugin's parent instrument. It is passed the constructor of the component and the props that are to be used to create the component. If ",(0,o.kt)("inlineCode",{parentName:"p"},"onComponentCreating()")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),", then the original component will be created as usual. However, if ",(0,o.kt)("inlineCode",{parentName:"p"},"onComponentCreating()")," returns its own instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"DisplayComponent"),", the returned instance will be used ",(0,o.kt)("em",{parentName:"p"},"in place")," of the original component. Effectively, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"onComponentCreating()")," to intercept the creation of certain components and silently replace them with your own versions."),(0,o.kt)("p",null,"For example, the following code will cause all instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"MyComponent")," to be replaced with ",(0,o.kt)("inlineCode",{parentName:"p"},"MyPluginComponent"),". Everywhere ",(0,o.kt)("inlineCode",{parentName:"p"},"MyComponent")," would have been rendered, there will instead be a ",(0,o.kt)("inlineCode",{parentName:"p"},"<div>"),' with the text "Hello, world!".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"class MyPluginComponent extends DisplayComponent<ComponentProps> {\n  public render(): VNode {\n    return (\n      <div>Hello, world!</div>\n    );\n  }\n}\n\nclass MyPlugin extends AvionicsPlugin<void> {\n  public onInstalled(): void {\n    // ...\n  }\n\n  public onComponentCreating = (ctor: DisplayComponentFactory<any>, props: any): DisplayComponent<any> | undefined => {\n    if (ctor.name === 'MyComponent') {\n      return new MyPluginComponent(props);\n    }\n\n    return undefined;\n  };\n}\n")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"When replacing components with ",(0,o.kt)("inlineCode",{parentName:"p"},"onComponentCreating()"),", it is imperative that the replacement component implement the same interface as the original. Otherwise, you may cause runtime errors to be thrown when instrument code attempts to access properties on the replacement that do not exist.")),(0,o.kt)("h2",{id:"component-hooks"},"Component Hooks"),(0,o.kt)("p",null,"If your plugin needs to know when certain components are created or rendered in the instrument, you can subscribe to those events by defining the optional ",(0,o.kt)("inlineCode",{parentName:"p"},"onComponentCreated()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"onComponentRendered()")," methods in your plugin class. The former is called immediately after ",(0,o.kt)("em",{parentName:"p"},"any")," component is created in the instrument, and the latter is called immediately after ",(0,o.kt)("em",{parentName:"p"},"any")," component is rendered."))}c.isMDXComponent=!0}}]);