"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[8736],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),m=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=m(e.components);return i.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=m(t),u=a,f=p["".concat(s,".").concat(u)]||p[u]||d[u]||r;return t?i.createElement(f,o(o({ref:n},c),{},{components:t})):i.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var m=2;m<r;m++)o[m]=t[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},48613:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var i=t(87462),a=(t(67294),t(3905));const r={sidebar_label:"Overview",sidebar_position:1},o="G1000 Overview",l={unversionedId:"g1000/overview",id:"g1000/overview",title:"G1000 Overview",description:"Introduction",source:"@site/docs/g1000/overview.md",sourceDirName:"g1000",slug:"/g1000/overview",permalink:"/msfs-avionics-mirror/docs/g1000/overview",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Overview",sidebar_position:1},sidebar:"sidebar",previous:{title:"Defining CAS Alerts Using panel.xml",permalink:"/msfs-avionics-mirror/docs/cas/defining-cas-alerts-using-panel-xml"},next:{title:"panel.xml Basics",permalink:"/msfs-avionics-mirror/docs/g1000/panel-xml-basics"}},s={},m=[{value:"Introduction",id:"introduction",level:2},{value:"<code>panel.xml</code>",id:"panelxml",level:2},{value:"Plugins",id:"plugins",level:2}],c={toc:m},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"g1000-overview"},"G1000 Overview"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"The G1000 package was written to reproduce the Garmin G1000 NXi avionics systems in MSFS to a high degree of accuracy.  It was designed to be drop-in compatible with the original MSFS G1000, so configuration is largely similar, in that the bulk of the configuration is done via ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml"),"."),(0,a.kt)("h2",{id:"panelxml"},(0,a.kt)("inlineCode",{parentName:"h2"},"panel.xml")),(0,a.kt)("p",null,"For more information on ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml")," configuration, please refer to the following pages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/msfs-avionics-mirror/docs/g1000/panel-xml-basics"},(0,a.kt)("em",{parentName:"a"},"G1000 ",(0,a.kt)("inlineCode",{parentName:"em"},"panel.xml")," Basics"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/msfs-avionics-mirror/docs/g1000/panel-xml-tag-documentation"},(0,a.kt)("em",{parentName:"a"},"G1000 ",(0,a.kt)("inlineCode",{parentName:"em"},"panel.xml")," Tag Documentation")))),(0,a.kt)("h2",{id:"plugins"},"Plugins"),(0,a.kt)("p",null,"The NXi can also be configured by use of our ",(0,a.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/plugins/overview"},"plugin API"),".  See that documentation for an introduction and details on how to create and load plugins in your plane."),(0,a.kt)("p",null,"All G1000 plugins have access to several resources via the ",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/g1000common/interfaces/G1000PluginBinder"},(0,a.kt)("inlineCode",{parentName:"a"},"G1000PluginBinder"))," and child ",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/g1000common/interfaces/G1000PfdPluginBinder"},(0,a.kt)("inlineCode",{parentName:"a"},"G1000PfdPluginBinder"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/g1000common/interfaces/G1000MfdPluginBinder"},(0,a.kt)("inlineCode",{parentName:"a"},"G1000MfdPluginBinder"))," interfaces."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"menuSystem")," is an instance of the ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/g1000common/classes/SoftKeyMenuSystem"},(0,a.kt)("inlineCode",{parentName:"a"},"SoftKeyMenuSystem"))," that lets you examine and modify the softkey menus."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"viewService")," is an instance of the ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/g1000common/classes/ViewService"},(0,a.kt)("inlineCode",{parentName:"a"},"ViewService"))," which lets you interact with all the various UI views of the NXi."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bus")," is an instance of the ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/classes/EventBus"},(0,a.kt)("inlineCode",{parentName:"a"},"EventBus"))," to access bus events within the plugin."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"backplane")," is an instance of the ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/classes/InstrumentBackplane"},(0,a.kt)("inlineCode",{parentName:"a"},"InstrumentBackplane"))," to allow registration of new publishers within the update loop."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fms")," is an instance of the Garmin ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/classes/Fms"},(0,a.kt)("inlineCode",{parentName:"a"},"Fms"))," granting access to flight planning information."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pageSelectMenuSystem")," is an optional instance of the ",(0,a.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/g1000common/classes/PageSelectMenuSystem"},(0,a.kt)("inlineCode",{parentName:"a"},"PageSelectMenuSystem")),", present only in the MFD, which allows you to examine and modify the MFD's rotary knob menu system.")),(0,a.kt)("p",null,"In addition, the ",(0,a.kt)("inlineCode",{parentName:"p"},"G1000PfdPluginBinder")," interface grants access to the ",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/classes/NavIndicatorController"},(0,a.kt)("inlineCode",{parentName:"a"},"NavIndicatorController"))," via the ",(0,a.kt)("inlineCode",{parentName:"p"},"navIndicatorController")," member."),(0,a.kt)("p",null,"Every NXi plugin can implement the following callbacks, which are the primary way for the instrument to interact with your plugin code."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onMenuSystemInitialized()")," is called when the softkey menu system is initialized."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onViewServiceInitialized()")," is called when the view service is initialized."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"onPageSelectMenuSystemInitialized()")," is called when the page select menu system is initialized."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"renderEIS()")," is called when the EIS is rendered, allowing easy override with a custom EIS implementation.")),(0,a.kt)("p",null,"In addition, the PFD plugin can implement ",(0,a.kt)("inlineCode",{parentName:"p"},"renderToPfdInstruments"),", which gets called when the PFD instrument itself is rendered to render additional elements onto the PFD."),(0,a.kt)("p",null,"G1000 plugins also support the standard ",(0,a.kt)("inlineCode",{parentName:"p"},"onComponentCreating()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"onComponentCreated()"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"onComponentRendered()")," callbacks from ",(0,a.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/classes/AvionicsPlugin"},(0,a.kt)("inlineCode",{parentName:"a"},"AvionicsPlugin")),", which can be implemented to control the rendering of any arbitrary display component.  See the overall plugin documentation for more on the use of these methods."))}d.isMDXComponent=!0}}]);