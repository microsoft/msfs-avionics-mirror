"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["164545"],{144837:function(e,i,n){n.r(i),n.d(i,{metadata:()=>s,contentTitle:()=>o,default:()=>h,assets:()=>d,toc:()=>c,frontMatter:()=>r});var s=JSON.parse('{"id":"api/g1000common/type-aliases/FixLegInfo","title":"Type Alias: FixLegInfo","description":"FixLegInfo: object","source":"@site/docs/api/g1000common/type-aliases/FixLegInfo.md","sourceDirName":"api/g1000common/type-aliases","slug":"/api/g1000common/type-aliases/FixLegInfo","permalink":"/msfs-avionics-mirror/2024/docs/api/g1000common/type-aliases/FixLegInfo","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"FacilityInfo","permalink":"/msfs-avionics-mirror/2024/docs/api/g1000common/type-aliases/FacilityInfo"},"next":{"title":"FlightPlanFocus","permalink":"/msfs-avionics-mirror/2024/docs/api/g1000common/type-aliases/FlightPlanFocus"}}'),t=n("785893"),l=n("250065");let r={},o="Type Alias: FixLegInfo",d={},c=[{value:"Type declaration",id:"type-declaration",level:2},{value:"airwayDistance?",id:"airwaydistance",level:3},{value:"invalidConstraintAltitude?",id:"invalidconstraintaltitude",level:3},{value:"isActive",id:"isactive",level:3},{value:"isAdvisory?",id:"isadvisory",level:3},{value:"isAirwayExitFix?",id:"isairwayexitfix",level:3},{value:"isAirwayFix?",id:"isairwayfix",level:3},{value:"isCollapsed?",id:"iscollapsed",level:3},{value:"isDirectTo",id:"isdirectto",level:3},{value:"isUserConstraint?",id:"isuserconstraint",level:3},{value:"legDefinition",id:"legdefinition",level:3},{value:"legIsBehind?",id:"legisbehind",level:3},{value:"segmentType",id:"segmenttype",level:3},{value:"targetAltitude?",id:"targetaltitude",level:3},{value:"Defined in",id:"defined-in",level:2}];function a(e){let i={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"type-alias-fixleginfo",children:"Type Alias: FixLegInfo"})}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"FixLegInfo"}),": ",(0,t.jsx)(i.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Data needed for a FixInfoComonent to draw itself, incuding the index of the active leg."}),"\n",(0,t.jsx)(i.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,t.jsx)(i.h3,{id:"airwaydistance",children:"airwayDistance?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"airwayDistance"}),": ",(0,t.jsx)(i.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"The distance from entry to exit of this airway segment."}),"\n",(0,t.jsx)(i.h3,{id:"invalidconstraintaltitude",children:"invalidConstraintAltitude?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"invalidConstraintAltitude"}),": ",(0,t.jsx)(i.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"The constrant altitude assigned to this leg that is invalid, if one exists."}),"\n",(0,t.jsx)(i.h3,{id:"isactive",children:"isActive"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"isActive"}),": ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Whether or not this is the active leg."}),"\n",(0,t.jsx)(i.h3,{id:"isadvisory",children:"isAdvisory?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"isAdvisory"}),": ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Whether this VNAV target altitude is advisory."}),"\n",(0,t.jsx)(i.h3,{id:"isairwayexitfix",children:"isAirwayExitFix?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"isAirwayExitFix"}),": ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Whether this leg is an enroute airway exit fix."}),"\n",(0,t.jsx)(i.h3,{id:"isairwayfix",children:"isAirwayFix?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"isAirwayFix"}),": ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Whether this leg is an enroute airway fix that is NOT an entry or an exit."}),"\n",(0,t.jsx)(i.h3,{id:"iscollapsed",children:"isCollapsed?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"isCollapsed"}),": ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Whether this leg is collapsed and hidden."}),"\n",(0,t.jsx)(i.h3,{id:"isdirectto",children:"isDirectTo"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"isDirectTo"}),": ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Whether or not this is an active DTO leg."}),"\n",(0,t.jsx)(i.h3,{id:"isuserconstraint",children:"isUserConstraint?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"isUserConstraint"}),": ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Whether or not the altitude constraint is a user constraint."}),"\n",(0,t.jsx)(i.h3,{id:"legdefinition",children:"legDefinition"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"legDefinition"}),": ",(0,t.jsx)(i.code,{children:"LegDefinition"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"The leg definition from the flight plan."}),"\n",(0,t.jsx)(i.h3,{id:"legisbehind",children:"legIsBehind?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"legIsBehind"}),": ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Whether this leg is behind the active leg."}),"\n",(0,t.jsx)(i.h3,{id:"segmenttype",children:"segmentType"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.strong,{children:"segmentType"}),": ",(0,t.jsx)(i.code,{children:"FlightPlanSegmentType"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"The segment type of the segment that contains this leg."}),"\n",(0,t.jsx)(i.h3,{id:"targetaltitude",children:"targetAltitude?"}),"\n",(0,t.jsxs)(i.blockquote,{children:["\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"optional"})," ",(0,t.jsx)(i.strong,{children:"targetAltitude"}),": ",(0,t.jsx)(i.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"The VNAV target altitude for this leg"}),"\n",(0,t.jsx)(i.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:"workingtitle-instruments-g1000/html_ui/Shared/UI/FPL/FPLTypesAndProps.ts:16"})]})}function h(e={}){let{wrapper:i}={...(0,l.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},250065:function(e,i,n){n.d(i,{Z:function(){return o},a:function(){return r}});var s=n(667294);let t={},l=s.createContext(t);function r(e){let i=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:i},e.children)}}}]);