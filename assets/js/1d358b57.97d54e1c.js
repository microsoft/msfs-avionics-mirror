"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[67073],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,b=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8264:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:5},o="Dealing With Dynamic Data",s={unversionedId:"getting-started/dealing-with-dynamic-data",id:"getting-started/dealing-with-dynamic-data",title:"Dealing With Dynamic Data",description:"Where is My State?",source:"@site/docs/getting-started/dealing-with-dynamic-data.md",sourceDirName:"getting-started",slug:"/getting-started/dealing-with-dynamic-data",permalink:"/msfs-avionics-mirror/docs/getting-started/dealing-with-dynamic-data",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar",previous:{title:"Adding Component Props",permalink:"/msfs-avionics-mirror/docs/getting-started/adding-component-props"},next:{title:"Using the Event Bus",permalink:"/msfs-avionics-mirror/docs/getting-started/using-the-event-bus"}},l={},c=[{value:"Where is My State?",id:"where-is-my-state",level:2},{value:"Thinking in Subscriptions",id:"thinking-in-subscriptions",level:2},{value:"Creating Subscribable Props",id:"creating-subscribable-props",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dealing-with-dynamic-data"},"Dealing With Dynamic Data"),(0,r.kt)("h2",{id:"where-is-my-state"},"Where is My State?"),(0,r.kt)("p",null,"Unlike in React, components using the FSComponent framework have no built in ",(0,r.kt)("inlineCode",{parentName:"p"},"this.state")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"setState()")," method, because they do not have the concept of automatic re-rendering. Re-rendering components or portions of the tree is intentionally left to the developer; this gives the greatest ability to avoid stutter-causing garbage collection pauses triggered by DOM thrashing or the discarding of large numbers of virtual DOM nodes during the re-render and reconciliation process normally undergone by React."),(0,r.kt)("p",null,"However, manually re-rendering or updating DOM nodes can be a painful process, so FSComponent ships with a way to handle lots of usual cases."),(0,r.kt)("h2",{id:"thinking-in-subscriptions"},"Thinking in Subscriptions"),(0,r.kt)("p",null,"FSComponent and the avionics framework are geared towards thinking of data as something that is ",(0,r.kt)("em",{parentName:"p"},"pushed")," to you, as opposed to something that is queried from inside components. This allows components to be notified when there are substantive changes and only take action when action needs to be taken."),(0,r.kt)("p",null,"The avionics framework has a number of observable types available, all under the umbrella of the interface ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscribable")," (for readers) and class ",(0,r.kt)("inlineCode",{parentName:"p"},"Subject")," (for readers and writers). These types can be subscribed to by consumers, and then will be notified when changes to the value occur."),(0,r.kt)("p",null,"For example, you can create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Subject")," on a numeric value, and then alert when the value changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const numberValue = Subject.create<number>(0);\nnumberValue.sub(value => console.log(value));\n\nnumberValue.set(5); //Logs '5'\n")),(0,r.kt)("p",null,"Or, even create values that have different input and output types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const humanReadableNumber = ComputedSubject.create<number, string>(0, num => num === 5 ? "Five" : "Not Five");\nhumanReadableNumber.sub(value => console.log(value));\n\nhumanReadableValue.set(6); //Logs \'Not Five\'\n')),(0,r.kt)("h2",{id:"creating-subscribable-props"},"Creating Subscribable Props"),(0,r.kt)("p",null,"Taking our ",(0,r.kt)("inlineCode",{parentName:"p"},"MyComponent")," example, we can create a prop that accepts a subscribable version of the value instead of a static value by replace the simple ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," type with ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscribable<string>"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface MyComponentProps extends ComponentProps {\n  text: Subscribable<string>;\n}\n")),(0,r.kt)("p",null,"And then in our ",(0,r.kt)("inlineCode",{parentName:"p"},"MyInstrument")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"public connectedCallback(): void {\n  super.connectedCallback();\n\n  const text = Subject.create<string>('Hello MSFS!');\n  FSComponent.render(<MyComponent text={text} />, document.getElementById('InstrumentContent'));\n\n  text.set('Hello, subscribers!');\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscribable")," and not the concrete ",(0,r.kt)("inlineCode",{parentName:"p"},"Subject")," types in your props interface definition is highly recommended. Using ",(0,r.kt)("inlineCode",{parentName:"p"},"Subject")," can allow the component itself to write value updates, which is often not what is desired.")),(0,r.kt)("p",null,"You'll notice that we didn't change ",(0,r.kt)("inlineCode",{parentName:"p"},"MyComponent"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"render()")," function at all: it still has ",(0,r.kt)("inlineCode",{parentName:"p"},"this.props.text"),' in the same place that it did before. Yet, if you rebuild/resync this, you\'ll notice that the text now reads "Hello, subscribers!". How did this happen?'),(0,r.kt)("p",null,"In FSComponent, subscribable values can appear within HTML elements in JSX and will be automatically re-rendered at their current DOM location, as long as they possess a ",(0,r.kt)("inlineCode",{parentName:"p"},"toString()")," method. Additionally, you can place subscribable values in place of HTML element attribute values, as long as the underlying value types match, and those attributes will also be automatically updated when the subscribable value notifies of a change. However, you ",(0,r.kt)("strong",{parentName:"p"},"cannot")," use a subscribable value as a child of a component to get automatic re-rendering:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const subscribable = Subject.create<number>(0);\n\n//Valid\npublic render(): VNode {\n  return (\n    <div>{subscribable}</div>\n  );\n}\n\npublic render(): VNode {\n  return (\n    <div height={subscribable}>Some Text</div>\n  );\n}\n\n//Invalid\npublic render(): VNode {\n  return (\n    <SomeComponent>{subscribable}</SomeComponent>\n  );\n}\n")))}d.isMDXComponent=!0}}]);