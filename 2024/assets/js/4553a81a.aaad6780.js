"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["999451"],{384985:function(e,n,i){i.r(n),i.d(n,{metadata:()=>d,contentTitle:()=>t,default:()=>h,assets:()=>a,toc:()=>c,frontMatter:()=>r});var d=JSON.parse('{"id":"api/g3000common/type-aliases/ToldLandingPerformanceResult","title":"Type Alias: ToldLandingPerformanceResult","description":"ToldLandingPerformanceResult: object","source":"@site/docs/api/g3000common/type-aliases/ToldLandingPerformanceResult.md","sourceDirName":"api/g3000common/type-aliases","slug":"/api/g3000common/type-aliases/ToldLandingPerformanceResult","permalink":"/msfs-avionics-mirror/2024/docs/api/g3000common/type-aliases/ToldLandingPerformanceResult","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"ToldFlapsOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/g3000common/type-aliases/ToldFlapsOptions"},"next":{"title":"ToldRollingTakeoffOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/g3000common/type-aliases/ToldRollingTakeoffOptions"}}'),s=i("785893"),l=i("250065");let r={},t="Type Alias: ToldLandingPerformanceResult",a={},c=[{value:"Type declaration",id:"type-declaration",level:2},{value:"crosswind",id:"crosswind",level:3},{value:"flaps",id:"flaps",level:3},{value:"headwind",id:"headwind",level:3},{value:"limitsExceeded",id:"limitsexceeded",level:3},{value:"maxCrosswind",id:"maxcrosswind",level:3},{value:"maxHeadwind",id:"maxheadwind",level:3},{value:"maxPressureAltitude",id:"maxpressurealtitude",level:3},{value:"maxRunwayWeight",id:"maxrunwayweight",level:3},{value:"maxTailwind",id:"maxtailwind",level:3},{value:"maxTemperature",id:"maxtemperature",level:3},{value:"maxWeight",id:"maxweight",level:3},{value:"minPressureAltitude",id:"minpressurealtitude",level:3},{value:"minTemperature",id:"mintemperature",level:3},{value:"pressure",id:"pressure",level:3},{value:"pressureAltitude",id:"pressurealtitude",level:3},{value:"runwayLengthAvailable",id:"runwaylengthavailable",level:3},{value:"runwayLengthRequiredRef",id:"runwaylengthrequiredref",level:3},{value:"runwayLengthRequiredRef10",id:"runwaylengthrequiredref10",level:3},{value:"temperature",id:"temperature",level:3},{value:"vSpeeds",id:"vspeeds",level:3},{value:"weight",id:"weight",level:3},{value:"Defined in",id:"defined-in",level:2}];function o(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"type-alias-toldlandingperformanceresult",children:"Type Alias: ToldLandingPerformanceResult"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"ToldLandingPerformanceResult"}),": ",(0,s.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Landing performance values."}),"\n",(0,s.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,s.jsx)(n.h3,{id:"crosswind",children:"crosswind"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"crosswind"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The crosswind component, in knots, used in the calculation of this result. Positive values indicate wind direction\nfrom the left of the runway (i.e. wind blowing to the right across the runway)."}),"\n",(0,s.jsx)(n.h3,{id:"flaps",children:"flaps"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"flaps"}),": ",(0,s.jsx)(n.code,{children:"string"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The name of the flaps setting used in the calculation of this result, or ",(0,s.jsx)(n.code,{children:"undefined"})," if flaps configuration was\nnot used in the calculation."]}),"\n",(0,s.jsx)(n.h3,{id:"headwind",children:"headwind"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"headwind"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The headwind component, in knots, used in the calculation of the result."}),"\n",(0,s.jsx)(n.h3,{id:"limitsexceeded",children:"limitsExceeded"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"limitsExceeded"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The landing limits exceeded, as bitflags."}),"\n",(0,s.jsx)(n.h3,{id:"maxcrosswind",children:"maxCrosswind"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"maxCrosswind"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The maximum allowed crosswind component, in knots."}),"\n",(0,s.jsx)(n.h3,{id:"maxheadwind",children:"maxHeadwind"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"maxHeadwind"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The maximum allowed headwind component, in knots."}),"\n",(0,s.jsx)(n.h3,{id:"maxpressurealtitude",children:"maxPressureAltitude"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"maxPressureAltitude"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The maximum allowed landing pressure altitude, in feet."}),"\n",(0,s.jsx)(n.h3,{id:"maxrunwayweight",children:"maxRunwayWeight"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"maxRunwayWeight"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The maximum allowed landing weight for the available runway length. A negative value indicates that the weight\ncould not be calculated. This weight is based on runway length required for a landing at Vref."}),"\n",(0,s.jsx)(n.h3,{id:"maxtailwind",children:"maxTailwind"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"maxTailwind"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The maximum allowed tailwind component, in knots."}),"\n",(0,s.jsx)(n.h3,{id:"maxtemperature",children:"maxTemperature"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"maxTemperature"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The maximum allowed landing temperature, in degrees Celsius."}),"\n",(0,s.jsx)(n.h3,{id:"maxweight",children:"maxWeight"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"maxWeight"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The maximum allowed landing weight, in pounds."}),"\n",(0,s.jsx)(n.h3,{id:"minpressurealtitude",children:"minPressureAltitude"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"minPressureAltitude"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The minimum allowed landing pressure altitude, in feet."}),"\n",(0,s.jsx)(n.h3,{id:"mintemperature",children:"minTemperature"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"minTemperature"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The minimum allowed landing temperature, in degrees Celsius."}),"\n",(0,s.jsx)(n.h3,{id:"pressure",children:"pressure"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"pressure"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The pressure, in hectopascals, used in the calculation of this result."}),"\n",(0,s.jsx)(n.h3,{id:"pressurealtitude",children:"pressureAltitude"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"pressureAltitude"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The pressure altitude, in feet, used in the calculation of this result."}),"\n",(0,s.jsx)(n.h3,{id:"runwaylengthavailable",children:"runwayLengthAvailable"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"runwayLengthAvailable"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The available runway length, in feet, used in the calculation of this result."}),"\n",(0,s.jsx)(n.h3,{id:"runwaylengthrequiredref",children:"runwayLengthRequiredRef"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"runwayLengthRequiredRef"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The runway length required, in feet, for a landing at Vref. A negative value indicates that the length could not\nbe calculated."}),"\n",(0,s.jsx)(n.h3,{id:"runwaylengthrequiredref10",children:"runwayLengthRequiredRef10"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"runwayLengthRequiredRef10"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The runway length required, in feet, for a landing at Vref+10. Only defined for contaminated runway surface\nconditions. A negative value indicates that the length could not be calculated."}),"\n",(0,s.jsx)(n.h3,{id:"temperature",children:"temperature"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"temperature"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The temperature, in degrees Celsius, used in the calculation of this result."}),"\n",(0,s.jsx)(n.h3,{id:"vspeeds",children:"vSpeeds"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"readonly"})," ",(0,s.jsx)(n.strong,{children:"vSpeeds"}),": readonly ",(0,s.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/type-aliases/ToldVSpeed",children:(0,s.jsx)(n.code,{children:"ToldVSpeed"})}),"[]"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"V-speeds."}),"\n",(0,s.jsx)(n.h3,{id:"weight",children:"weight"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"weight"}),": ",(0,s.jsx)(n.code,{children:"number"})," | ",(0,s.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The landing weight, in pounds, used in the calculation of this result."}),"\n",(0,s.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/workingtitle-instruments-g3000/html_ui/Shared/Performance/TOLD/ToldTypes.ts:206"})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return t},a:function(){return r}});var d=i(667294);let s={},l=d.createContext(s);function r(e){let n=d.useContext(l);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),d.createElement(l.Provider,{value:n},e.children)}}}]);