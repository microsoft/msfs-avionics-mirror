"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["703622"],{576714:function(e,n,s){s.r(n),s.d(n,{metadata:()=>r,contentTitle:()=>a,default:()=>c,assets:()=>d,toc:()=>l,frontMatter:()=>i});var r=JSON.parse('{"id":"framework-systems/sounds/soundserver","title":"SoundServer","description":"Introduction","source":"@site/docs/framework-systems/sounds/soundserver.md","sourceDirName":"framework-systems/sounds","slug":"/framework-systems/sounds/soundserver","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/sounds/soundserver","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"SoundServer","sidebar_position":1},"sidebar":"sidebar","previous":{"title":"Plugin Support","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/fmc/plugin-support"},"next":{"title":"Aural Alert System","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/sounds/aural-alert-system"}}'),t=s("785893"),o=s("250065");let i={sidebar_label:"SoundServer",sidebar_position:1},a="SoundServer",d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Setting Up SoundServer",id:"setting-up-soundserver",level:2},{value:"Using Sound Packets",id:"using-sound-packets",level:2},{value:"Playing Simple Sounds",id:"playing-simple-sounds",level:2},{value:"Subscribing to Sound Packet Events",id:"subscribing-to-sound-packet-events",level:2},{value:"Using <code>SoundServerController</code>",id:"using-soundservercontroller",level:2}];function u(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"soundserver",children:"SoundServer"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["The sim's native API for playing sounds from JS/HTML instruments (",(0,t.jsx)(n.code,{children:"Coherent.call('PLAY_INSTRUMENT_SOUND', soundId)"}),") is functional but bare. The SDK class ",(0,t.jsx)(n.code,{children:"SoundServer"})," provides a richer interface for playing sounds. With SoundServer, you can queue sounds, play multiple sound events in sequence, loop sounds, and be notified when sounds are finished playing."]}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-soundserver",children:"Setting Up SoundServer"}),"\n",(0,t.jsxs)(n.p,{children:["SoundServer was designed to be lightweight. Using it only requires a single instance of the ",(0,t.jsx)(n.code,{children:"SoundServer"})," class and access to the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/getting-started/using-the-event-bus",children:"event bus"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The first step to using SoundServer is to create an instance of the ",(0,t.jsx)(n.code,{children:"SoundServer"})," class. There should be only one instance of ",(0,t.jsx)(n.code,{children:"SoundServer"})," across all instruments in your airplane. Once you have an instance of ",(0,t.jsx)(n.code,{children:"SoundServer"}),", you need to hook up its ",(0,t.jsx)(n.code,{children:"onSoundEnd()"})," callback method to the identically named callback in ",(0,t.jsx)(n.code,{children:"BaseInstrument"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { EventBus, SoundServer } from '@microsoft/msfs-sdk';\r\n\r\nclass MyInstrument extends BaseInstrument {\r\n\r\n  private readonly bus = new EventBus();\r\n  private readonly soundServer = new SoundServer(this.bus);\r\n\r\n  // ...\r\n\r\n  public onSoundEnd(soundEventId: Name_Z): void {\r\n    super.onSoundEnd(soundEventId);\r\n\r\n    this.soundServer.onSoundEnd(soundEventId);\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once the above items are completed, the final step is to ensure that all code that interacts with ",(0,t.jsx)(n.code,{children:"SoundServer"})," waits until the server is initialized. To know exactly when the server is initialized, you should subscribe to the ",(0,t.jsx)(n.code,{children:"sound_server_initialized"})," topic on the event bus:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SoundServerEvents } from '@microsoft/msfs-sdk';\r\n\r\nbus.getSubscriber<SoundServerEvents>().on('sound_server_initialized').handle(isInit => {\r\n  if (isInit) {\r\n    // Do things...\r\n  }\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-sound-packets",children:"Using Sound Packets"}),"\n",(0,t.jsxs)(n.p,{children:["SoundServer operates using the concept of ",(0,t.jsx)(n.em,{children:"sound packets"}),'. A sound packet is the fundamental "unit" of sound that can be played with SoundServer. Each sound packet has the following properties:']}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key"}),": A string that is used to reference the packet. Packets with the same key are not allowed to play at the same time. When a packet is queued, it is queued with other packets with the same key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sequence"}),": A string or array of strings that define the sound events that are played for the packet. Each string in the sequence should be an avionics sound event ID defined in the airplane's ",(0,t.jsx)(n.code,{children:"sound.xml"}),". If an array of strings is used, then each sound event in the array is played in order. Sound events are also known as ",(0,t.jsx)(n.em,{children:"sound atoms"})," because they are the shortest bits of sound that can be played, and once a sound event starts playing it cannot be stopped until it ends."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"continuous"}),": Whether the packet's sound event sequence plays in an infinite loop."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"timeout"}),': The maximum amount of time the packet\'s sound event sequence is considered to be "still playing". After the timeout duration, the system proceeds as if the sequence has finished playing, regardless of whether all the sound events in the sequence have actually finished playing. This behavior is included to prevent the system from permanently locking up if a sound event fails to play. If the packet is continuous, then the timeout is reset every time the packet loops to the beginning of its sequence. The default timeout is 10000 milliseconds.']}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To play sound packets, use the event bus to send commands to ",(0,t.jsx)(n.code,{children:"SoundServer"}),". There are three different commands that will cause a packet to be played, each with slightly different behavior:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SoundServerControlEvents } from '@microsoft/msfs-sdk';\r\n\r\n// This will play the sound packet if and only if another packet with the same key is not currently playing.\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_play', {\r\n  key: 'my-packet',\r\n  sequence: 'my_sound_event',\r\n  continuous: false\r\n}, true, false);\r\n\r\n// This will queue the sound packet to be played at the earliest opportunity. If no packet with the same key is\r\n// already playing or queued, then the packet will be played immediately. Otherwise, it will be queued to play after\r\n// all other packets with the same key that are currently playing or queued have finished playing.\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_queue', {\r\n  key: 'my-packet',\r\n  sequence: 'my_sound_event',\r\n  continuous: false\r\n}, true, false);\r\n\r\n// This will play the sound packet at the earliest opportunity. If no packet with the same key is already playing,\r\n// then the packet will be played immediately. Otherwise, the currently playing packet with the same key will be\r\n// stopped at the earliest opportunity (remember that sound atoms cannot be interrupted while they are playing), any\r\n// queued packets with the same key will be discarded, and the new packet will start playing once the currently playing\r\n// packet has been stopped.\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_interrupt', {\r\n  key: 'my-packet',\r\n  sequence: 'my_sound_event',\r\n  continuous: false\r\n}, true, false);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["When publishing any of the topics defined by ",(0,t.jsx)(n.code,{children:"SoundServerControlEvents"}),", you ",(0,t.jsx)(n.strong,{children:"must"})," specify that the topic be synced to other instruments and not cached (the third and fourth parameters of ",(0,t.jsx)(n.code,{children:"pub()"}),", respectively). Failure to specify these options will result in incorrect behavior."]})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"The sim does not allow more than one instance of the same avionics sound event to be played simultaneously. Attempting to play a sound event while it is already playing simply has no effect. Therefore, it is recommended to avoid playing sound packets with different keys that also contain the same sound event at the same time. Doing so will not cause any errors, but the results will likely not match the original intention."})}),"\n",(0,t.jsxs)(n.p,{children:["You can also command ",(0,t.jsx)(n.code,{children:"SoundServer"})," to stop packets from playing once they are already playing or queued by referencing their keys:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SoundServerControlEvents } from '@microsoft/msfs-sdk';\r\n\r\n// This will stop a continuous sound packet from looping. Has no effect on non-continuous packets that are already\r\n// playing. Any queued packets with the specified key will be discarded.\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_stop', 'my-packet', true, false);\r\n\r\n// This will stop an already playing packet at the earliest opportunity (remember that sound atoms cannot be\r\n// interrupted while they are playing). Any queued packets with the specified key will be discarded.\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_kill', 'my-packet', true, false);\r\n\r\n// Same as 'sound_server_stop', but for all packets.\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_stop_all', undefined, true, false);\r\n\r\n// Same as 'sound_server_kill', but for all packets.\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_kill_all', undefined, true, false);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"playing-simple-sounds",children:"Playing Simple Sounds"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes you just need to play a simple sound event and don't need the fancy sequencing or queueing features of SoundServer. To facilitate these use cases, SoundServer supports simplified commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SoundServerControlEvents } from '@microsoft/msfs-sdk';\r\n\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_play_sound', 'my_sound_event', true, false);\r\n// ... is equivalent to ...\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_play', {\r\n  key: 'my_sound_event',\r\n  sequence: 'my_sound_event',\r\n  continuous: false\r\n}, true, false);\r\n\r\n// ---------------------------------------------------------------------------------------------------------\r\n\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_start_sound', 'my_sound_event', true, false);\r\n// ... is equivalent to ...\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_play', {\r\n  key: 'my_sound_event',\r\n  sequence: 'my_sound_event',\r\n  continuous: true\r\n}, true, false);\r\n\r\n// ---------------------------------------------------------------------------------------------------------\r\n\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_stop_sound', 'my_sound_event', true, false);\r\n// ... is equivalent to ...\r\nbus.getPublisher<SoundServerControlEvents>().pub('sound_server_stop', 'my_sound_event', true, false);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"subscribing-to-sound-packet-events",children:"Subscribing to Sound Packet Events"}),"\n",(0,t.jsx)(n.p,{children:"If you need to know when a sound packet starts or finishes playing, you can subscribe to the following event bus topics:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SoundServerEvents } from '@microsoft/msfs-sdk';\r\n\r\nbus.getSubscriber<SoundServerEvents>().on('sound_server_packet_started').handle(key => {\r\n  console.log(`A sound packet with key: ${key} has started playing.`);\r\n});\r\n\r\nbus.getSubscriber<SoundServerEvents>().on('sound_server_packet_ended').handle(key => {\r\n  console.log(`A sound packet with key: ${key} has finished playing.`);\r\n});\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"using-soundservercontroller",children:["Using ",(0,t.jsx)(n.code,{children:"SoundServerController"})]}),"\n",(0,t.jsxs)(n.p,{children:["For convenience, the ",(0,t.jsx)(n.code,{children:"SoundServerController"})," class is provided to abstract away some of the boilerplate associated with publishing commands to ",(0,t.jsx)(n.code,{children:"SoundServer"})," over the event bus. For each command topic in ",(0,t.jsx)(n.code,{children:"SoundServerControlEvents"}),", there is a corresponding method on ",(0,t.jsx)(n.code,{children:"SoundServerController"})," which publishes the command. The controller also facilitates waiting for ",(0,t.jsx)(n.code,{children:"SoundServer"})," to be initialized. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SoundServerController } from '@microsoft/msfs-sdk';\r\n\r\nconst controller = new SoundServerController(bus);\r\n\r\n// Wait for SoundServer to be initialized...\r\ncontroller.awaitInitialized().then(() => {\r\n\r\n  controller.play({\r\n    key: 'my-packet',\r\n    sequence: 'my_sound_event',\r\n    continuous: false\r\n  });\r\n\r\n  controller.queue({\r\n    key: 'my-packet',\r\n    sequence: 'my_sound_event',\r\n    continuous: false\r\n  });\r\n\r\n  // ...\r\n\r\n});\n"})})]})}function c(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},250065:function(e,n,s){s.d(n,{Z:function(){return a},a:function(){return i}});var r=s(667294);let t={},o=r.createContext(t);function i(e){let n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);