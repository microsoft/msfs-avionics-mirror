"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["136630"],{120117:function(e,i,t){t.r(i),t.d(i,{metadata:()=>n,contentTitle:()=>o,default:()=>h,assets:()=>l,toc:()=>c,frontMatter:()=>r});var n=JSON.parse('{"id":"g3000/features/initialization","title":"G3000 Initialization","description":"Introduction","source":"@site/docs/g3000/features/initialization.md","sourceDirName":"g3000/features","slug":"/g3000/features/initialization","permalink":"/msfs-avionics-mirror/2024/docs/g3000/features/initialization","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_label":"Initialization","sidebar_position":5},"sidebar":"sidebar","previous":{"title":"Aural Alerts","permalink":"/msfs-avionics-mirror/2024/docs/g3000/features/aural-alerts"},"next":{"title":"Weight and Fuel","permalink":"/msfs-avionics-mirror/2024/docs/g3000/features/weight-fuel"}}'),a=t("785893"),s=t("250065");let r={sidebar_label:"Initialization",sidebar_position:5},o="G3000 Initialization",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Choosing an ID",id:"choosing-an-id",level:2},{value:"Configuring Tasks",id:"configuring-tasks",level:2},{value:"Configuring Reset",id:"configuring-reset",level:2},{value:"Listening to Initialization State",id:"listening-to-initialization-state",level:2},{value:"Controlling Initialization State",id:"controlling-initialization-state",level:2},{value:"Example",id:"example",level:2}];function d(e){let i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.header,{children:(0,a.jsx)(i.h1,{id:"g3000-initialization",children:"G3000 Initialization"})}),"\n",(0,a.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsxs)(i.p,{children:["The G3000 initialization feature (sometimes referred to as ",(0,a.jsx)(i.em,{children:"FMS initialization"})," or ",(0,a.jsx)(i.em,{children:"avionics initialization"}),") guides users through a list of pre-flight tasks every time the system powers up."]}),"\n",(0,a.jsxs)(i.p,{children:["By default, the initialization feature is disabled in the G3000. In order to enable the feature in an airplane installation, you must create an instance of ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/InitializationProcess",children:(0,a.jsx)(i.code,{children:"InitializationProcess"})})," and return it via an MFD plugin's ",(0,a.jsxs)(i.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/mfd-plugins#initialization",children:[(0,a.jsx)(i.code,{children:"getInitializationProcess()"})," method"]}),"."]}),"\n",(0,a.jsxs)(i.p,{children:["The following sections will walk you through how to configure the feature using ",(0,a.jsx)(i.code,{children:"InitializationProcess"}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"choosing-an-id",children:"Choosing an ID"}),"\n",(0,a.jsxs)(i.p,{children:["Each ",(0,a.jsx)(i.code,{children:"InitializationProcess"})," must be created with an ID string. The ID can be any arbitrary string and is mainly meant to be used by plugins to positively identify a particular ",(0,a.jsx)(i.code,{children:"InitializationProcess"})," instance. For example, because an ",(0,a.jsx)(i.code,{children:"InitializationProcess"}),' returned by one plugin can be "overridden" by another plugin, a plugin can compare the ID of the process ultimately chosen by the G3000 system with the one it returned and take some action only if the IDs are the same.']}),"\n",(0,a.jsx)(i.h2,{id:"configuring-tasks",children:"Configuring Tasks"}),"\n",(0,a.jsx)(i.p,{children:"The initialization process is comprised of one or more tasks. All tasks must be completed in order for initialization to be completed. Tasks are presented to the user in a particular order with the intention that the tasks are completed in that order, but there is no strict requirement that the user must complete the tasks in order."}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.code,{children:"InitializationProcess"})," provides its tasks as an array via the ",(0,a.jsx)(i.code,{children:"tasks"})," property. The order of the tasks in the array determines the order in which the tasks are presented to the user."]}),"\n",(0,a.jsx)(i.admonition,{type:"warning",children:(0,a.jsxs)(i.p,{children:["An ",(0,a.jsx)(i.code,{children:"InitializationProcess"})," that does not define any tasks is treated as invalid and will lead to the initialization feature being disabled."]})}),"\n",(0,a.jsxs)(i.p,{children:["A task represents an action or set of related actions that the user must complete. Each task is associated with a particular ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/gtc-framework",children:"GTC page"}),'. When selecting the task from the GTC Initialization page or advancing through tasks using the "Next" button, the associated GTC page is opened. Typically the associated page is where the user would complete the action(s) required by the task. Each task also has a completion state. The logic that governs whether a task is considered complete can be defined independently for each task.']}),"\n",(0,a.jsxs)(i.p,{children:["Each task is implemented as an instance of ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/InitializationTask",children:(0,a.jsx)(i.code,{children:"InitializationTask"})}),". The interface requires the following properties to be defined:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(i.table,{children:[(0,a.jsx)(i.thead,{children:(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.th,{children:"Name"}),(0,a.jsx)(i.th,{children:"Description"})]})}),(0,a.jsxs)(i.tbody,{children:[(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:"uid"}),(0,a.jsxs)(i.td,{children:["The task's unique ID string. The ID ",(0,a.jsx)(i.strong,{children:"must"})," be unique across all tasks defined by the initialization process."]})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:"label"}),(0,a.jsx)(i.td,{children:"The label text displayed for the task on the GTC Initialization page (see image below)."})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:"iconSrc"}),(0,a.jsx)(i.td,{children:"The absolute path to the image asset to use for the icon displayed for the task on the GTC Initialization page (see image below)."})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:"gtcPageKey"}),(0,a.jsx)(i.td,{children:"The key of the GTC page view associated with this task."})]}),(0,a.jsxs)(i.tr,{children:[(0,a.jsx)(i.td,{children:"isCompleted"}),(0,a.jsxs)(i.td,{children:["A ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/subscriptions/subscribables",children:(0,a.jsx)(i.code,{children:"Subscribable"})})," that provides whether the task is considered complete."]})]})]})]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"GTC Initialization Page Task",src:t(193695).Z+"",width:"489",height:"386"})}),"\n",(0,a.jsx)(i.h2,{id:"configuring-reset",children:"Configuring Reset"}),"\n",(0,a.jsxs)(i.p,{children:["The user has the ability to reset the initialization process at any time. Resetting initialization should trigger state-modifying effects tied to each task defined by the process. These effects are implemented using the ",(0,a.jsx)(i.code,{children:"onReset()"})," callback method on ",(0,a.jsx)(i.code,{children:"InitializationProcess"}),". There are no enforced restrictions on what should happen in ",(0,a.jsx)(i.code,{children:"onReset()"}),", but it is recommended to implement it such that all tasks revert to the uncompleted state."]}),"\n",(0,a.jsx)(i.admonition,{type:"note",children:(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.code,{children:"onReset()"})," is only called when the user manually resets the initialization process. It is ",(0,a.jsx)(i.strong,{children:"not"})," called when the G3000 system is power cycled."]})}),"\n",(0,a.jsxs)(i.p,{children:["When the user attempts to reset the initialization process in the GTC Initialization page, a popup confirmation dialog is displayed along with a message (see image below). This message is defined using the ",(0,a.jsx)(i.code,{children:"resetMessage"})," property on ",(0,a.jsx)(i.code,{children:"InitializationProcess"}),". Forced linebreaks can be inserted in the message using the newline character (",(0,a.jsx)(i.code,{children:"'\\n'"}),")."]}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"GTC Initialization Page Reset Dialog",src:t(139057).Z+"",width:"490",height:"387"})}),"\n",(0,a.jsx)(i.h2,{id:"listening-to-initialization-state",children:"Listening to Initialization State"}),"\n",(0,a.jsxs)(i.p,{children:["Plugins can monitor the state of the initialization process using the ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/getting-started/using-the-event-bus",children:"event bus"}),". The ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/InitializationEvents",children:(0,a.jsx)(i.code,{children:"InitializationEvents"})})," interface defines the event bus topics to which initialization state data is published. GTC plugins also have access to initialization state data via ",(0,a.jsx)(i.code,{children:"GtcService::initializationDataProvider"}),", which provides an instance of ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/InitializationDataProvider",children:(0,a.jsx)(i.code,{children:"InitializationDataProvider"})}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"controlling-initialization-state",children:"Controlling Initialization State"}),"\n",(0,a.jsxs)(i.p,{children:["The base G3000 package handles all typical user interaction with the initialization feature. However, if you require the ability to programmatically modify initialization state, you can do so by publishing the ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/getting-started/using-the-event-bus",children:"event bus"})," topics defined in ",(0,a.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/InitializationControlEvents",children:(0,a.jsx)(i.code,{children:"InitializationControlEvents"})}),"."]}),"\n",(0,a.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(i.p,{children:"The following example code creates a plugin that returns an initialization process with two commonly encountered tasks: initializing the active flight plan and initializing weight and fuel data."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-typescript",children:"import { ConsumerSubject, EventBus, registerPlugin, Subject, Subscribable } from '@microsoft/msfs-sdk';\r\n\r\nimport { Fms } from '@microsoft/msfs-garminsdk';\r\n\r\nimport {\r\n  FlightPlanStore, FuelTotalizerControlEvents, G3000FilePaths, GtcViewKeys, InitializationProcess, InitializationTask,\r\n  WeightFuelEvents, WeightFuelUserSettings\r\n} from '@microsoft/msfs-wtg3000-common';\r\n\r\nimport { AbstractG3000MfdPlugin } from '@microsoft/msfs-wtg3000-mfd';\r\n\r\nclass ExampleInitializationPlugin extends AbstractG3000MfdPlugin {\r\n  public getInitializationProcess(): InitializationProcess {\r\n    return new ExampleInitializationProcess(this.binder.bus, this.binder.fms, this.binder.flightPlanStore);\r\n  }\r\n}\r\n\r\nregisterPlugin(ExampleInitializationPlugin);\r\n\r\n/**\r\n * An example initialization process that defines two tasks: Flight Plan and Weight and Fuel.\r\n */\r\nclass ExampleInitializationProcess implements InitializationProcess {\r\n\r\n  public readonly id = 'example';\r\n\r\n  public readonly tasks: readonly InitializationTask[];\r\n\r\n  public readonly resetMessage = 'Resetting Init Clears:\\nActive Flight Plan, Weight Data';\r\n\r\n  private readonly weightFuelSettingManager = WeightFuelUserSettings.getManager(this.bus);\r\n\r\n  public constructor(private readonly bus: EventBus, private readonly fms: Fms, flightPlanStore: FlightPlanStore) {\r\n    this.tasks = [\r\n      new ExampleFlightPlanInitializationTask(fms, flightPlanStore),\r\n      new ExampleWeightFuelInitializationTask(bus)\r\n    ];\r\n  }\r\n\r\n  public async onReset(): Promise<void> {\r\n    // On reset:\r\n    // - Clear all flight plans.\r\n    // - Reset fuel on board and cargo weight settings to their default (un-initialized) values,\r\n    //   and reset the fuel totalizer's fuel remaining value to zero.\r\n\r\n    await this.fms.resetAllFlightPlans();\r\n\r\n    this.weightFuelSettingManager.getSetting('weightFuelInitialFob').value = -1;\r\n    this.weightFuelSettingManager.getSetting('weightFuelCargo').value = 0;\r\n    this.bus.getPublisher<FuelTotalizerControlEvents>().pub('fuel_totalizer_set_remaining', 0, true, false);\r\n  }\r\n}\r\n\r\n/**\r\n * An example flight plan initialization task. This task requires the user to create an active flight plan with at\r\n * least two legs (single-leg flight plans are not considered valid flight plans in the G3000).\r\n */\r\nclass ExampleFlightPlanInitializationTask implements InitializationTask {\r\n\r\n  public readonly uid = 'flight-plan';\r\n\r\n  public readonly label = 'Flight Plan';\r\n\r\n  public readonly iconSrc = `${G3000FilePaths.ASSETS_PATH}/Images/GTC/icon_small_fplan.png`;\r\n\r\n  public readonly gtcPageKey = GtcViewKeys.FlightPlan;\r\n\r\n  private readonly _isCompleted = Subject.create(false);\r\n  public readonly isCompleted = this._isCompleted as Subscribable<boolean>;\r\n\r\n  public constructor(private readonly fms: Fms, flightPlanStore: FlightPlanStore) {\r\n    this.updateCompleted();\r\n    flightPlanStore.flightPlanLegsChanged.on(this.updateCompleted.bind(this));\r\n  }\r\n\r\n  private updateCompleted(): void {\r\n    this._isCompleted.set(this.fms.hasPrimaryFlightPlan() && this.fms.getPrimaryFlightPlan().length > 1);\r\n  }\r\n}\r\n\r\n/**\r\n * An example weight and fuel initialization task. This task requires the user to initialize weight and fuel data\r\n * such that a valid aircraft weight can be computed.\r\n */\r\nclass ExampleWeightFuelInitializationTask implements InitializationTask {\r\n\r\n  public readonly uid = 'weight-fuel';\r\n\r\n  public readonly label = 'Weight and\\nFuel';\r\n\r\n  public readonly iconSrc = `${G3000FilePaths.ASSETS_PATH}/Images/GTC/icon_weight_fuel.png`;\r\n\r\n  public readonly gtcPageKey = GtcViewKeys.WeightAndFuel;\r\n\r\n  private readonly aircraftWeight = ConsumerSubject.create(null, -1);\r\n\r\n  public readonly isCompleted = this.aircraftWeight.map(weight => weight >= 0) as Subscribable<boolean>;\r\n\r\n  public constructor(bus: EventBus) {\r\n    this.aircraftWeight.setConsumer(bus.getSubscriber<WeightFuelEvents>().on('weightfuel_aircraft_weight'));\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(i.p,{children:"The following image shows the GTC Initialization page generated using the above example code."}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.img,{alt:"GTC Initialization Page Example",src:t(517161).Z+"",width:"489",height:"386"})})]})}function h(e={}){let{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},517161:function(e,i,t){t.d(i,{Z:function(){return n}});let n=t.p+"assets/images/gtc-initialization-page-example-dea7361dfcf32447ce175a0529886ba5.jpg"},139057:function(e,i,t){t.d(i,{Z:function(){return n}});let n=t.p+"assets/images/gtc-initialization-page-reset-dialog-e88f32699b509549f45214dee6517565.jpg"},193695:function(e,i,t){t.d(i,{Z:function(){return n}});let n=t.p+"assets/images/gtc-initialization-page-task-8ca41992db5b28463d04bdb1da28298d.jpg"},250065:function(e,i,t){t.d(i,{Z:function(){return o},a:function(){return r}});var n=t(667294);let a={},s=n.createContext(a);function r(e){let i=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);