"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[54238],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(a),m=i,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||r;return a?n.createElement(h,s(s({ref:t},d),{},{components:a})):n.createElement(h,s({ref:t},d))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},82723:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_label:"CAS System",sidebar_position:1},s="CAS System",o={unversionedId:"cas/cas-system",id:"cas/cas-system",title:"CAS System",description:"Introduction",source:"@site/docs/cas/cas-system.md",sourceDirName:"cas",slug:"/cas/cas-system",permalink:"/msfs-avionics-mirror/docs/cas/cas-system",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"CAS System",sidebar_position:1},sidebar:"sidebar",previous:{title:"Defining Aural Alerts Using panel.xml",permalink:"/msfs-avionics-mirror/docs/sounds/defining-aural-alerts-using-panel-xml"},next:{title:"Defining CAS Alerts Using panel.xml",permalink:"/msfs-avionics-mirror/docs/cas/defining-cas-alerts-using-panel-xml"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"System Description",id:"system-description",level:2},{value:"Setting Up the System",id:"setting-up-the-system",level:2},{value:"Registering Alerts",id:"registering-alerts",level:2},{value:"Activating Alerts",id:"activating-alerts",level:2},{value:"Deactivating Alerts",id:"deactivating-alerts",level:2},{value:"Using <code>CasAlertTransporter</code>",id:"using-casalerttransporter",level:2},{value:"Acknowledging Alerts",id:"acknowledging-alerts",level:2},{value:"Alert Debounce",id:"alert-debounce",level:2},{value:"Inhibit States",id:"inhibit-states",level:2},{value:"Consuming CAS State",id:"consuming-cas-state",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...a}=e;return(0,i.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cas-system"},"CAS System"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"CAS System is an SDK API that aims to provide a generic framework from which you can build a CAS (crew alerting system) for your specific avionics system. The API provides classes that handle much of the state logic involved in deciding which CAS alerts should be displayed. By design, the API provides limited support for actually rendering CAS displays since those details are largely avionics/airplane-specific."),(0,i.kt)("h2",{id:"system-description"},"System Description"),(0,i.kt)("p",null,"CAS System is based on the concept of ",(0,i.kt)("em",{parentName:"p"},"alerts")," and ",(0,i.kt)("em",{parentName:"p"},"messages"),". An ",(0,i.kt)("em",{parentName:"p"},"alert")," represents a condition or state which, when ",(0,i.kt)("em",{parentName:"p"},"true")," or ",(0,i.kt)("em",{parentName:"p"},"active"),", should be communicated to the pilot through the CAS. A ",(0,i.kt)("em",{parentName:"p"},"message")," is a textual element that is displayed to the pilot by the CAS to communicate the presence of one or more alerts. As alerts are activated and deactivated, the CAS will display and hide their associated messages automatically."),(0,i.kt)("p",null,"An alert has three basic properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ID"),(0,i.kt)("li",{parentName:"ul"},"Message Text"),(0,i.kt)("li",{parentName:"ul"},"Suffixes")),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"ID")," of an alert is used to identify and reference it. ",(0,i.kt)("em",{parentName:"p"},"Each alert must have a unique ID"),". The ID of an alert is never exposed or displayed to the user. On the other hand, the ",(0,i.kt)("em",{parentName:"p"},"message text")," of an alert determines the text that is displayed by CAS when the alert is active. Two different alerts are allowed to have the same message text. An alert's ",(0,i.kt)("em",{parentName:"p"},"suffixes")," are a list of possible text that is appended to the end of the message text when displaying the alert. Examples of commonly used suffixes include ",(0,i.kt)("inlineCode",{parentName:"p"},"L"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"R"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),", etc. An alert may have zero suffixes, in which case its message text will be all that is displayed."),(0,i.kt)("h2",{id:"setting-up-the-system"},"Setting Up the System"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," class handles the bulk of the CAS state logic. For the system to function, you must create at least one instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," on any of your airplane's JS/HTML instruments. Most CAS state information is not shared between instruments; therefore you must create one instance ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," on each instrument that needs access to data provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem"),". Do not create more than one instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," on any given instrument - doing so will lead to undesired behavior."),(0,i.kt)("p",null,"When instantiating ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem"),", exactly one instance across all instruments must be designated as the ",(0,i.kt)("em",{parentName:"p"},"primary")," instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { CasSystem, EventBus } from '@microsoft/msfs-sdk';\n\nconst bus = new EventBus();\nnew CasSystem(bus, true /* designates this instance as the primary */);\n")),(0,i.kt)("p",null,"All other instances must be designated as non-primary:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"new CasSystem(bus, false);\n// ---- OR ----\nnew CasSystem(bus);\n")),(0,i.kt)("p",null,"Once ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," is instantiated, it is ready to use."),(0,i.kt)("h2",{id:"registering-alerts"},"Registering Alerts"),(0,i.kt)("p",null,"Alerts must be registered with ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," before they can be used. Registering an alert is done using the ",(0,i.kt)("inlineCode",{parentName:"p"},"CasRegistrationManager")," class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { CasRegistrationManager, EventBus } from '@microsoft/msfs-sdk';\n\nconst bus = new EventBus();\nconst manager = new CasRegistrationManager(bus);\n\n// Registers an alert with ID 'parking-brake' which will display 'PARKING BRAKE' with no suffixes.\nmanager.register({\n  uuid: 'parking-brake',\n  message: 'PARKING BRAKE'\n});\n\n// Registers an alert with ID 'generator-off' which will display 'GEN OFF' with the 'L' and 'R' suffixes.\nmanager.register({\n  uuid: 'generator-off',\n  message: 'GEN OFF',\n  suffixes: ['L', 'R']\n});\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"register()")," method takes in a single object that satisfies the ",(0,i.kt)("inlineCode",{parentName:"p"},"CasAlertDefinition")," type. The two properties required by ",(0,i.kt)("inlineCode",{parentName:"p"},"CasAlertDefinition")," are ",(0,i.kt)("inlineCode",{parentName:"p"},"uuid")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"message"),", which define the ID and message text of the registered alert, respectively. The property ",(0,i.kt)("inlineCode",{parentName:"p"},"suffix")," is optional and is an array of strings that define the alert's suffixes. The order of suffixes in the array determine the order in which they will be displayed at the end of a message."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You don't have to wait for all ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," instances to be created before registering alerts using ",(0,i.kt)("inlineCode",{parentName:"p"},"CasRegistrationManager"),". The manager will ensure that any instances of ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," created after an alert was registered still receive the registration information for that alert.")),(0,i.kt)("h2",{id:"activating-alerts"},"Activating Alerts"),(0,i.kt)("p",null,"Three pieces of information are needed to activate an alert: the ID of the alert, the suffix to activate, and the priority level at which to activate the alert."),(0,i.kt)("p",null,"When an alert is activated, a single message is displayed by the CAS with the alert's message text. For alerts with suffixes, each suffix is activated independently. No matter how many suffixes are active for a given alert, only one message is ever displayed; it is left up to individual CAS displays to determine how to present a message with multiple active suffixes. Finally, each alert (and suffix, if applicable) can be activated at four different priority levels (in order of decreasing priority): ",(0,i.kt)("em",{parentName:"p"},"warning"),", ",(0,i.kt)("em",{parentName:"p"},"caution"),", ",(0,i.kt)("em",{parentName:"p"},"advisory"),", and ",(0,i.kt)("em",{parentName:"p"},"safeop"),". Like with suffixes, each priority level is activated independently. If an alert is activated at multiple priority levels, the highest priority level takes precedence and only that priority level is displayed by the CAS."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," will automatically sort alert messages based on order of activation and priority level. Messages with higher priority always appear before messages with lower priority. Within the same priority level, messages are sorted such that those with the most recently activated alerts appear first. Activating an alert with suffix and priority level that were already activated does not count as a more recent activation."),(0,i.kt)("p",null,"The event bus is used to activate alerts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AnnunciationType, CasEvents } from '@microsoft/msfs-sdk';\n\n// Activates the alert with ID 'parking-brake' with no suffix and at advisory priority.\nbus.getPublisher<CasEvents>().pub('cas_activate_alert', {\n  key: { uuid: 'parking-brake' },\n  priority: AnnunciationType.Advisory\n}, true, false);\n\n// Activates the alert with ID 'generator-off' with the 'L' suffix and at caution priority.\nbus.getPublisher<CasEvents>().pub('cas_activate_alert', {\n  key: { uuid: 'generator-off', suffix: 'L' },\n  priority: AnnunciationType.Caution\n}, true, false);\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CasEvents")," interface defines event bus topics related to CAS. The ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_activate_alert")," topic is used to activate alerts, and requires event data in the form of an object that has the ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"priority")," properties. The ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," property defines the ID and optionally suffix of the alert to activate. The ",(0,i.kt)("inlineCode",{parentName:"p"},"priority")," property defines the priority level at which to activate the alert as a member of the ",(0,i.kt)("inlineCode",{parentName:"p"},"AnnunciationType")," enum."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"When publishing the ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_activate_alert")," topic, you ",(0,i.kt)("strong",{parentName:"p"},"must")," specify that the topic be synced to other instruments and not cached (the third and fourth parameters of ",(0,i.kt)("inlineCode",{parentName:"p"},"pub()"),", respectively). Failure to specify these options will result in incorrect behavior.")),(0,i.kt)("h2",{id:"deactivating-alerts"},"Deactivating Alerts"),(0,i.kt)("p",null,"Deactivating an alert will cause it to not be displayed as a message. Like with activation, deactivating alerts is done independently for each suffix and each priority level. The event bus is used to deactivate alerts using syntax similar to that used to activate alerts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AnnunciationType, CasEvents } from '@microsoft/msfs-sdk';\n\n// Deactivates the alert with ID 'generator-off' with the 'L' suffix and at caution priority.\nbus.getPublisher<CasEvents>().pub('cas_deactivate_alert', {\n  key: { uuid: 'generator-off', suffix: 'L' },\n  priority: AnnunciationType.Caution\n}, true, false);\n")),(0,i.kt)("h2",{id:"using-casalerttransporter"},"Using ",(0,i.kt)("inlineCode",{parentName:"h2"},"CasAlertTransporter")),(0,i.kt)("p",null,"While it is always possible to manually activate and deactivate alerts using the event bus as shown above, most of the time you will end up wanting to bind the activation state of an alert to some set of conditions that can be reduced to a boolean state. Since this pattern is so common, we have provided a convenience class that allows you to do that while minimizing repetitive boilerplate: ",(0,i.kt)("inlineCode",{parentName:"p"},"CasAlertTransporter"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CasAlertTransporter")," allows you to bind the activation state of an alert to a boolean value, taken either from a ",(0,i.kt)("inlineCode",{parentName:"p"},"Subscribable")," or a custom update loop. It also allows you to directly set the activation state with its ",(0,i.kt)("inlineCode",{parentName:"p"},"set()")," method."),(0,i.kt)("p",null,"Let's say that we want to activate the ",(0,i.kt)("inlineCode",{parentName:"p"},"parking-brake")," CAS alert at advisory priority whenever the parking brake is engaged. We can do that using the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AnnunciationType, CasAlertTransporter, SimVarValueType } from '@microsoft/msfs-sdk';\n\nCasAlertTransporter.create(bus, 'parking-brake', AnnunciationType.Advisory)\n  .bindUpdate(() => SimVar.GetSimVarValue('BRAKE PARKING POSITION', SimVarValueType.Bool) !== 0);\n")),(0,i.kt)("p",null,"The above code will evaluate the ",(0,i.kt)("inlineCode",{parentName:"p"},"BRAKE PARKING POSITION")," simvar in an update loop and use the result to activate/deactivate the ",(0,i.kt)("inlineCode",{parentName:"p"},"parking-brake")," alert accordingly."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Update loops spawned by ",(0,i.kt)("inlineCode",{parentName:"p"},"CasAlertTransporter")," update every JS instrument frame. The performance overhead for each update loop is relatively minor. However, we still recommend that you reserve the use of update loops for when the bound state cannot be evaluated in an event-driven manner.")),(0,i.kt)("p",null,"Here's another example where ",(0,i.kt)("inlineCode",{parentName:"p"},"CasAlertTransporter")," is used to control activation of a low-fuel alert with suffixes - this time using event-driven logic:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"CasAlertTransporter.create(bus, 'fuel-low', AnnunciationType.Caution, 'L')\n  .bind(ConsumerSubject.create(bus.getSubscriber<EngineEvents>().on('fuel_left'), 0), fuel => fuel < 10);\n\nCasAlertTransporter.create(bus, 'fuel-low', AnnunciationType.Caution, 'R')\n  .bind(ConsumerSubject.create(bus.getSubscriber<EngineEvents>().on('fuel_right'), 0), fuel => fuel < 10);\n")),(0,i.kt)("p",null,"For more detailed information on ",(0,i.kt)("inlineCode",{parentName:"p"},"CasAlertTransporter"),", please refer to the ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.CasAlertTransporter"},"API documentation"),"."),(0,i.kt)("h2",{id:"acknowledging-alerts"},"Acknowledging Alerts"),(0,i.kt)("p",null,"When an alert is activated at the warning or caution priority levels, it will cause the master warning or caution state to become active, respectively. Once active, the master warning and caution states remain that way until alerts are acknowledged. Acknowledging alerts can be done at each of the warning or caution priority levels by triggering the ",(0,i.kt)("inlineCode",{parentName:"p"},"MASTER_WARNING_ACKNOWLEDGE")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"MASTER_CAUTION_ACKNOWLEDGE")," key events. The master warning and caution states can be read from the local vars ",(0,i.kt)("inlineCode",{parentName:"p"},"L:Generic_Master_Warning_Active")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"L:Generic_Master_Caution_Active")," (0 = inactive, 1 = active)."),(0,i.kt)("h2",{id:"alert-debounce"},"Alert Debounce"),(0,i.kt)("p",null,"For certain alerts, you may wish to delay displaying a CAS message for an alert until the alert has been active for a certain amount of time. CAS System provides support for this so that you don't have to manage your own timers. Debounce delays can be specified for an alert during registration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Adds a 2000-millisecond debounce delay to the 'generator-off' alert.\nmanager.register({\n  uuid: 'generator-off',\n  message: 'GEN OFF',\n  suffixes: ['L', 'R'],\n  debounceTime: 2000\n});\n")),(0,i.kt)("p",null,"When activating a debounced alert, the delay is tracked separately for each suffix and priority level. Deactivating an alert will reset the debounce timer for the deactivated suffix/priority level."),(0,i.kt)("h2",{id:"inhibit-states"},"Inhibit States"),(0,i.kt)("p",null,"A common scenario when working with CAS is needing to inhibit some alerts from being displayed at certain times, even if the conditions required to activate those alerts are met. This can be done through the use of ",(0,i.kt)("em",{parentName:"p"},"inhibit states"),". Each alert can optionally declare a set of inhibit states such that when any of those inhibit states are active, the alert will not be displayed as a message, even if activated by ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_activate_alert"),". Inhibit states are activated and deactivated using the ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_activate_inhibit_state")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_deactivate_inhibit_state")," event bus topics, respectively."),(0,i.kt)("p",null,"Here is an example of how to declare an inhibit state for an alert and how to activate and deactivate an inhibit state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// Registers a FUEL TEMP MISCOMPARE alert that is inhibited by the 'in-air' state.\nmanager.register({\n  uuid: 'fuel-temp-miscompare',\n  message: 'FUEL TEMP MISCOMPARE',\n  inhibitedBy: ['in-air']\n});\n\n// Activates/deactivates the 'in-air' inhibit state based on whether the aircraft is on the ground.\nbus.getSubscriber<AdcEvents>().on('on_ground').whenChanged().handle(isOnGround => {\n  bus.getPublisher<CasEvents>().pub(isOnGround ? 'cas_deactivate_inhibit_state' : 'cas_activate_inhibit_state', 'in-air', true, false);\n});\n")),(0,i.kt)("p",null,"If an inhibit state becomes active, any messages for already-active alerts affected by the inhibit state will be removed from the CAS. Once all inhibit states affecting an alert become deactivated and the alert is still active, a message for the alert will immediately appear on the CAS."),(0,i.kt)("h2",{id:"consuming-cas-state"},"Consuming CAS State"),(0,i.kt)("p",null,"You can retrieve information on the state of CAS in several different ways. If you want a list of all displayed messages, then you can get that directly from ",(0,i.kt)("inlineCode",{parentName:"p"},"CasSystem")," via its ",(0,i.kt)("inlineCode",{parentName:"p"},"casActiveMessageSubject")," property. This property exposes a ",(0,i.kt)("inlineCode",{parentName:"p"},"SubscribableArray")," of messages in the order in which they should be displayed. It is particularly useful when rendering a CAS display component."),(0,i.kt)("p",null,"If you need information on whether a particular CAS alert is displayed as a message, deriving it from a list of all displayed messages can be cumbersome. Instead, you can subscribe to the ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_alert_displayed")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_alert_hidden")," event bus topics, defined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"CasStateEvents")," interface. There is also a ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_alert_acknowledged")," topic for when an alert that is displayed as a message has been acknowledged."),(0,i.kt)("p",null,"Finally, you can subscribe to the ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_master_warning_active")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cas_master_caution_active")," topics (also defined by ",(0,i.kt)("inlineCode",{parentName:"p"},"CasStateEvents"),") to consume the master warning and master caution states."))}u.isMDXComponent=!0}}]);