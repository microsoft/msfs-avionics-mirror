"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[47694],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(a),m=n,u=c["".concat(s,".").concat(m)]||c[m]||f[m]||i;return a?r.createElement(u,l(l({ref:t},d),{},{components:a})):r.createElement(u,l({ref:t},d))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},20107:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(87462),n=(a(67294),a(3905));const i={id:"MapFieldOfViewCalculator",title:"Class: MapFieldOfViewCalculator",sidebar_label:"MapFieldOfViewCalculator",sidebar_position:0,custom_edit_url:null},l=void 0,o={unversionedId:"framework/classes/MapFieldOfViewCalculator",id:"framework/classes/MapFieldOfViewCalculator",title:"Class: MapFieldOfViewCalculator",description:"Calculates map projection parameters for fields of view which encompass sets of geographic points.",source:"@site/docs/framework/classes/MapFieldOfViewCalculator.md",sourceDirName:"framework/classes",slug:"/framework/classes/MapFieldOfViewCalculator",permalink:"/msfs-avionics-mirror/docs/framework/classes/MapFieldOfViewCalculator",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"MapFieldOfViewCalculator",title:"Class: MapFieldOfViewCalculator",sidebar_label:"MapFieldOfViewCalculator",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"MapDataIntegrityModule",permalink:"/msfs-avionics-mirror/docs/framework/classes/MapDataIntegrityModule"},next:{title:"MapFlightPlanController",permalink:"/msfs-avionics-mirror/docs/framework/classes/MapFlightPlanController"}},s={},p=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"calculateFov",id:"calculatefov",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4}],d={toc:p},c="wrapper";function f(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Calculates map projection parameters for fields of view which encompass sets of geographic points."),(0,n.kt)("h2",{id:"constructors"},"Constructors"),(0,n.kt)("h3",{id:"constructor"},"constructor"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"new MapFieldOfViewCalculator"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"maxIter?"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"rangeTolerance?"),"): ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/MapFieldOfViewCalculator"},(0,n.kt)("inlineCode",{parentName:"a"},"MapFieldOfViewCalculator"))),(0,n.kt)("p",null,"Constructor."),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"maxIter")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"MapFieldOfViewCalculator.DEFAULT_MAX_ITER")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The maximum number of iterations to perform when calculating fields of view. Defaults to MapFieldOfViewCalculator.DEFAULT_MAX_ITER.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"rangeTolerance")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"MapFieldOfViewCalculator.DEFAULT_RANGE_TOLERANCE")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The error tolerance of calculated field of view ranges, as a fraction of the ideal range for each field of view. Defaults to MapFieldOfViewCalculator.DEFAULT_RANGE_TOLERANCE.")))),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/MapFieldOfViewCalculator"},(0,n.kt)("inlineCode",{parentName:"a"},"MapFieldOfViewCalculator"))),(0,n.kt)("h4",{id:"defined-in"},"Defined in"),(0,n.kt)("p",null,"src/sdk/components/map/MapFieldOfViewCalculator.ts:37"),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"calculatefov"},"calculateFov"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"calculateFov"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"mapProjection"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"focus"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"margins"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"out"),"): ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules#mapfieldofview"},(0,n.kt)("inlineCode",{parentName:"a"},"MapFieldOfView"))),(0,n.kt)("p",null,"Calculates a map field of view, consisting of a range and target location, which encompasses a given set of\ngeographic points (the focus) with the smallest possible range. If there is only one point in the specified focus,\nthen the calculated range will be equal to 0. If the specified focus contains zero points or a field of view could\nnot be calculated, ",(0,n.kt)("inlineCode",{parentName:"p"},"NaN")," will be written to the results."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"mapProjection")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/classes/MapProjection"},(0,n.kt)("inlineCode",{parentName:"a"},"MapProjection"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The projection of the map for which to calculate the field of view.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"focus")),(0,n.kt)("td",{parentName:"tr",align:"left"},"readonly ",(0,n.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/LatLonInterface"},(0,n.kt)("inlineCode",{parentName:"a"},"LatLonInterface")),"[]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"An array of points comprising the focus of the field of view.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"margins")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,n.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,n.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,n.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,n.kt)("inlineCode",{parentName:"td"},'"sort"')," ","|"," ",(0,n.kt)("inlineCode",{parentName:"td"},'"copyWithin"'),">",">"),(0,n.kt)("td",{parentName:"tr",align:"left"},"The margins around the projected map boundaries to respect, as ",(0,n.kt)("inlineCode",{parentName:"td"},"[left, top, right, bottom]")," in pixels. The field of view will be calculated in order to avoid placing any points in the focus outside of the margins.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"out")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/modules#mapfieldofview"},(0,n.kt)("inlineCode",{parentName:"a"},"MapFieldOfView"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The object to which to write the results.")))),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules#mapfieldofview"},(0,n.kt)("inlineCode",{parentName:"a"},"MapFieldOfView"))),(0,n.kt)("p",null,"The calculated field of view for the specified focus."),(0,n.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,n.kt)("p",null,"src/sdk/components/map/MapFieldOfViewCalculator.ts:56"))}f.isMDXComponent=!0}}]);