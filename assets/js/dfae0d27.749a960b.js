"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[28443],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,u=m["".concat(p,".").concat(c)]||m[c]||k[c]||i;return n?a.createElement(u,o(o({ref:t},s),{},{components:n})):a.createElement(u,o({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1398:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={id:"MapProjection",title:"Class: MapProjection",sidebar_label:"MapProjection",sidebar_position:0,custom_edit_url:null},o=void 0,l={unversionedId:"framework/classes/MapProjection",id:"framework/classes/MapProjection",title:"Class: MapProjection",description:"A geographic projection model for a map. MapProjection uses a mercator projection.",source:"@site/docs/framework/classes/MapProjection.md",sourceDirName:"framework/classes",slug:"/framework/classes/MapProjection",permalink:"/msfs-avionics-mirror/docs/framework/classes/MapProjection",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"MapProjection",title:"Class: MapProjection",sidebar_label:"MapProjection",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"MapOwnAirplanePropsModule",permalink:"/msfs-avionics-mirror/docs/framework/classes/MapOwnAirplanePropsModule"},next:{title:"MapRangeModule",permalink:"/msfs-avionics-mirror/docs/framework/classes/MapRangeModule"}},p={},d=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"addChangeListener",id:"addchangelistener",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"applyQueued",id:"applyqueued",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"geoDistance",id:"geodistance",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"getCenter",id:"getcenter",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"getCenterProjected",id:"getcenterprojected",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"getGeoProjection",id:"getgeoprojection",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"getHeightRange",id:"getheightrange",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"getProjectedResolution",id:"getprojectedresolution",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"getProjectedSize",id:"getprojectedsize",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"getRange",id:"getrange",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"getRangeEndpoints",id:"getrangeendpoints",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"getRotation",id:"getrotation",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"getScaleFactor",id:"getscalefactor",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"getTarget",id:"gettarget",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"getTargetProjected",id:"gettargetprojected",level:3},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"getTargetProjectedOffset",id:"gettargetprojectedoffset",level:3},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"getWidthRange",id:"getwidthrange",level:3},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"invert",id:"invert",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"isInProjectedBounds",id:"isinprojectedbounds",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"notifyChangeListeners",id:"notifychangelisteners",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"project",id:"project",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"projectedDistance",id:"projecteddistance",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"removeChangeListener",id:"removechangelistener",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"set",id:"set",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"setQueued",id:"setqueued",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-25",level:4}],s={toc:d},m="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A geographic projection model for a map. MapProjection uses a mercator projection."),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new MapProjection"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"projectedWidth"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"projectedHeight"),"): ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/MapProjection"},(0,r.kt)("inlineCode",{parentName:"a"},"MapProjection"))),(0,r.kt)("p",null,"Creates a new map projection."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"projectedWidth")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The initial width of the projection window, in pixels.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"projectedHeight")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The initial height of the projection window, in pixels.")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/MapProjection"},(0,r.kt)("inlineCode",{parentName:"a"},"MapProjection"))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:157"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"addchangelistener"},"addChangeListener"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"addChangeListener"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"listener"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Registers a change listener with this projection. The listener will be called every time this projection changes.\nA listener can be registered multiple times; it will be called once for every time it is registered."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"listener")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/MapProjectionChangeListener"},(0,r.kt)("inlineCode",{parentName:"a"},"MapProjectionChangeListener"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The change listener to register.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:637"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"applyqueued"},"applyQueued"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"applyQueued"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Applies the set of queued projection changes, if any are queued."),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:457"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"geodistance"},"geoDistance"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"geoDistance"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"point1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"point2"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the geographic great-circle distance between two points in great-arc radians. The points can be specified as\neither GeoPoint objects or 2D vectors. If 2D vectors are supplied, they are interpreted as projected points and\ninverse projection will be used to convert them to geographic points."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"point1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"'),">",">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/GeoPointInterface"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPointInterface"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"point2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"'),">",">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/GeoPointInterface"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPointInterface"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point.")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The geographic great-circle distance between the points."),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:594"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getcenter"},"getCenter"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getCenter"),"(): ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/GeoPointReadOnly"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPointReadOnly"))),(0,r.kt)("p",null,"Gets the geographic point located at the center of this projection's projected window."),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/GeoPointReadOnly"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPointReadOnly"))),(0,r.kt)("p",null,"The geographic point located at the center of this projection's projected window."),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:265"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getcenterprojected"},"getCenterProjected"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getCenterProjected"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"Gets the center of this projection's projected window."),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"The center of this projection's projected window."),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:273"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getgeoprojection"},"getGeoProjection"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getGeoProjection"),"(): ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/GeoProjection"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoProjection"))),(0,r.kt)("p",null,"Gets this map projection's GeoProjection instance."),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/GeoProjection"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoProjection"))),(0,r.kt)("p",null,"This map projection's GeoProjection instance."),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:171"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getheightrange"},"getHeightRange"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getHeightRange"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the range of this projection, in great-arc radians, as measured from the top-center to the bottom-center of\nthe projected window."),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The range of this projection's projected window height, in great-arc radians."),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:232"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getprojectedresolution"},"getProjectedResolution"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getProjectedResolution"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the average resolution, in great-arc radians per pixel, of the projected map along a line between the range\nendpoints."),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The average resolution of the projected map along a line between the range endpoints."),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:282"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getprojectedsize"},"getProjectedSize"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getProjectedSize"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"Gets the size of the projected window, in pixels."),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"The size of the projected window."),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:257"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrange"},"getRange"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getRange"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the range of this projection, in great-arc radians, as measured between the projection's two range endpoints."),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The range of this projection, in great-arc radians."),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:204"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrangeendpoints"},"getRangeEndpoints"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getRangeEndpoints"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"Gets the endpoints used to measure the range of the projection, as a 4-tuple ",(0,r.kt)("inlineCode",{parentName:"p"},"[relX1, relY1, relX2, relY2]"),". Each\ncomponent is expressed in relative projected coordinates, where ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is the left/top of the projected window, and\n",(0,r.kt)("inlineCode",{parentName:"p"},"1")," is the right/bottom of the projected window."),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"The endpoints used to measure the range of the projection, as a 4-tuple ",(0,r.kt)("inlineCode",{parentName:"p"},"[relX1, relY1, relX2, relY2]"),"."),(0,r.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:214"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrotation"},"getRotation"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getRotation"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the post-projected (planar) rotation angle of this projection in radians."),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The post-projected rotation angle of this projection."),(0,r.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:249"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getscalefactor"},"getScaleFactor"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getScaleFactor"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the nominal scale factor of this projection. At a scale factor of 1, a distance of one great-arc radian will\nbe projected to a distance of one pixel."),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The nominal scale factor of this projection."),(0,r.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:241"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"gettarget"},"getTarget"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getTarget"),"(): ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/GeoPointReadOnly"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPointReadOnly"))),(0,r.kt)("p",null,"Gets the target geographic point of this projection. The target is guaranteed to be projected to a specific\npoint in the projected window defined by the center of the window plus the target projected offset."),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/GeoPointReadOnly"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPointReadOnly"))),(0,r.kt)("p",null,"The target geographic point of this projection."),(0,r.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:180"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"gettargetprojected"},"getTargetProjected"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getTargetProjected"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"Gets the projected location of the target of this projection."),(0,r.kt)("h4",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"The projected location of the target of this projection."),(0,r.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:196"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"gettargetprojectedoffset"},"getTargetProjectedOffset"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getTargetProjectedOffset"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"Gets the projected offset from the center of the projected window of the target of this projection."),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},'"copyWithin"'),">",">"),(0,r.kt)("p",null,"The projected offset from the center of the projected window of the target of this projection."),(0,r.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:188"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getwidthrange"},"getWidthRange"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getWidthRange"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the range of this projection, in great-arc radians, as measured from the center-left to the center-right of\nthe projected window."),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The range of this projection's projected window width, in great-arc radians."),(0,r.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:223"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"invert"},"invert"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"invert"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"vec"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"out"),"): ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("p",null,"Inverts a set of projected coordinates. This method will determine the geographic point whose projected location\nis the equal to that described by a 2D position vector."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"vec")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"'),">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The 2D position vector describing the location of the projected coordinates.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"out")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/classes/GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The point to which to write the result.")))),(0,r.kt)("h4",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("p",null,"The inverted point."),(0,r.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:546"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"isinprojectedbounds"},"isInProjectedBounds"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"isInProjectedBounds"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"point"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"bounds?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Checks whether a point falls within certain projected bounds. The point can be specified as either a GeoPoint\nobject or a 2D vector. If a GeoPoint object is supplied, it will be projected before the bounds check takes\nplace."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"point")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"'),">",">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/LatLonInterface"},(0,r.kt)("inlineCode",{parentName:"a"},"LatLonInterface"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The point to check.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"bounds?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"'),">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The bounds to check against, expressed as a vector (","[left, top, right, bottom]","). Defaults to the bounds of the projected window.")))),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Whether the point falls within the projected bounds."),(0,r.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:559"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"notifychangelisteners"},"notifyChangeListeners"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"notifyChangeListeners"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"changeFlags"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Notifies all registered change listeners that this projection has been changed."),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"changeFlags")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The types of changes that were made.")))),(0,r.kt)("h4",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:626"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"project"},"project"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"project"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"point"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"out"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array")),(0,r.kt)("p",null,"Projects a set of lat/lon coordinates."),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"point")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/LatLonInterface"},(0,r.kt)("inlineCode",{parentName:"a"},"LatLonInterface"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The point to project.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"out")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The vector to which to write the result.")))),(0,r.kt)("h4",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array")),(0,r.kt)("p",null,"The projected point, as a vector."),(0,r.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:535"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"projecteddistance"},"projectedDistance"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"projectedDistance"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"point1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"point2"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the projected Euclidean distance between two points in pixels. The points can be specified as either GeoPoint\nobjects or 2D vectors. If GeoPoint objects are supplied, they will be projected to convert them to projected\npoints."),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"point1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"'),">",">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/GeoPointInterface"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPointInterface"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"point2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"'),">",">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/GeoPointInterface"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPointInterface"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point.")))),(0,r.kt)("h4",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The projected Euclidean distance between two points."),(0,r.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:612"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"removechangelistener"},"removeChangeListener"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"removeChangeListener"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"listener"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Removes a change listener from this projection. If the specified listener was registered multiple times, this\nmethod will only remove one instance of the listener."),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"listener")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/MapProjectionChangeListener"},(0,r.kt)("inlineCode",{parentName:"a"},"MapProjectionChangeListener"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The listener to remove.")))),(0,r.kt)("h4",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Whether the listener was successfully removed."),(0,r.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:647"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"set"},"set"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"set"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"parameters"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Sets this projection's parameters. Parameters not explicitly defined in the parameters argument will be left\nunchanged."),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"parameters")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/modules#mapprojectionparameters"},(0,r.kt)("inlineCode",{parentName:"a"},"MapProjectionParameters"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The new parameters.")))),(0,r.kt)("h4",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:421"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"setqueued"},"setQueued"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"setQueued"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"parameters"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Sets the projection parameters to be applied when applyQueued() is called."),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"parameters")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/modules#mapprojectionparameters"},(0,r.kt)("inlineCode",{parentName:"a"},"MapProjectionParameters"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The parameter changes to queue.")))),(0,r.kt)("h4",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-25"},"Defined in"),(0,r.kt)("p",null,"src/sdk/components/map/MapProjection.ts:449"))}k.isMDXComponent=!0}}]);