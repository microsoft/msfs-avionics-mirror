"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[20074],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return t?i.createElement(f,o(o({ref:n},c),{},{components:t})):i.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},77334:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=t(87462),a=(t(67294),t(3905));const r={sidebar_label:"Defining CAS Alerts Using panel.xml",sidebar_position:2},o="Defining CAS Alerts Using `panel.xml`",l={unversionedId:"cas/defining-cas-alerts-using-panel-xml",id:"cas/defining-cas-alerts-using-panel-xml",title:"Defining CAS Alerts Using `panel.xml`",description:"Introduction",source:"@site/docs/cas/defining-cas-alerts-using-panel-xml.md",sourceDirName:"cas",slug:"/cas/defining-cas-alerts-using-panel-xml",permalink:"/msfs-avionics-mirror/docs/cas/defining-cas-alerts-using-panel-xml",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Defining CAS Alerts Using panel.xml",sidebar_position:2},sidebar:"sidebar",previous:{title:"CAS System",permalink:"/msfs-avionics-mirror/docs/cas/cas-system"},next:{title:"Overview",permalink:"/msfs-avionics-mirror/docs/g1000/overview"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"The <code>panel.xml</code> Syntax",id:"the-panelxml-syntax",level:2},{value:"Parsing <code>panel.xml</code> Alert Definitions",id:"parsing-panelxml-alert-definitions",level:2}],c={toc:p},d="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"defining-cas-alerts-using-panelxml"},"Defining CAS Alerts Using ",(0,a.kt)("inlineCode",{parentName:"h1"},"panel.xml")),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"When using the CAS System API, you may choose to support defining CAS alerts and their activation criteria in ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml")," using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Annunciation")," syntax. However, keep in mind that this ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml")," API has several limitations:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Activation criteria are limited to what can be evaluated using the sim's standard ",(0,a.kt)("inlineCode",{parentName:"li"},"<Condition>")," tag ",(0,a.kt)("a",{parentName:"li",href:"https://docs.flightsimulator.com/html/Content_Configuration/SimObjects/Aircraft_SimO/Instruments/panel_xml.htm#Condition"},"syntax"),"."),(0,a.kt)("li",{parentName:"ul"},"Only one priority level is supported for each alert."),(0,a.kt)("li",{parentName:"ul"},"Debounce is not supported."),(0,a.kt)("li",{parentName:"ul"},"Inhibit states are not supported."),(0,a.kt)("li",{parentName:"ul"},"The ID of the alert is generated automatically and is not retrievable, meaning you cannot interact with the alert using Typescript.")),(0,a.kt)("h2",{id:"the-panelxml-syntax"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"panel.xml")," Syntax"),(0,a.kt)("p",null,"To define ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml")," CAS alerts, include the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Annunciations>")," tag in the global scope (as a direct child of ",(0,a.kt)("inlineCode",{parentName:"p"},"<PlaneHTMLConfig>"),"). Each ",(0,a.kt)("inlineCode",{parentName:"p"},"<Annunciation>")," tag that is a child of ",(0,a.kt)("inlineCode",{parentName:"p"},"<Annunciations>")," then defines a single alert:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<Annunciations>\n  \x3c!--\n    Defines an alert with message text \'PARKING BRAKE\' that will be activated at advisory priority\n    when the parking brake is engaged.\n  --\x3e\n  <Annunciation>\n    <Type>Advisory</Type>\n    <Text>PARKING BRAKE</Text>\n    <Condition>\n      <Simvar name="BRAKE PARKING POSITION" unit="Bool" />\n    </Condition>\n  </Annunciation>\n\n  \x3c!--\n    Defines an alert with message text \'FUEL LOW\' that will be activated at caution priority\n    with suffixes \'L\' and \'R\' when the fuel in the left and right tanks, respectively,\n    drops below 10 gallons.\n  --\x3e\n  <Annunciation>\n    <Type>Caution</Type>\n    <Text>FUEL LOW</Text>\n    <Condition Suffix="L">\n      <Lower>\n        <Simvar name="FUEL TANK LEFT MAIN QUANTITY" unit="gallon"/>\n        <Constant>10</Constant>\n      </Lower>\n    </Condition>\n    <Condition Suffix="R">\n      <Lower>\n        <Simvar name="FUEL TANK RIGHT MAIN QUANTITY" unit="gallon"/>\n        <Constant>10</Constant>\n      </Lower>\n    </Condition>\n  </Annunciation>\n</Annunciations>\n')),(0,a.kt)("h2",{id:"parsing-panelxml-alert-definitions"},"Parsing ",(0,a.kt)("inlineCode",{parentName:"h2"},"panel.xml")," Alert Definitions"),(0,a.kt)("p",null,"To parse and use CAS alert definitions from ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml"),", you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"XMLAnnunciationFactory")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"CasSystemLegacyAdapter")," classes.\n",(0,a.kt)("inlineCode",{parentName:"p"},"XMLAnnunciationFactory")," is used to parse the ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml")," document and generate an array of ",(0,a.kt)("inlineCode",{parentName:"p"},"Annunciation")," definitions. This array is then provided to ",(0,a.kt)("inlineCode",{parentName:"p"},"CasSystemLegacyAdapter"),", which will automatically register the appropriate alerts and generate the logic required to activate/deactivate them."),(0,a.kt)("p",null,"The following is an example of how to configure an instrument to support ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml"),"-defined CAS alerts (it is assumed that ",(0,a.kt)("inlineCode",{parentName:"p"},"CasSystem")," is already set up and initialized):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { EventBus, CasSystemLegacyAdapter, CompositeLogicXMLHost, XMLAnnunciationFactory } from '@microsoft/msfs-sdk';\n\nclass MyInstrument extends BaseInstrument {\n\n  private readonly bus = new EventBus();\n\n  private readonly logicHost = new CompositeLogicXMLHost();\n\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    const annunciations = new XMLAnnunciationFactory(this).parseConfig(this.xmlConfig);\n    const adapter = new CasSystemLegacyAdapter(this.bus, this.logicHost, annunciations);\n    adapter.start();\n  }\n}\n")))}u.isMDXComponent=!0}}]);