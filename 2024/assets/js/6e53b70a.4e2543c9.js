"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["345888"],{920308:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>s,default:()=>h,assets:()=>a,toc:()=>o,frontMatter:()=>c});var t=JSON.parse('{"id":"api/framework/type-aliases/AltitudeSelectManagerOptions","title":"Type Alias: AltitudeSelectManagerOptions","description":"AltitudeSelectManagerOptions: object","source":"@site/docs/api/framework/type-aliases/AltitudeSelectManagerOptions.md","sourceDirName":"api/framework/type-aliases","slug":"/api/framework/type-aliases/AltitudeSelectManagerOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/AltitudeSelectManagerOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"AltitudeConstraintSimple","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/AltitudeConstraintSimple"},"next":{"title":"AnimatorEasingFunc","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/AnimatorEasingFunc"}}'),r=i("785893"),l=i("250065");let c={},s="Type Alias: AltitudeSelectManagerOptions",a={},o=[{value:"Type declaration",id:"type-declaration",level:2},{value:"accelFilter?",id:"accelfilter",level:3},{value:"accelInputCountThreshold?",id:"accelinputcountthreshold",level:3},{value:"accelInputCountWindow?",id:"accelinputcountwindow",level:3},{value:"accelInputRateThreshold?",id:"accelinputratethreshold",level:3},{value:"accelInputRateTransformer()?",id:"accelinputratetransformer",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"accelInputRateWindow?",id:"accelinputratewindow",level:3},{value:"accelResetOnDirectionChange?",id:"accelresetondirectionchange",level:3},{value:"accelType?",id:"acceltype",level:3},{value:"altitudeHoldSlotIndex?",id:"altitudeholdslotindex",level:3},{value:"incrLarge",id:"incrlarge",level:3},{value:"incrLargeMetric?",id:"incrlargemetric",level:3},{value:"incrSmall",id:"incrsmall",level:3},{value:"incrSmallMetric?",id:"incrsmallmetric",level:3},{value:"initOnInput?",id:"initoninput",level:3},{value:"initToIndicatedAlt?",id:"inittoindicatedalt",level:3},{value:"inputIncrLargeThreshold",id:"inputincrlargethreshold",level:3},{value:"lockAltToStepOnIncr?",id:"lockalttosteponincr",level:3},{value:"lockAltToStepOnIncrMetric?",id:"lockalttosteponincrmetric",level:3},{value:"lockAltToStepOnSet?",id:"lockalttosteponset",level:3},{value:"lockAltToStepOnSetMetric?",id:"lockalttosteponsetmetric",level:3},{value:"maxValue",id:"maxvalue",level:3},{value:"maxValueMetric?",id:"maxvaluemetric",level:3},{value:"minValue",id:"minvalue",level:3},{value:"minValueMetric?",id:"minvaluemetric",level:3},{value:"supportMetric",id:"supportmetric",level:3},{value:"transformSetToIncDec?",id:"transformsettoincdec",level:3},{value:"Defined in",id:"defined-in",level:2}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"type-alias-altitudeselectmanageroptions",children:"Type Alias: AltitudeSelectManagerOptions"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"AltitudeSelectManagerOptions"}),": ",(0,r.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Configuration options for ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/AltitudeSelectManager",children:"AltitudeSelectManager"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsx)(n.h3,{id:"accelfilter",children:"accelFilter?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"accelFilter"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Bitflags to use to filter input events for input acceleration. Only events that pass the filter are eligible to\ntrigger input acceleration. Defaults to ",(0,r.jsx)(n.code,{children:"AltitudeSelectManagerAccelFilter.All"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"accelinputcountthreshold",children:"accelInputCountThreshold?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"accelInputCountThreshold"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The required number of consecutive small-increment inputs received to trigger input acceleration. Only applies\nto the ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/AltitudeSelectManagerAccelType#smalltolarge",children:"AltitudeSelectManagerAccelType.SmallToLarge"})," acceleration type. A threshold less than or equal to\nzero disables input acceleration. Defaults to 0."]}),"\n",(0,r.jsx)(n.h3,{id:"accelinputcountwindow",children:"accelInputCountWindow?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"accelInputCountWindow"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The maximum amount of time, in milliseconds, between input events that are counted as consecutive for triggering\ninput acceleration. Only applies to the ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/AltitudeSelectManagerAccelType#smalltolarge",children:"AltitudeSelectManagerAccelType.SmallToLarge"})," acceleration type.\nDefaults to 300."]}),"\n",(0,r.jsx)(n.h3,{id:"accelinputratethreshold",children:"accelInputRateThreshold?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"accelInputRateThreshold"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The required average rate of inputs received to trigger input acceleration. Only applies to the\n",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/AltitudeSelectManagerAccelType#dynamicsmall",children:"AltitudeSelectManagerAccelType.DynamicSmall"})," acceleration type. A threshold less than or equal to zero\nenables input acceleration for every eligible input. Defaults to 0."]}),"\n",(0,r.jsx)(n.h3,{id:"accelinputratetransformer",children:"accelInputRateTransformer()?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"accelInputRateTransformer"}),": (",(0,r.jsx)(n.code,{children:"inputRate"}),") => ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A function that transforms an observed input rate to an accelerated input rate when input acceleration is active.\nThe amount by which each input increments the selected altitude setting will be adjusted such that the setting's\nrate of change approximately equals that which would be effected by unaccelerated inputs at the transformed rate."}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Parameter"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"inputRate"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"number"})}),(0,r.jsx)(n.td,{children:"The observed input rate to transform, in inputs per second."})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"number"})}),"\n",(0,r.jsx)(n.p,{children:"The accelerated input rate for the specified observed input rate, in inputs per second."}),"\n",(0,r.jsx)(n.h3,{id:"accelinputratewindow",children:"accelInputRateWindow?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"accelInputRateWindow"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The window of time, in milliseconds, over which input rate is averaged when calculating input acceleration. Only\napplies to the ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/AltitudeSelectManagerAccelType#dynamicsmall",children:"AltitudeSelectManagerAccelType.DynamicSmall"})," acceleration type. A window less than or equal\nto zero disables input acceleration. Defaults to 0."]}),"\n",(0,r.jsx)(n.h3,{id:"accelresetondirectionchange",children:"accelResetOnDirectionChange?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"accelResetOnDirectionChange"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Whether to reset input acceleration if the direction of increment changes. Defaults to ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"acceltype",children:"accelType?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"accelType"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/AltitudeSelectManagerAccelType",children:(0,r.jsx)(n.code,{children:"AltitudeSelectManagerAccelType"})})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The type of input acceleration to use when handling increment/decrement events. Defaults to\n",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/AltitudeSelectManagerAccelType#none",children:"AltitudeSelectManagerAccelType.None"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"altitudeholdslotindex",children:"altitudeHoldSlotIndex?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"altitudeHoldSlotIndex"}),": ",(0,r.jsx)(n.code,{children:"1"})," | ",(0,r.jsx)(n.code,{children:"2"})," | ",(0,r.jsx)(n.code,{children:"3"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The altitude hold slot index to use. Defaults to 1."}),"\n",(0,r.jsx)(n.h3,{id:"incrlarge",children:"incrLarge"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"incrLarge"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NumberUnitInterface",children:(0,r.jsx)(n.code,{children:"NumberUnitInterface"})}),"<",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/UnitFamily#distance",children:(0,r.jsx)(n.code,{children:"Distance"})}),">"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The value to increase/decrease the selected altitude setting on a large increment."}),"\n",(0,r.jsx)(n.h3,{id:"incrlargemetric",children:"incrLargeMetric?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"incrLargeMetric"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NumberUnitInterface",children:(0,r.jsx)(n.code,{children:"NumberUnitInterface"})}),"<",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/UnitFamily#distance",children:(0,r.jsx)(n.code,{children:"Distance"})}),">"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The value to increase/decrease the selected altitude setting on a large increment in metric mode. If undefined,\nit will be set equal to the large increment value in non-metric mode."}),"\n",(0,r.jsx)(n.h3,{id:"incrsmall",children:"incrSmall"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"incrSmall"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NumberUnitInterface",children:(0,r.jsx)(n.code,{children:"NumberUnitInterface"})}),"<",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/UnitFamily#distance",children:(0,r.jsx)(n.code,{children:"Distance"})}),">"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The value to increase/decrease the selected altitude setting on a small increment."}),"\n",(0,r.jsx)(n.h3,{id:"incrsmallmetric",children:"incrSmallMetric?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"incrSmallMetric"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NumberUnitInterface",children:(0,r.jsx)(n.code,{children:"NumberUnitInterface"})}),"<",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/UnitFamily#distance",children:(0,r.jsx)(n.code,{children:"Distance"})}),">"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The value to increase/decrease the selected altitude setting on a small increment in metric mode. If undefined,\nit will be set equal to the small increment value in non-metric mode."}),"\n",(0,r.jsx)(n.h3,{id:"initoninput",children:"initOnInput?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"initOnInput"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Whether to initialize the selected altitude setting only on the first detected input. If ",(0,r.jsx)(n.code,{children:"false"}),", the selected\naltitude will be initialized as soon as the manager is fully initialized. Defaults to ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"inittoindicatedalt",children:"initToIndicatedAlt?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"initToIndicatedAlt"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Whether to initialize the selected altitude setting to the indicated altitude. If ",(0,r.jsx)(n.code,{children:"false"}),", the selected altitude\nwill be initialized to ",(0,r.jsx)(n.code,{children:"0"}),". Defaults to ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"inputincrlargethreshold",children:"inputIncrLargeThreshold"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"inputIncrLargeThreshold"}),": ",(0,r.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The threshold for an altitude select change key input value above which the input is interpreted as a large\nincrement."}),"\n",(0,r.jsx)(n.h3,{id:"lockalttosteponincr",children:"lockAltToStepOnIncr?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"lockAltToStepOnIncr"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Whether to lock the selected altitude setting to multiples of the appropriate increment value on a small or large\nincrement. Defaults to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"lockalttosteponincrmetric",children:"lockAltToStepOnIncrMetric?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"lockAltToStepOnIncrMetric"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Whether to lock the selected altitude setting to multiples of the appropriate increment value on a small or large\nincrement in metric mode. If undefined, it will be set equal to the lock flag in non-metric mode."}),"\n",(0,r.jsx)(n.h3,{id:"lockalttosteponset",children:"lockAltToStepOnSet?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"lockAltToStepOnSet"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Whether to lock the selected altitude setting to multiples of the small increment on a SET event. Defaults to\n",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"lockalttosteponsetmetric",children:"lockAltToStepOnSetMetric?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"lockAltToStepOnSetMetric"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Whether to lock the selected altitude setting to multiples of the small increment in metric mode on a SET event.\nIf undefined, it will be set equal to the lock flag in non-metric mode."}),"\n",(0,r.jsx)(n.h3,{id:"maxvalue",children:"maxValue"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"maxValue"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NumberUnitInterface",children:(0,r.jsx)(n.code,{children:"NumberUnitInterface"})}),"<",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/UnitFamily#distance",children:(0,r.jsx)(n.code,{children:"Distance"})}),">"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The maximum value of the selected altitude setting."}),"\n",(0,r.jsx)(n.h3,{id:"maxvaluemetric",children:"maxValueMetric?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"maxValueMetric"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NumberUnitInterface",children:(0,r.jsx)(n.code,{children:"NumberUnitInterface"})}),"<",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/UnitFamily#distance",children:(0,r.jsx)(n.code,{children:"Distance"})}),">"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The maximum value of the selected altitude setting in metric mode. If undefined, it will be set equal to the\nmaximum value in non-metric mode."}),"\n",(0,r.jsx)(n.h3,{id:"minvalue",children:"minValue"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"minValue"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NumberUnitInterface",children:(0,r.jsx)(n.code,{children:"NumberUnitInterface"})}),"<",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/UnitFamily#distance",children:(0,r.jsx)(n.code,{children:"Distance"})}),">"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The minimum value of the selected altitude setting."}),"\n",(0,r.jsx)(n.h3,{id:"minvaluemetric",children:"minValueMetric?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"minValueMetric"}),": ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/NumberUnitInterface",children:(0,r.jsx)(n.code,{children:"NumberUnitInterface"})}),"<",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/UnitFamily#distance",children:(0,r.jsx)(n.code,{children:"Distance"})}),">"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The minimum value of the selected altitude setting in metric mode. If undefined, it will be set equal to the\nminimum value in non-metric mode."}),"\n",(0,r.jsx)(n.h3,{id:"supportmetric",children:"supportMetric"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"supportMetric"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Whether to support metric mode."}),"\n",(0,r.jsx)(n.h3,{id:"transformsettoincdec",children:"transformSetToIncDec?"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," ",(0,r.jsx)(n.strong,{children:"transformSetToIncDec"}),": ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Whether to treat all intercepted SET key events as if they were INC or DEC events. Defaults to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(n.p,{children:"src/sdk/autopilot/managers/AltitudeSelectManager.ts:71"})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return s},a:function(){return c}});var t=i(667294);let r={},l=t.createContext(r);function c(e){let n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);