"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[85803],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>u});var a=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,l=function(e,t){if(null==e)return{};var r,a,l={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var r=e.components,l=e.mdxType,n=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(r),v=l,u=c["".concat(s,".").concat(v)]||c[v]||m[v]||n;return r?a.createElement(u,i(i({ref:t},d),{},{components:r})):a.createElement(u,i({ref:t},d))}));function u(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=r.length,i=new Array(n);i[0]=v;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<n;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}v.displayName="MDXCreateElement"},33711:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var a=r(87462),l=(r(67294),r(3905));const n={id:"GlidepathServiceLevelCalculator",title:"Class: GlidepathServiceLevelCalculator",sidebar_label:"GlidepathServiceLevelCalculator",sidebar_position:0,custom_edit_url:null},i=void 0,o={unversionedId:"garminsdk/classes/GlidepathServiceLevelCalculator",id:"garminsdk/classes/GlidepathServiceLevelCalculator",title:"Class: GlidepathServiceLevelCalculator",description:"A calculator for providing the glidepath service level.",source:"@site/docs/garminsdk/classes/GlidepathServiceLevelCalculator.md",sourceDirName:"garminsdk/classes",slug:"/garminsdk/classes/GlidepathServiceLevelCalculator",permalink:"/msfs-avionics-mirror/docs/garminsdk/classes/GlidepathServiceLevelCalculator",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"GlidepathServiceLevelCalculator",title:"Class: GlidepathServiceLevelCalculator",sidebar_label:"GlidepathServiceLevelCalculator",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"GenericNavDataFieldRenderer",permalink:"/msfs-avionics-mirror/docs/garminsdk/classes/GenericNavDataFieldRenderer"},next:{title:"GpsNavSource",permalink:"/msfs-avionics-mirror/docs/garminsdk/classes/GpsNavSource"}},s={},p=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"getServiceLevel",id:"getservicelevel",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"isBaroServiceLevel",id:"isbaroservicelevel",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4}],d={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,l.kt)(c,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"A calculator for providing the glidepath service level."),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"new GlidepathServiceLevelCalculator"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"allowPlusVWithoutSbas"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"allowApproachBaroVNav"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"allowRnpAr"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"gpsSystemState"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"approachDetails"),"): ",(0,l.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/garminsdk/classes/GlidepathServiceLevelCalculator"},(0,l.kt)("inlineCode",{parentName:"a"},"GlidepathServiceLevelCalculator"))),(0,l.kt)("p",null,"Creates an instance of the GlidepathServiceLevelCalculator."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"allowPlusVWithoutSbas")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to allow +V approach service levels when no SBAS is present.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"allowApproachBaroVNav")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to allow approach service levels requiring baro VNAV.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"allowRnpAr")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Whether to allow RNP (AR) approach service levels.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"gpsSystemState")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Subscribable"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"GPSSystemState"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The current GPS system state.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"approachDetails")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Subscribable"),"<",(0,l.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/garminsdk/modules#approachdetails"},(0,l.kt)("inlineCode",{parentName:"a"},"ApproachDetails")),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The currently selected approach details.")))),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/garminsdk/classes/GlidepathServiceLevelCalculator"},(0,l.kt)("inlineCode",{parentName:"a"},"GlidepathServiceLevelCalculator"))),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,"src/garminsdk/autopilot/GlidepathServiceLevelCalculator.ts:19"),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"getservicelevel"},"getServiceLevel"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getServiceLevel"),"(): ",(0,l.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/garminsdk/enums/GlidepathServiceLevel"},(0,l.kt)("inlineCode",{parentName:"a"},"GlidepathServiceLevel"))),(0,l.kt)("p",null,"Gets the current glidepath service level from the calculator."),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/garminsdk/enums/GlidepathServiceLevel"},(0,l.kt)("inlineCode",{parentName:"a"},"GlidepathServiceLevel"))),(0,l.kt)("p",null,"The current glidepath service level."),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,"src/garminsdk/autopilot/GlidepathServiceLevelCalculator.ts:31"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"isbaroservicelevel"},"isBaroServiceLevel"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isBaroServiceLevel"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"serviceLevel"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Checks a service level to see if baro guidance is required."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"serviceLevel")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/garminsdk/enums/GlidepathServiceLevel"},(0,l.kt)("inlineCode",{parentName:"a"},"GlidepathServiceLevel"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The service level to check.")))),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"True if baro guidance is required, false otherwise."),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,"src/garminsdk/autopilot/GlidepathServiceLevelCalculator.ts:65"))}m.isMDXComponent=!0}}]);