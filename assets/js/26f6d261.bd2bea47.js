"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[73562],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>f});var i=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function n(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,i)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?n(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,i,r=function(t,e){if(null==t)return{};var a,i,r={},n=Object.keys(t);for(i=0;i<n.length;i++)a=n[i],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(i=0;i<n.length;i++)a=n[i],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=i.createContext({}),s=function(t){var e=i.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},c=function(t){var e=s(t.components);return i.createElement(p.Provider,{value:e},t.children)},y="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(t,e){var a=t.components,r=t.mdxType,n=t.originalType,p=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),y=s(a),d=r,f=y["".concat(p,".").concat(d)]||y[d]||m[d]||n;return a?i.createElement(f,l(l({ref:e},c),{},{components:a})):i.createElement(f,l({ref:e},c))}));function f(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var n=a.length,l=new Array(n);l[0]=d;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[y]="string"==typeof t?t:r,l[1]=o;for(var s=2;s<n;s++)l[s]=a[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}d.displayName="MDXCreateElement"},37678:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>n,metadata:()=>o,toc:()=>s});var i=a(87462),r=(a(67294),a(3905));const n={id:"FacilityWaypointUtils",title:"Class: FacilityWaypointUtils",sidebar_label:"FacilityWaypointUtils",sidebar_position:0,custom_edit_url:null},l=void 0,o={unversionedId:"framework/classes/FacilityWaypointUtils",id:"framework/classes/FacilityWaypointUtils",title:"Class: FacilityWaypointUtils",description:"A utility class for working with FacilityWaypoint.",source:"@site/docs/framework/classes/FacilityWaypointUtils.md",sourceDirName:"framework/classes",slug:"/framework/classes/FacilityWaypointUtils",permalink:"/msfs-avionics-mirror/docs/framework/classes/FacilityWaypointUtils",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"FacilityWaypointUtils",title:"Class: FacilityWaypointUtils",sidebar_label:"FacilityWaypointUtils",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"FacilityUtils",permalink:"/msfs-avionics-mirror/docs/framework/classes/FacilityUtils"},next:{title:"FilteredMapSubject",permalink:"/msfs-avionics-mirror/docs/framework/classes/FilteredMapSubject"}},p={},s=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Methods",id:"methods",level:2},{value:"isFacilityWaypoint",id:"isfacilitywaypoint",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4}],c={toc:s},y="wrapper";function m(t){let{components:e,...a}=t;return(0,r.kt)(y,(0,i.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A utility class for working with FacilityWaypoint."),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new FacilityWaypointUtils"),"()"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"isfacilitywaypoint"},"isFacilityWaypoint"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("strong",{parentName:"p"},"isFacilityWaypoint"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"waypoint"),"): waypoint is FacilityWaypoint<Facility",">"),(0,r.kt)("p",null,"Checks whether a waypoint is a ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/FacilityWaypoint"},"FacilityWaypoint"),"."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"waypoint")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/Waypoint"},(0,r.kt)("inlineCode",{parentName:"a"},"Waypoint"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The waypoint to check.")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,"waypoint is FacilityWaypoint<Facility",">"),(0,r.kt)("p",null,"Whether the specified waypoint is a ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/FacilityWaypoint"},"FacilityWaypoint"),"."),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/Waypoint.ts:227"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("strong",{parentName:"p"},"isFacilityWaypoint"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"waypoint"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"facilityType"),"): waypoint is FacilityWaypoint<FacilityTypeMap","[T]",">"),(0,r.kt)("p",null,"Checks whether a waypoint is a ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/FacilityWaypoint"},"FacilityWaypoint")," of a given facility type."),(0,r.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/enums/FacilityType"},(0,r.kt)("inlineCode",{parentName:"a"},"FacilityType")))))),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"waypoint")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/Waypoint"},(0,r.kt)("inlineCode",{parentName:"a"},"Waypoint"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The waypoint to check.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"facilityType")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The facility type to check against.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"waypoint is FacilityWaypoint<FacilityTypeMap","[T]",">"),(0,r.kt)("p",null,"Whether the specified waypoint is a ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/FacilityWaypoint"},"FacilityWaypoint")," of the specified facility type."),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,"src/sdk/navigation/Waypoint.ts:234"))}m.isMDXComponent=!0}}]);