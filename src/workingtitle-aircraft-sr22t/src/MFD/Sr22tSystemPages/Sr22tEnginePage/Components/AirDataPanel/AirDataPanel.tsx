import {
  FSComponent, VNode, DisplayComponent, ComponentProps, EventBus,
  ConsumerSubject, MappedSubject, Subject, AdcEvents, Subscription,
} from '@microsoft/msfs-sdk';

import './AirDataPanel.css';

/** Props for an Air Data Panel */
export interface AirDataPanelProps extends ComponentProps {
  /** The event bus */
  bus: EventBus,
}

/** Air Data Panel component */
export class AirDataPanel extends DisplayComponent<AirDataPanelProps> {

  private subs: Subscription[] = [];

  // Source subjects
  private densityAltSubject = ConsumerSubject.create(this.props.bus.getSubscriber<AdcEvents>().on('density_alt').withPrecision(0), 0);  // FT
  private oatSubject = ConsumerSubject.create(this.props.bus.getSubscriber<AdcEvents>().on('ambient_temp_c').withPrecision(0), 0);  // celcius
  private isaSubject = ConsumerSubject.create(this.props.bus.getSubscriber<AdcEvents>().on('isa_temp_c').withPrecision(0), 0);  // celcius

  private numberArray = [
    {
      position: {
        x: 918,
        y: 629,
      },
      mappedSubject: MappedSubject.create(
        ([alt]): number => {
          return alt;
        },
        this.densityAltSubject
      ),
      outputSubject: Subject.create(''),
      decimals: 0,
      styleClass: 'label',
      align: 'end',
    },
    {
      position: {
        x: 785,
        y: 663,
      },
      mappedSubject: MappedSubject.create(
        ([temp]): number => {
          return (temp * (9 / 5)) + 32; // Fahrenheit
        },
        this.oatSubject
      ),
      outputSubject: Subject.create(''),
      decimals: 0,
      styleClass: 'label',
      align: 'end',
    },
    {
      position: {
        x: 844,
        y: 663,
      },
      mappedSubject: MappedSubject.create(
        ([temp]): number => {
          return temp;
        },
        this.oatSubject
      ),
      outputSubject: Subject.create(''),
      decimals: 0,
      styleClass: 'label',
      align: 'end',
    },
    {
      position: {
        x: 969,
        y: 663,
      },
      mappedSubject: MappedSubject.create(
        ([temp]): number => {
          return temp;
        },
        this.isaSubject
      ),
      outputSubject: Subject.create(''),
      decimals: 0,
      styleClass: 'label',
      align: 'end',
      plusSign: true,
    },
  ];

  /** @inheritdoc
   */
  public onAfterRender(): void {

    // Add subscriptions to subs array
    this.subs.push(
      this.densityAltSubject,
      this.oatSubject,
      this.isaSubject,
    );

    for (let numberIndex = 0; numberIndex < this.numberArray.length; numberIndex++) {
      this.numberArray[numberIndex].mappedSubject.sub((v) => {
        this.updateNumber(numberIndex, v);
      }, true);
    }
  }

  /** @inheritdoc
   */
  private renderStaticSVG(): VNode {
    return (
      <svg width="1024" height="687" version="1.1" viewBox="0 0 1024 687">
        <g>
          <defs id="defs1">
            <linearGradient id="linearGradient191" x1="58.889" x2="58.889" y1="132.04" y2="94.76" gradientUnits="userSpaceOnUse">
              <stop id="stop154" offset=".92293" />
              <stop id="stop155" stop-color="#454545" offset="1" />
            </linearGradient>
          </defs>
          <path id="path489" transform="matrix(7.155 0 0 7.155 430.02 -75.049)" d="m37.833 94.76h42.113a1.3229 1.3229 45 011.3229 1.3229v8.011a1.3229 1.3229 135 01-1.3229 1.3229h-42.113a1.3229 1.3229 45 01-1.3229-1.3229v-8.011a1.3229 1.3229 135 011.3229-1.3229z" fill="url(#linearGradient191)" stroke="#9f9f9f" stroke-linecap="square" stroke-width=".26458" />
          <rect id="rect547" x="714.08" y="595.59" width="60.651" height="17.025" />
          <g fill="#fff">
            <g stroke-linecap="square">
              <path id="text547" transform="matrix(1.2716 0 0 1.2716 749.95 66.322)" d="m-22.065 424.06h-3.9713l-.89192 2.474h-1.2891l3.6198-9.4791h1.0937l3.6263 9.4791h-1.2825zm-3.5937-1.0286h3.2226l-1.6146-4.4336zm8.1771 3.5026h-1.2044v-7.0443h1.2044zm-1.3021-8.9127q0-.29297.17578-.49479.18229-.20182.53385-.20182.35156 0 .53385.20182t.18229.49479-.18229.48828-.53385.19531q-.35156 0-.53385-.19531-.17578-.19531-.17578-.48828zm6.6341 2.9492q-.27344-.0456-.59245-.0456-1.1849 0-1.6081 1.0091v5h-1.2044v-7.0443h1.1719l.01953.8138q.59245-.944 1.6797-.944.35156 0 .53385.0911zm4.5963 5.9635v-9.4791h2.6758q1.237 0 2.1875.54687t1.4648 1.556q.52083 1.0091.52734 2.3177v.60546q0 1.3412-.52083 2.3503-.51432 1.0091-1.4779 1.5495-.95703.54037-2.2331.55339zm1.25-8.4505v7.4284h1.3151q1.4453 0 2.2461-.89844.80729-.89844.80729-2.5586v-.55338q0-1.6146-.76172-2.5065-.75521-.89843-2.1484-.91145zm11.654 8.4505q-.10417-.20833-.16927-.74219-.83984.8724-2.0052.8724-1.0417 0-1.7122-.58594-.66406-.59245-.66406-1.4974 0-1.1003.83333-1.7057.83984-.61197 2.3568-.61197h1.1719v-.55339q0-.63151-.3776-1.0026-.3776-.3776-1.1133-.3776-.64453 0-1.0807.32552t-.4362.78775h-1.2109q0-.52734.37109-1.0156.3776-.49479 1.0156-.78125.64453-.28645 1.4128-.28645 1.2174 0 1.9075.61197.6901.60547.71614 1.6732v3.2422q0 .97005.2474 1.543v.10417zm-1.9987-.91797q.5664 0 1.0742-.29297.50781-.29296.73568-.76171v-1.4453h-.94401q-2.2135 0-2.2135 1.2956 0 .5664.3776.88541t.97005.31901zm6.5364-7.832v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828-.41016-.48828-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057zm7.0703 8.75q-.10417-.20833-.16927-.74219-.83984.8724-2.0052.8724-1.0417 0-1.7122-.58594-.66406-.59245-.66406-1.4974 0-1.1003.83333-1.7057.83984-.61197 2.3568-.61197h1.1719v-.55339q0-.63151-.3776-1.0026-.3776-.3776-1.1133-.3776-.64453 0-1.0807.32552t-.4362.78775h-1.2109q0-.52734.37109-1.0156.3776-.49479 1.0156-.78125.64453-.28645 1.4128-.28645 1.2174 0 1.9075.61197.6901.60547.71614 1.6732v3.2422q0 .97005.2474 1.543v.10417zm-1.9987-.91797q.5664 0 1.0742-.29297.50781-.29296.73568-.76171v-1.4453h-.94401q-2.2135 0-2.2135 1.2956 0 .5664.3776.88541t.97005.31901z" style="white-space:pre" aria-label="Air Data" />
              <path id="text579" transform="matrix(1.3814 0 0 1.3814 812.05 46.489)" d="m-43.221 426.53v-9.4791h2.6758q1.237 0 2.1875.54687.95052.54687 1.4648 1.556.52083 1.0091.52734 2.3177v.60546q0 1.3412-.52083 2.3503-.51432 1.0091-1.4779 1.5495-.95703.54037-2.2331.55339zm1.25-8.4505v7.4284h1.3151q1.4453 0 2.2461-.89844.80729-.89844.80729-2.5586v-.55338q0-1.6146-.76172-2.5065-.75521-.89843-2.1484-.91145zm10.228 8.5807q-1.4323 0-2.3307-.9375-.89844-.94401-.89844-2.5195v-.22135q0-1.0482.39714-1.8685.40364-.82682 1.1198-1.289.72265-.46875 1.5625-.46875 1.3737 0 2.1354.90494.76172.90495.76172 2.5911v.5013h-4.7721q.02604 1.0417.60547 1.6862.58594.63802 1.4844.63802.63802 0 1.0807-.26042t.77474-.6901l.73568.57291q-.88541 1.3607-2.6562 1.3607zm-.14974-6.3151q-.72916 0-1.224.53385-.49479.52734-.61198 1.4844h3.5286v-.0911q-.05208-.91797-.49479-1.4193-.44271-.50781-1.1979-.50781zm5.4297-.85938.03906.88542q.80729-1.0156 2.1094-1.0156 2.2331 0 2.2526 2.5195v4.6549h-1.2044v-4.6614q-.0065-.76172-.35156-1.1263-.33854-.36458-1.0612-.36458-.58594 0-1.0286.3125t-.6901.82031v5.0195h-1.2044v-7.0443zm10.319 5.1758q0-.48828-.37109-.7552-.36458-.27344-1.2825-.46875-.91146-.19531-1.4518-.46875-.53385-.27344-.79427-.65104-.25391-.3776-.25391-.89844 0-.86588.72916-1.4648.73568-.59895 1.875-.59895 1.1979 0 1.9401.61848.7487.61849.7487 1.582h-1.2109q0-.49479-.42318-.85286-.41667-.35807-1.0547-.35807-.65755 0-1.0286.28646-.37109.28645-.37109.74869 0 .4362.34505.65755.34505.22136 1.2435.42318.90494.20182 1.4648.48177.55989.27994.82682.67708.27344.39062.27344.95703 0 .94401-.75521 1.5169-.75521.56641-1.9596.56641-.84635 0-1.4974-.29948t-1.0221-.83333q-.36458-.54037-.36458-1.1654h1.2044q.03255.60547.48177.96354.45573.35157 1.1979.35157.68359 0 1.0937-.27344.41666-.27995.41666-.74219zm4.082 1.8685h-1.2044v-7.0443h1.2044zm-1.3021-8.9127q0-.29297.17578-.49479.18229-.20182.53385-.20182t.53385.20182.18229.49479-.18229.48828-.53385.19531-.53385-.19531q-.17578-.19531-.17578-.48828zm4.8633.16276v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828t-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057zm5.026 6.9857 1.6406-5.2799h1.2891l-2.832 8.1315q-.65755 1.7578-2.0898 1.7578l-.22786-.0195-.44922-.0846v-.97656l.32552.026q.61198 0 .95052-.2474.34505-.24739.5664-.90494l.26693-.71615-2.513-6.9661h1.3151zm12.728-.70963h-3.9713l-.89192 2.474h-1.2891l3.6198-9.4791h1.0937l3.6263 9.4791h-1.2825zm-3.5937-1.0286h3.2226l-1.6146-4.4336zm8.1771 3.5026h-1.2044v-10h1.2044zm3.5612-8.75v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828-.41016-.48828-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057z" style="white-space:pre" aria-label="Density Alt" />
              <path id="text581" transform="matrix(1.2746 0 0 1.2746 951.63 92.153)" d="m-13.956 422.34h-3.9779v4.1862h-1.25v-9.4791h5.8724v1.0286h-4.6224v3.2422h3.9779zm8.8216-4.2643h-3.0469v8.4505h-1.2435v-8.4505h-3.0404v-1.0286h7.3307z" style="white-space:pre" aria-label="FT" />
              <path id="text582" transform="matrix(1.255 0 0 1.255 746.41 133.84)" d="m-16.587 422.1q0 1.3932-.46875 2.4349-.46875 1.0352-1.3281 1.582-.85937.54688-2.0052.54688-1.1198 0-1.9857-.54688-.86588-.55338-1.3477-1.569-.47526-1.0221-.48828-2.3633v-.68359q0-1.3672.47526-2.4154t1.3411-1.6016q.87239-.55989 1.9922-.55989 1.1393 0 2.0052.55338.87239.54687 1.3411 1.595.46875 1.0417.46875 2.4284zm-1.2435-.61198q0-1.6862-.67708-2.5846-.67708-.90495-1.8945-.90495-1.1849 0-1.8685.90495-.67708.89843-.69661 2.5v.69662q0 1.6341.68359 2.5716.6901.93099 1.8945.93099 1.2109 0 1.875-.8789.66406-.88542.68359-2.5326zm8.2161 2.5716h-3.9713l-.89192 2.474h-1.2891l3.6198-9.4791h1.0937l3.6263 9.4791h-1.2825zm-3.5937-1.0286h3.2226l-1.6146-4.4336zm12.767-4.9479h-3.0469v8.4505h-1.2435v-8.4505h-3.0404v-1.0286h7.3307z" style="white-space:pre" aria-label="OAT" />
              <path id="text583" transform="matrix(1.1626 0 0 1.1626 811.13 173.57)" d="m-9.9134 422.34h-3.9779v4.1862h-1.25v-9.4791h5.8724v1.0286h-4.6224v3.2422h3.9779z" style="white-space:pre" aria-label="F" />
              <path id="text584" transform="matrix(1.1626 0 0 1.1626 871.25 173.57)" d="m-8.8229 423.52q-.17578 1.5039-1.1133 2.3242-.93099.8138-2.4805.8138-1.6797 0-2.6953-1.2044-1.0091-1.2044-1.0091-3.2226v-.91145q0-1.3216.46875-2.3242.47526-1.0026 1.3411-1.5364.86588-.54036 2.0052-.54036 1.5104 0 2.4219.84635.91146.83984 1.0612 2.3307h-1.2565q-.16276-1.1328-.70963-1.6406-.54036-.50781-1.5169-.50781-1.1979 0-1.8815.88541-.67708.88542-.67708 2.5195v.91797q0 1.543.64453 2.4544.64453.91145 1.8034.91145 1.0417 0 1.595-.46875.55989-.47526.74219-1.6471z" style="white-space:pre" aria-label="C" />
              <path id="text586" transform="matrix(1.6262 0 0 1.6262 810.08 -24.531)" d="m-14.201 418.61q0-.67708.48177-1.1849.48828-.50781 1.1784-.50781.67708 0 1.1523.50781.48177.5013.48177 1.1849 0 .6901-.48177 1.1784-.47526.48828-1.1523.48828-.68359 0-1.1719-.48828t-.48828-1.1784zm1.6602.83333q.35156 0 .59245-.22786.24088-.23438.24088-.60547 0-.3776-.24088-.61849-.24088-.24739-.59245-.24739-.35807 0-.60547.26041-.24088.25391-.24088.60547t.24088.59245q.2474.24088.60547.24088z" style="white-space:pre" aria-label="°" />
              <path id="text588" transform="matrix(1.6262 0 0 1.6262 868.94 -24.531)" d="m-14.201 418.61q0-.67708.48177-1.1849.48828-.50781 1.1784-.50781.67708 0 1.1523.50781.48177.5013.48177 1.1849 0 .6901-.48177 1.1784-.47526.48828-1.1523.48828-.68359 0-1.1719-.48828t-.48828-1.1784zm1.6602.83333q.35156 0 .59245-.22786.24088-.23438.24088-.60547 0-.3776-.24088-.61849-.24088-.24739-.59245-.24739-.35807 0-.60547.26041-.24088.25391-.24088.60547t.24088.59245q.2474.24088.60547.24088z" style="white-space:pre" aria-label="°" />
            </g>
            <path id="text591" transform="matrix(1.1626 0 0 1.1626 996.32 173.57)" d="m-8.8229 423.52q-.17578 1.5039-1.1133 2.3242-.93099.8138-2.4805.8138-1.6797 0-2.6953-1.2044-1.0091-1.2044-1.0091-3.2226v-.91145q0-1.3216.46875-2.3242.47526-1.0026 1.3411-1.5364.86588-.54036 2.0052-.54036 1.5104 0 2.4219.84635.91146.83984 1.0612 2.3307h-1.2565q-.16276-1.1328-.70963-1.6406-.54036-.50781-1.5169-.50781-1.1979 0-1.8815.88541-.67708.88542-.67708 2.5195v.91797q0 1.543.64453 2.4544.64453.91145 1.8034.91145 1.0417 0 1.595-.46875.55989-.47526.74219-1.6471z" stroke-linecap="square" style="white-space:pre" aria-label="C" />
            <path id="text593" transform="matrix(1.6262 0 0 1.6262 994.01 -24.531)" d="m-14.201 418.61q0-.67708.48177-1.1849.48828-.50781 1.1784-.50781.67708 0 1.1523.50781.48177.5013.48177 1.1849 0 .6901-.48177 1.1784-.47526.48828-1.1523.48828-.68359 0-1.1719-.48828t-.48828-1.1784zm1.6602.83333q.35156 0 .59245-.22786.24088-.23438.24088-.60547 0-.3776-.24088-.61849-.24088-.24739-.59245-.24739-.35807 0-.60547.26041-.24088.25391-.24088.60547t.24088.59245q.2474.24088.60547.24088z" stroke-linecap="square" style="white-space:pre" aria-label="°" />
            <path id="text596" transform="matrix(1.255 0 0 1.255 921.41 133.84)" d="m-25.737 422.68q0-1.4714.39062-2.8255.39714-1.3542 1.1784-2.4609.78125-1.1068 1.6211-1.5625l.2474.79427q-.95052.72916-1.5625 2.2266-.60547 1.4974-.66406 3.3528l-.0065.55339q0 2.513.91797 4.362.55338 1.1068 1.3151 1.7318l-.2474.73568q-.86588-.48177-1.6536-1.6146-1.5365-2.2135-1.5365-5.293zm9.4336 3.8476h-1.25v-9.4791h1.25zm5.0781-4.2252q-1.6081-.46224-2.3437-1.1328-.72916-.67708-.72916-1.6667 0-1.1198.89192-1.849.89844-.73567 2.3307-.73567.97656 0 1.7383.3776.76823.3776 1.1849 1.0417.42318.66407.42318 1.4518h-1.2565q0-.85937-.54687-1.3476-.54687-.49479-1.543-.49479-.92448 0-1.4453.41016-.51432.40364-.51432 1.1263 0 .57943.48828.98308.49479.39713 1.6732.72916 1.1849.33203 1.849.73568.67057.39713.98958.93098.32552.53386.32552 1.2565 0 1.1523-.89844 1.849-.89844.69011-2.4023.69011-.97656 0-1.8229-.3711-.84635-.3776-1.3086-1.0286-.45573-.65104-.45573-1.4779h1.2565q0 .85937.63151 1.3607.63802.49479 1.6992.49479.98958 0 1.5169-.40364.52734-.40365.52734-1.1003t-.48828-1.0742q-.48828-.38411-1.7708-.7552zm10.352 1.7513h-3.9713l-.89192 2.474h-1.2891l3.6198-9.4791h1.0937l3.6263 9.4791h-1.2825zm-3.5937-1.0286h3.2226l-1.6146-4.4336z" stroke-linecap="square" style="white-space:pre" aria-label="( ISA" />
            <path id="text597" transform="matrix(1.255 0 0 1.255 1008.7 133.84)" d="m-11.183 422.75q0 1.4518-.38411 2.7864-.3776 1.3281-1.1654 2.4544-.78125 1.1263-1.6406 1.6016l-.25391-.73568q1.0026-.76823 1.6081-2.3828.61198-1.6211.625-3.5937v-.20833q0-1.3672-.28646-2.5391-.28646-1.1784-.80078-2.1094-.50781-.93098-1.1458-1.4518l.25391-.73568q.85937.47526 1.6341 1.5885.78125 1.1133 1.1654 2.4544.39062 1.3411.39062 2.8711z" stroke-linecap="square" style="white-space:pre" aria-label=")" />
          </g>
        </g>
      </svg>
    );
  }

  /** @inheritdoc
   */
  private renderNumbers(): VNode[] {

    const numbers: VNode[] = [];

    for (let numberIndex = 0; numberIndex < this.numberArray.length; numberIndex++) {

      const theNumber = this.numberArray[numberIndex];

      // Draw number
      numbers.push(
        <svg width="1024" height="687" version="1.1" viewBox="0 0 1024 687">
          <text
            x={theNumber.position.x}
            y={theNumber.position.y}
            dominant-baseline="middle"
            text-anchor={theNumber.align}
            class={theNumber.styleClass}
          >
            {theNumber.outputSubject}
          </text>
        </svg>
      );
    }

    return numbers;
  }

  /** @inheritdoc
   */
  private updateNumber(numberIndex: number, value: number): void {
    const theNumber = this.numberArray[numberIndex];
    value = Math.round(value);
    let valueString = value.toFixed(theNumber.decimals);
    if (theNumber.plusSign !== undefined && theNumber.plusSign === true && value >= 0) {
      valueString = '+' + valueString;
    }
    theNumber.outputSubject.set(valueString);
  }

  /** @inheritdoc
   */
  public render(): VNode {

    return (
      <div class='air-data-panel'>
        {this.renderStaticSVG()}
        {this.renderNumbers()}
      </div>
    );
  }

  /** @inheritdoc */
  public pause(): void {
    this.subs.forEach(sub => sub.pause());
  }

  /** @inheritdoc */
  public resume(): void {
    this.subs.forEach(sub => sub.resume(true));
  }

  /** @inheritdoc */
  public destroy(): void {
    this.subs.forEach(sub => sub.destroy());
  }
}
