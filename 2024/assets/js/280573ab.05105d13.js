"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["664780"],{823170:function(e,n,i){i.r(n),i.d(n,{metadata:()=>r,contentTitle:()=>d,default:()=>h,assets:()=>c,toc:()=>o,frontMatter:()=>a});var r=JSON.parse('{"id":"api/framework/type-aliases/LNavSteerCommand","title":"Type Alias: LNavSteerCommand","description":"LNavSteerCommand: object","source":"@site/docs/api/framework/type-aliases/LNavSteerCommand.md","sourceDirName":"api/framework/type-aliases","slug":"/api/framework/type-aliases/LNavSteerCommand","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/LNavSteerCommand","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"LNavState","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/LNavState"},"next":{"title":"LNavTrackingState","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/LNavTrackingState"}}'),s=i("785893"),t=i("250065");let a={},d="Type Alias: LNavSteerCommand",c={},o=[{value:"Type declaration",id:"type-declaration",level:2},{value:"courseToSteer",id:"coursetosteer",level:3},{value:"dtk",id:"dtk",level:3},{value:"isHeading",id:"isheading",level:3},{value:"isValid",id:"isvalid",level:3},{value:"tae",id:"tae",level:3},{value:"trackRadius",id:"trackradius",level:3},{value:"xtk",id:"xtk",level:3},{value:"Defined in",id:"defined-in",level:2}];function l(e){let n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"type-alias-lnavsteercommand",children:"Type Alias: LNavSteerCommand"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"LNavSteerCommand"}),": ",(0,s.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A steering command generated by LNAV."}),"\n",(0,s.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,s.jsx)(n.h3,{id:"coursetosteer",children:"courseToSteer"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"courseToSteer"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The true course to steer, in degrees. If ",(0,s.jsx)(n.code,{children:"isHeading"})," is true, then this value can be interpreted as the true\nheading to steer instead."]}),"\n",(0,s.jsx)(n.h3,{id:"dtk",children:"dtk"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"dtk"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The current desired true track, in degrees. This value has no meaning if ",(0,s.jsx)(n.code,{children:"isHeading"})," is true."]}),"\n",(0,s.jsx)(n.h3,{id:"isheading",children:"isHeading"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"isHeading"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whether this command is attempting to steer toward a heading instead of a track."}),"\n",(0,s.jsx)(n.h3,{id:"isvalid",children:"isValid"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"isValid"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whether this command is valid."}),"\n",(0,s.jsx)(n.h3,{id:"tae",children:"tae"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"tae"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The current track angle error, in degrees in the range ",(0,s.jsx)(n.code,{children:"[-180, 180)"}),". If ",(0,s.jsx)(n.code,{children:"isHeading"})," is true, then this value can\nbe interpreted as the heading error instead."]}),"\n",(0,s.jsx)(n.h3,{id:"trackradius",children:"trackRadius"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"trackRadius"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The radius of the track toward which the command is attempting to steer, in great-arc radians. A radius of\n",(0,s.jsx)(n.code,{children:"pi / 2"})," indicates the track is a great circle. A radius less than ",(0,s.jsx)(n.code,{children:"pi / 2"})," indicates the track turns to the left.\nA radius greater than ",(0,s.jsx)(n.code,{children:"pi / 2"})," indicates the track turns to the right. This value has no meaning if ",(0,s.jsx)(n.code,{children:"isHeading"}),"\nis true."]}),"\n",(0,s.jsx)(n.h3,{id:"xtk",children:"xtk"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"xtk"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The current cross-track error, in nautical miles. Positive values indicate that the plane is to the right of the\ndesired track. This value has no meaning if ",(0,s.jsx)(n.code,{children:"isHeading"})," is true."]}),"\n",(0,s.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/lnav/LNavTypes.ts:69"})]})}function h(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return d},a:function(){return a}});var r=i(667294);let s={},t=r.createContext(s);function a(e){let n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);