"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["300797"],{886424:function(e,t,r){r.r(t),r.d(t,{metadata:()=>a,contentTitle:()=>l,default:()=>c,assets:()=>o,toc:()=>d,frontMatter:()=>s});var a=JSON.parse('{"id":"framework-systems/sounds/aural-alert-system","title":"Aural Alert System","description":"Introduction","source":"@site/docs/framework-systems/sounds/aural-alert-system.md","sourceDirName":"framework-systems/sounds","slug":"/framework-systems/sounds/aural-alert-system","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/sounds/aural-alert-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Aural Alert System","sidebar_position":2},"sidebar":"sidebar","previous":{"title":"SoundServer","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/sounds/soundserver"},"next":{"title":"Defining Aural Alerts Using panel.xml","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/sounds/defining-aural-alerts-using-panel-xml"}}'),n=r("785893"),i=r("250065");let s={sidebar_label:"Aural Alert System",sidebar_position:2},l="Aural Alert System",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"System Description",id:"system-description",level:2},{value:"Registering Alerts",id:"registering-alerts",level:2},{value:"Activating Alerts",id:"activating-alerts",level:2},{value:"Triggering Alerts",id:"triggering-alerts",level:2},{value:"Customizing Alert Instances",id:"customizing-alert-instances",level:2},{value:"Alert Aliases",id:"alert-aliases",level:2},{value:"Alert Suffixes",id:"alert-suffixes",level:2},{value:"<code>AuralAlertSystem</code> Wake/Sleep State",id:"auralalertsystem-wakesleep-state",level:2},{value:"Using <code>CasAuralAlertTransporter</code>",id:"using-casauralalerttransporter",level:2}];function u(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"aural-alert-system",children:"Aural Alert System"})}),"\n",(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:["Aural Alert System is an SDK API which sits on top of ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/sounds/soundserver",children:"SoundServer"})," and provides a more powerful interface for playing avionics-based aural alerts. This API aims to abstract away some of the queue and state logic associated with playing aural alerts triggered by specific conditions. By using Aural Alert System, you can focus on defining your alerts and their triggers instead of having to worry about the mechanical details of how to get sounds to play at the correct times and in the correct order."]}),"\n",(0,n.jsx)(t.h2,{id:"system-description",children:"System Description"}),"\n",(0,n.jsx)(t.p,{children:"Aural Alert System is based on queues. Each alert is assigned to a specific queue, and each queue can only play one alert at a time. If multiple alerts are set to play in the same queue, they will play in sequence instead of overlapping one another. Alerts with higher priority will play before alerts with lower priority in the same queue if they are set to play at the same time. However, a new alert will never interrupt an alert that is already playing, even if the new alert has higher priority. Alerts belonging to different queues can play simultaneously (overlap)."}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"AuralAlertSystem"})," class handles the state logic governing aural alerts and controls which sounds are playing at any given moment. An airplane should have at most one instance of ",(0,n.jsx)(t.code,{children:"AuralAlertSystem"})," across all instruments. Because ",(0,n.jsx)(t.code,{children:"AuralAlertSystem"})," uses ",(0,n.jsx)(t.code,{children:"SoundServer"})," to play sounds, an instance of ",(0,n.jsx)(t.code,{children:"SoundServer"})," is required for ",(0,n.jsx)(t.code,{children:"AuralAlertSystem"})," to function properly. The instances do not necessarily have to be created on the same instrument, and there is no requirement to wait for ",(0,n.jsx)(t.code,{children:"SoundServer"})," to ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/sounds/soundserver#setting-up-soundserver",children:"initialize"})," before creating or using ",(0,n.jsx)(t.code,{children:"AuralAlertSystem"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"registering-alerts",children:"Registering Alerts"}),"\n",(0,n.jsxs)(t.p,{children:["Alerts must be registered before they can be used. Registering an alert is done using the ",(0,n.jsx)(t.code,{children:"AuralAlertRegistrationManager"})," class:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import { AuralAlertRegistrationManager, EventBus } from '@microsoft/msfs-sdk';\r\n\r\nconst bus = new EventBus();\r\nconst manager = new AuralAlertRegistrationManager(bus); // `bus` is the event bus\r\n\r\nmanager.register({\r\n  uuid: 'no-takeoff',\r\n  queue: 'my-queue',\r\n  priority: 0,\r\n  sequence: 'aural_no_takeoff',\r\n  continuous: false,\r\n  repeat: true\r\n});\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"register()"})," method takes in a single object that satisfies the ",(0,n.jsx)(t.code,{children:"AuralAlertDefinition"})," type. Each alert definition must define the properties seen in the above example."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"uuid"})," is a unique string ID used to reference the alert."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"queue"})," is the name of the queue to assign the alert."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"priority"})," determines the priority of the alert within its queue."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"sequence"})," defines which sound events are played for the alert. It can either be a single string or an array of strings. Each string in the sequence should be an avionics sound event ID defined in the airplane's ",(0,n.jsx)(t.code,{children:"sound.xml"}),". If an array of strings is used, then each sound event in the array is played in order."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"continuous"})," determines whether the alert's sound event sequence plays in an infinite loop."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"repeat"})," determines whether the alert should be re-queued to play again once it is finished playing as long as the alert is active. A repeating alert is not the same as a continuous alert. You can think of a continuous alert as an alert with an infinite duration - once the alert starts playing, it will continue to play forever (in a loop) unless forced to stop. This means that a continuous alert can never be interrupted by another alert. On the other hand, a repeating alert has a finite duration and will stop playing once the end of its sound event sequence is reached. At that point, if the alert is still active, it is inserted back into its queue. It will only begin playing again if there are no other alerts of higher priority in the queue. Therefore, repeating alerts can be interrupted by higher priority alerts (but only once the repeating alert has finished playing its sequence)."]}),"\n",(0,n.jsxs)(t.p,{children:["In addition to the above required properties, ",(0,n.jsx)(t.code,{children:"AuralAlertDefinition"})," also defines an optional ",(0,n.jsx)(t.code,{children:"timeout"}),' property. This property determines the maximum amount of time the alert\'s sound event sequence is considered to be "still playing". After the timeout duration, the system proceeds as if the sequence has finished playing, regardless of whether all the sound events in the sequence have actually finished playing. This behavior is included to prevent the system from permanently locking up if a sound event fails to play. If ',(0,n.jsx)(t.code,{children:"timeout"})," is not included in the definition, it defaults to 10000 milliseconds."]}),"\n",(0,n.jsx)(t.h2,{id:"activating-alerts",children:"Activating Alerts"}),"\n",(0,n.jsx)(t.p,{children:"Once an alert is registered with the system, it carries an activation state and can either be inactive or active at any given time. When an alert transitions from inactive to active, an instance of the alert is queued to play. When an alert transitions from active to inactive, the activated instance will be removed from the queue. If the activated instance of the alert is already playing when it is deactivated, it will continue to play. Repeating alerts are queued to play again when they finish playing as long as they are active."}),"\n",(0,n.jsx)(t.p,{children:"To activate and deactivate alerts, use the event bus:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import { AuralAlertControlEvents } from '@microsoft/msfs-sdk';\r\n\r\n// Activates the alert with ID 'no-takeoff'.\r\nbus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_activate', 'no-takeoff', true, false);\r\n\r\n// Deactivates the alert with ID 'no-takeoff'.\r\nbus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_deactivate', 'no-takeoff', true, false);\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"warning",children:(0,n.jsxs)(t.p,{children:["When publishing any of the topics defined by ",(0,n.jsx)(t.code,{children:"AuralAlertControlEvents"}),", you ",(0,n.jsx)(t.strong,{children:"must"})," specify that the topic be synced to other instruments and not cached (the third and fourth parameters of ",(0,n.jsx)(t.code,{children:"pub()"}),", respectively). Failure to specify these options will result in incorrect behavior."]})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["Activating an alert that is already active has no effect (the alert will not be queued to play again). If you wish to play alerts in response to a discrete event rather than a state transition, the ",(0,n.jsx)(t.a,{href:"#triggering-alerts",children:"trigger function"})," may be more useful."]})}),"\n",(0,n.jsx)(t.h2,{id:"triggering-alerts",children:"Triggering Alerts"}),"\n",(0,n.jsxs)(t.p,{children:["Sometimes you will want an alert to play as a response to a discrete event instead of a state transition. You can do this by ",(0,n.jsx)(t.em,{children:"triggering"})," the alert instead of activating it."]}),"\n",(0,n.jsx)(t.p,{children:"Each alert has a trigger state in addition to its activation state; an alert can either be triggered or untriggered. When an alert transitions from untriggered to triggered, an instance of the alert is queued to play. Once a triggered alert is finished playing, it automatically reverts to the untriggered state. You may also manually untrigger an alert. When an alert transitions from triggered to untriggered, the triggered instance will be removed from the queue. If the triggered instance of the alert is already playing when it is untriggered, it will continue to play. Triggered alerts do not repeat."}),"\n",(0,n.jsx)(t.p,{children:"Triggered instances of alerts are treated entirely independently of activated instances. The activation state of an alert has no effect on any triggered instances and vice versa. If an alert is activated and triggered at the same time, both the activated and triggered instances will be queued to play and the alert will be heard twice."}),"\n",(0,n.jsx)(t.p,{children:"To trigger and untrigger alerts, use the event bus:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import { AuralAlertControlEvents } from '@microsoft/msfs-sdk';\r\n\r\n// Triggers the alert with ID 'no-takeoff'.\r\nbus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_trigger', 'no-takeoff', true, false);\r\n\r\n// Untriggers the alert with ID 'no-takeoff'.\r\nbus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_untrigger', 'no-takeoff', true, false);\n"})}),"\n",(0,n.jsx)(t.h2,{id:"customizing-alert-instances",children:"Customizing Alert Instances"}),"\n",(0,n.jsx)(t.p,{children:"You are allowed to customize the instance of an alert that is queued to play when activating and triggering alerts. In doing so, you alter how the alert instance is played compared to how the alert was defined during registration. You can change the alert's sound event sequence, whether it is continuous, and whether it is repeating. A customized alert always retains its original queue and priority."}),"\n",(0,n.jsxs)(t.p,{children:["To activate/trigger a customized alert instance, send an ",(0,n.jsx)(t.code,{children:"AuralAlertActivation"})," object as the event data instead of just an ID string when activating/triggering the alert:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"const manager = new AuralAlertRegistrationManager(bus);\r\n\r\nmanager.register({\r\n  uuid: 'no-takeoff',\r\n  queue: 'my-queue',\r\n  priority: 0,\r\n  sequence: 'aural_no_takeoff',\r\n  continuous: false,\r\n  repeat: true\r\n});\r\n\r\n// Activates the alert with ID 'no-takeoff'.\r\n// The alert will play the 'aural_no_takeoff' sound event twice instead of repeatedly.\r\nbus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_activate', {\r\n  uuid: 'no-takeoff',\r\n  sequence: ['aural_no_takeoff', 'aural_no_takeoff'],\r\n  repeat: false\r\n}, true, false);\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"Activating or triggering a customized alert instance while the alert is already active or triggered, respectively, has no effect. The new custom instance will not replace the one that is already activated/triggered. To force the new custom instance to replace the existing one, you must deactivate/untrigger the alert first."})}),"\n",(0,n.jsx)(t.h2,{id:"alert-aliases",children:"Alert Aliases"}),"\n",(0,n.jsx)(t.p,{children:"Normally, only one activated and one triggered instance of an alert can be queued simultaneously. However, there are cases where you may want to queue multiple similar and related alerts simultaneously. One solution would be to register a separate alert for each simultaneous instance that can be queued. But this isn't possible if you don't know beforehand how many simultaneous instances can be queued, or if the number of queued instances is unbounded."}),"\n",(0,n.jsxs)(t.p,{children:["To get around the above limitations, Aural Alert System allows you to activate and trigger alerts using ",(0,n.jsx)(t.em,{children:"aliases"}),". When an alert is activated/triggered with an alias, the alias effectively replaces the alert's registered ID string for that instance of the alert. An alert that is activated/triggered without an explicit alias can be considered to spawn an instance with an alias equal to its registered ID. The system treats alert instances with different aliases as ",(0,n.jsx)(t.em,{children:"separate"})," alerts. Therefore, alert instances with different aliases are allowed to co-exist in the queue, even if they were spawned from the same alert."]}),"\n",(0,n.jsx)(t.admonition,{type:"warning",children:(0,n.jsxs)(t.p,{children:["Alert aliases, like IDs, must be ",(0,n.jsx)(t.em,{children:"unique"}),". Do not choose aliases that match existing alert IDs or other aliases that are in use."]})}),"\n",(0,n.jsx)(t.p,{children:"When deactivating or untriggering aliased alerts, you must use the alias everywhere an ID is normally expected."}),"\n",(0,n.jsx)(t.p,{children:"The following example shows how to use aliased alerts to queue a separate alert whenever a new traffic advisory is issued:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"/**\r\n * Called when a new traffic advisory is issued.\r\n * @param threatId The ID of the intruder.\r\n * @param bus The event bus.\r\n */\r\nfunction onTrafficAdvisoryIssued(intruderId: string, bus: EventBus): void {\r\n  bus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_activate', {\r\n    uuid: 'traffic',\r\n    alias: `traffic-${intruderId}`\r\n  }, true, false);\r\n}\r\n\r\n/**\r\n * Called when a traffic advisory is cancelled.\r\n * @param threatId The ID of the intruder.\r\n * @param bus The event bus.\r\n */\r\nfunction onTrafficAdvisoryCancelled(threatId: string, bus: EventBus): void {\r\n  bus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_deactivate', `traffic-${intruderId}`, true, false);\r\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"alert-suffixes",children:"Alert Suffixes"}),"\n",(0,n.jsxs)(t.p,{children:["Suppose you want to queue an alert if and only if at least one of a number of separate conditions has been met. Aural Alert System supports this type of logic through the use of alert ",(0,n.jsx)(t.em,{children:"suffixes"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["When an alert is activated or triggered using a suffix, the activation/trigger state of each suffix is tracked independently. The activation/trigger state of the alert as a whole then becomes dependent on the states of the suffixes such that the alert is considered to be active or triggered if and only if at least ",(0,n.jsx)(t.em,{children:"one"})," of its suffixes is active or triggered, respectively. An alert that is activated/triggered without an explicit suffix can be considered to activate/trigger the ",(0,n.jsx)(t.em,{children:"empty"})," suffix, which is treated the same as any other suffix. Suffixes are applied on a per-alias basis, so activating/triggering a suffix on alias ",(0,n.jsx)(t.em,{children:"A"})," has no effect on the activation/trigger state of alias ",(0,n.jsx)(t.em,{children:"B"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["When deactivating or untriggering suffixed alerts, you must use a suffixed form of the alert ID/alias equal to ",(0,n.jsx)(t.code,{children:"`${uuid}::${suffix}`"})," everywhere an ID is normally expected."]}),"\n",(0,n.jsx)(t.p,{children:"The following example shows how to use suffixed alerts to implement a master warning alert that is queued to play as long as one warning is active:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"/**\r\n * Called when a warning is activated.\r\n * @param warningId The ID of the warning.\r\n * @param bus The event bus.\r\n */\r\nfunction onWarningActivated(warningId: string, bus: EventBus): void {\r\n  bus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_trigger', {\r\n    uuid: 'master-warning',\r\n    suffix: warningId\r\n  }, true, false);\r\n}\r\n\r\n/**\r\n * Called when a warning is deactivated.\r\n * @param warningId The ID of the warning.\r\n * @param bus The event bus.\r\n */\r\nfunction onWarningDeactivated(warningId: string, bus: EventBus): void {\r\n  bus.getPublisher<AuralAlertControlEvents>().pub('aural_alert_untrigger', `master-warning::${warningId}`, true, false);\r\n}\n"})}),"\n",(0,n.jsxs)(t.h2,{id:"auralalertsystem-wakesleep-state",children:[(0,n.jsx)(t.code,{children:"AuralAlertSystem"})," Wake/Sleep State"]}),"\n",(0,n.jsxs)(t.p,{children:["When instantiating ",(0,n.jsx)(t.code,{children:"AuralAlertSystem"}),", it is initialized to a sleeping state. While asleep, it will continue to track alert state but will not play any sounds. This is meant to model what would occur when the avionics' sound subsystem is turned off. To wake the system, call the ",(0,n.jsx)(t.code,{children:"wake()"})," method. Waking the system will cause it to queue any continuous or repeating alerts that are active. Active alerts that are neither continuous nor repeating will not be queued. However, any alert that becomes activated or triggered while the system is awake will be queued normally."]}),"\n",(0,n.jsxs)(t.p,{children:["Calling the ",(0,n.jsx)(t.code,{children:"sleep()"})," method will put the system back to sleep. Putting the system to sleep will immediately unqueue all alerts and untrigger any triggered alerts. Activated alerts will remain active until they are deactivated normally. Any alerts that are already playing will be stopped at the earliest opportunity without waiting for them to finish. While the system is asleep, alerts cannot be triggered. Alerts can still be activated but will not be queued."]}),"\n",(0,n.jsxs)(t.h2,{id:"using-casauralalerttransporter",children:["Using ",(0,n.jsx)(t.code,{children:"CasAuralAlertTransporter"})]}),"\n",(0,n.jsxs)(t.p,{children:["A common pattern found in many avionics systems is to bind the activation state of aural alerts to CAS (crew alerting system) alerts. If your CAS is implemented using the ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/cas/cas-system",children:"CAS System API"}),", then you can use ",(0,n.jsx)(t.code,{children:"CasAuralAlertTransporter"})," to activate alerts based on whether a particular CAS alert is displayed as a message."]}),"\n",(0,n.jsxs)(t.p,{children:["Let's say that we want to activate the ",(0,n.jsx)(t.code,{children:"no-takeoff"})," aural alert whenever the associated ",(0,n.jsx)(t.code,{children:"cas-no-takeoff"})," CAS alert is displayed as a message with warning priority:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-typescript",children:"import { AnnunciationType, CasAuralAlertTransporter } from '@microsoft/msfs-sdk';\r\n\r\nCasAuralAlertTransporter.create(\r\n  bus,                                      // event bus\r\n  {\r\n    auralUuid: 'no-takeoff',                // aural alert ID\r\n    auralActivation: undefined,             // optional AuralAlertActivation object to customize the aural alert\r\n    auralAction: 'activate',                // whether to activate or trigger the aural alert\r\n    casUuid: 'cas-no-takeoff',              // CAS alert ID\r\n    casPriority: AnnunciationType.Warning,  // CAS alert priority level\r\n    casSuffix: undefined,                   // CAS alert suffix - in this case the alert has no suffixes\r\n    includeAcknowledged: true               // whether to activate/trigger the aural alert if the CAS alert has been acknowledged\r\n  }\r\n);\n"})}),"\n",(0,n.jsxs)(t.p,{children:["When creating a ",(0,n.jsx)(t.code,{children:"CasAuralAlertTransporter"}),", you can optionally provide a reference to ",(0,n.jsx)(t.code,{children:"CasSystem"}),". Doing so will ensure that the aural alert activation state is initialized correctly (e.g. if the bound CAS alert is already displayed when the transporter is created). If the reference is not provided, then care must be taken to create the transporter ",(0,n.jsx)(t.em,{children:"before"})," the bound CAS alert has a chance to be activated and displayed."]}),"\n",(0,n.jsxs)(t.p,{children:["For more detailed information on ",(0,n.jsx)(t.code,{children:"CasAuralAlertTransporter"}),", please refer to the ",(0,n.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/CasAuralAlertTransporter",children:"API documentation"}),"."]})]})}function c(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},250065:function(e,t,r){r.d(t,{Z:function(){return l},a:function(){return s}});var a=r(667294);let n={},i=a.createContext(n);function s(e){let t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);