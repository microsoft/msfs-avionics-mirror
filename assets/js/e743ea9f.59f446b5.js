"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[88727],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(a),m=i,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},22555:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_label:"External Navigators",sidebar_position:10},o="G3X Touch External Navigators",s={unversionedId:"g3xtouch/external-navigators",id:"g3xtouch/external-navigators",title:"G3X Touch External Navigators",description:"Introduction",source:"@site/docs/g3xtouch/external-navigators.md",sourceDirName:"g3xtouch",slug:"/g3xtouch/external-navigators",permalink:"/msfs-avionics-mirror/docs/g3xtouch/external-navigators",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"External Navigators",sidebar_position:10},sidebar:"sidebar",previous:{title:"CAS",permalink:"/msfs-avionics-mirror/docs/g3xtouch/cas"},next:{title:"H Event List",permalink:"/msfs-avionics-mirror/docs/g3xtouch/h-event-list"}},l={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Configuring the G3X Touch to work with External Navigators",id:"configuring-the-g3x-touch-to-work-with-external-navigators",level:2},{value:"FMS Configuration",id:"fms-configuration",level:3},{value:"Declaring External Navigators",id:"declaring-external-navigators",level:3},{value:"Example",id:"example",level:3},{value:"Configuring External Navigators to work with the G3X Touch",id:"configuring-external-navigators-to-work-with-the-g3x-touch",level:2},{value:"Flight Planning",id:"flight-planning",level:3},{value:"LNAV",id:"lnav",level:3},{value:"VNAV",id:"vnav",level:3},{value:"Glidepath",id:"glidepath",level:3},{value:"Autopilot Guidance",id:"autopilot-guidance",level:3},{value:"FMS",id:"fms",level:3},{value:"Availability",id:"availability",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"g3x-touch-external-navigators"},"G3X Touch External Navigators"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The G3X Touch can interface with other navigation sources, or ",(0,i.kt)("em",{parentName:"p"},"external navigators"),', in the same aircraft. External navigators can provide their own GPS position data, flight planning data, and LNAV and VNAV guidance to the G3X Touch. The G3X Touch allows the user to view and interact with the information provided by external navigators through the G3X interface and can also route external navigation guidance to an autopilot. This allows the G3X Touch to function as a central "hub" that presents all pertinent navigation information to the user and allows control of key navigation and autopilot functions through a convenient large-screen touch interface.'),(0,i.kt)("p",null,"Note that the real G3X Touch also sources NAV radio data (VOR/DME/LOC/GS) from external navigators. However, for the sim version of the G3X Touch, the term external navigator will be reserved for those navigators that provide GPS, flight planning, and LNAV and VNAV guidance data."),(0,i.kt)("h2",{id:"configuring-the-g3x-touch-to-work-with-external-navigators"},"Configuring the G3X Touch to work with External Navigators"),(0,i.kt)("p",null,"The G3X Touch must be explicitly configured to accept data from external navigators. All configuration is done through ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/g3xtouch/panel-xml-basics"},(0,i.kt)("inlineCode",{parentName:"a"},"panel.xml")),"."),(0,i.kt)("h3",{id:"fms-configuration"},"FMS Configuration"),(0,i.kt)("p",null,"The presence of external navigators necessarily means that independent instances of certain flight planning and navigation code are running simultaneously in the same aircraft. One set will be running on the G3X Touch, and one set on each external navigator. Care must be taken to ensure these instances do not conflict with one another."),(0,i.kt)("p",null,"To that end, the following options should be explicitly configured in the ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/g3xtouch/panel-xml-tag-documentation#fms"},(0,i.kt)("inlineCode",{parentName:"a"},"<Fms>"))," tag:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"LNAV Index"),": The index of the LNAV instance used by the G3X Touch internally. Must be distinct from any external navigators."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Use Sim OBS State"),": Whether the G3X Touch should use the sim's native OBS state for its internal LNAV instance. This should be disabled if any external navigators are using the sim's native OBS state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"VNAV Index"),": The index of the VNAV instance used by the G3X Touch internally. Must be distinct from any external navigators."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Sync to Sim"),": Whether the G3X Touch should sync its internal flight plan back to the sim's native flight planning system. This should be disabled if any external navigators are syncing their flight plans to the sim.")),(0,i.kt)("h3",{id:"declaring-external-navigators"},"Declaring External Navigators"),(0,i.kt)("p",null,"The G3X Touch supports up to two external navigators. However, it only uses data from one navigator at a time. The second navigator, if it exists, is used as a backup if the first one fails."),(0,i.kt)("p",null,"External navigators are declared using the ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/g3xtouch/panel-xml-tag-documentation#externalsources"},(0,i.kt)("inlineCode",{parentName:"a"},"<ExternalSources>"))," tag. One ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/g3xtouch/panel-xml-tag-documentation#source-externalsources"},(0,i.kt)("inlineCode",{parentName:"a"},"<Source>"))," tag should be created as a child of ",(0,i.kt)("inlineCode",{parentName:"p"},"<ExternalSources>")," for each external navigator. The first tag defines external navigator 1, and the second tag defines external navigator 2."),(0,i.kt)("p",null,"The following options must be defined for each external navigator:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flight Planner ID"),": The ID of the flight planner used by the external navigator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flight Path Calculator ID"),": The ID of the flight path calculator used by the external navigator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"LNAV Index"),": The index of the LNAV instance used by the external navigator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Use Sim OBS State"),": Whether the external navigator uses the sim's native OBS state for its internal LNAV instance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"VNAV Index"),": The index of the VNAV instance used by the external navigator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Autopilot Guidance Index"),": The index of the ",(0,i.kt)("a",{parentName:"li",href:"#autopilot-guidance"},"autopilot guidance")," published by the external navigator.")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"The following is an example excerpt from a ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," file that configures a G3X Touch with two external navigators."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<Fms\n  lnav-index="0"\n  use-sim-obs="false"\n  vnav-index="0"\n  sync-to-sim="false"\n>\n  <ExternalSources>\n\n    \x3c!-- External Navigator 1 --\x3e\n    <Source\n      fpl-id="gns-1"\n      flight-path-calc-id="gns-1"\n      lnav-index="1"\n      use-sim-obs="true"\n      vnav-index="1"\n      ap-guidance-index="1"\n    />\n\n    \x3c!-- External Navigator 2 --\x3e\n    <Source\n      fpl-id="gns-2"\n      flight-path-calc-id="gns-2"\n      lnav-index="2"\n      use-sim-obs="false"\n      vnav-index="2"\n      ap-guidance-index="2"\n    />\n\n  </ExternalSources>\n</Fms>\n')),(0,i.kt)("h2",{id:"configuring-external-navigators-to-work-with-the-g3x-touch"},"Configuring External Navigators to work with the G3X Touch"),(0,i.kt)("p",null,"External navigators must be configured to correctly send data to the G3X Touch."),(0,i.kt)("h3",{id:"flight-planning"},"Flight Planning"),(0,i.kt)("p",null,"In order to send valid flight plan data to the G3X Touch, the external navigator must use the flight planning system provided by the MSFS SDK. An instance of ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/classes/FlightPlanner"},(0,i.kt)("inlineCode",{parentName:"a"},"FlightPlanner"))," should be created with an ID string that is ",(0,i.kt)("strong",{parentName:"p"},"not")," ",(0,i.kt)("inlineCode",{parentName:"p"},"'g3x'"),". The flight planner should use a ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/classes/FlightPathCalculator"},(0,i.kt)("inlineCode",{parentName:"a"},"FlightPathCalculator"))," instance that is created with ID string that is also ",(0,i.kt)("strong",{parentName:"p"},"not")," ",(0,i.kt)("inlineCode",{parentName:"p"},"'g3x'"),". The calculator should have an initialization sync role of ",(0,i.kt)("inlineCode",{parentName:"p"},"primary")," (see the example below). If the external navigator shares its flight path calculator ID with another instrument, then only one instance among all the calculators of that ID need to have a sync role of ",(0,i.kt)("inlineCode",{parentName:"p"},"primary"),"."),(0,i.kt)("p",null,"Here is some example code that creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"FlightPlanner")," instance compatible with the G3X Touch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  EventBus, FacilityLoader, FacilityRepository, FlightPathCalculator, FlightPlanner\n} from '@microsoft/msfs-sdk';\n\nconst bus = new EventBus();\nconst facLoader = new FacilityLoader(FacilityRepository.getRepository(bus));\n\nconst flightPathCalculator = new FlightPathCalculator(\n  facLoader,\n  {\n    id: 'gns',\n    initSyncRole: 'primary',\n    // Other options as desired.\n  },\n  bus\n);\n\nconst flightPlanner = FlightPlanner.getPlanner('gns', bus, { calculator: flightPathCalculator });\n")),(0,i.kt)("h3",{id:"lnav"},"LNAV"),(0,i.kt)("p",null,"The simplest way for the external navigator to generate LNAV data compatible with the G3X Touch is to create an instance of ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/classes/LNavComputer"},(0,i.kt)("inlineCode",{parentName:"a"},"LNavComputer"))," with the ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/classes/GarminObsLNavModule"},(0,i.kt)("inlineCode",{parentName:"a"},"GarminObsLNavModule"))," and an instance of ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/classes/NavdataComputer"},(0,i.kt)("inlineCode",{parentName:"a"},"NavdataComputer")),". Certain event bus publishers also need to be created for these classes to work correctly (see the example code)."),(0,i.kt)("p",null,"Here is some example code that creates a set of LNAV classes compatible with the G3X Touch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n InstrumentBackplane, LNavComputer, LNavObsSimVarPublisher, LNavSimVarPublisher\n} from '@microsoft/msfs-sdk';\nimport {\n  GarminAPUtils, GarminObsLNavModule, NavdataComputer\n} from '@microsoft/msfs-garminsdk';\n\n// These instruments/publishers must be used to publish topics to the event bus in order for the LNAV classes to\n// function properly.\nconst backplane = new InstrumentBackplane();\nconst clock = new Clock(bus);\nconst lNavPublisher = new LNavSimVarPublisher(bus);\nconst lNavObsPublisher = new LNavObsSimVarPublisher(bus);\n// The names of the instruments/publishers used to add them to the backplane must be unique,\n// but are otherwise arbitrary.\nbackplane.addInstrument('clock', clock);\nbackplane.addPublisher('lnav', lNavPublisher);\nbackplane.addPublisher('lnavObs', lNavObsPublisher);\n\nconst lnavIndex = 0; // Must be different from the G3X Touch's internal LNAV index.\nconst useSimObsState = true; // As desired.\nconst maxBankAngle = 25; // Should be the same value as the autopilot's configured maximum bank angle for FMS/GPS mode (not a strict requirement).\nconst intercept = GarminAPUtils.lnavIntercept; // As desired.\n\nconst lnavComputer = new LNavComputer(\n  lnavIndex,\n  bus,\n  flightPlanner,\n  new GarminObsLNavModule(lnavIndex, bus, flightPlanner, {\n    maxBankAngle, \n    intercept,\n    useSimObsState\n  }),\n  {\n    maxBankAngle,\n    intercept,\n    isPositionDataValid: true, // As desired.\n    hasVectorAnticipation: true\n  }\n);\n\nconst navdataComputer = new NavdataComputer(bus, flightPlanner, facLoader, {\n  lnavIndex,\n  useSimObsState,\n  vnavIndex: 0,\n  useVfrCdiScaling: false // As desired.\n});\n")),(0,i.kt)("p",null,"Once created, ",(0,i.kt)("inlineCode",{parentName:"p"},"LNavComputer")," must be updated periodically by calling its ",(0,i.kt)("inlineCode",{parentName:"p"},"update()")," method. It is recommended to update ",(0,i.kt)("inlineCode",{parentName:"p"},"LNavComputer")," every frame using a ",(0,i.kt)("inlineCode",{parentName:"p"},"setInterval()")," loop or subscribing to the event bus's ",(0,i.kt)("inlineCode",{parentName:"p"},"simTimeHiFreq"),' topic. These strategies bypass throttling of the Javascript rendering loop that occurs under certain situations (e.g. with a "Low" cockpit refresh rate setting or when the user is in External View) that might lead to unacceptably long intervals between updates. ',(0,i.kt)("inlineCode",{parentName:"p"},"NavdataComputer")," does not need to be explicitly updated and will automatically perform its functions after creation. Finally, the ",(0,i.kt)("inlineCode",{parentName:"p"},"InstrumentBackplane")," (or the individual event bus publishers if not using ",(0,i.kt)("inlineCode",{parentName:"p"},"InstrumentBackplane"),") must also be initialized and updated in a loop; it is recommended to use ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseInstrument"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"Update()")," method for this."),(0,i.kt)("p",null,"Here is some example code showing how to update LNAV and supporting classes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { ClockEvents } from '@microsoft/msfs-sdk';\n\nclass MyInstrument extends BaseInstrument {\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    // Assuming all LNAV classes and publishers have been created by now.\n\n    this.backplane.init();\n\n    this.bus.getSubscriber<ClockEvents>().on('simTimeHiFreq').handle(() => {\n      this.lnavComputer.update();\n    });\n  }\n\n  public Update(): void {\n    super.Update();\n\n    this.backplane.onUpdate();\n  }\n}\n")),(0,i.kt)("p",null,"You may also choose to use your own code to generate LNAV data from the external navigator. Any custom implementation must conform to the LNAV API defined in the MSFS SDK and Garmin SDK. Namely, values must be published to ",(0,i.kt)("strong",{parentName:"p"},"all")," of the SimVars and event bus topics (with the correct LNAV index) defined by the following:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"SimVars")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/enums/LNavVars"},(0,i.kt)("inlineCode",{parentName:"a"},"LNavVars"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/enums/LNavDataVars"},(0,i.kt)("inlineCode",{parentName:"a"},"LNavDataVars"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/enums/GarminLNavDataVars"},(0,i.kt)("inlineCode",{parentName:"a"},"GarminLNavDataVars")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Event Bus Topics")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/modules#lnavevents"},(0,i.kt)("inlineCode",{parentName:"a"},"LNavEvents"))," (only those topics not backed by a SimVar)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/interfaces/LNavDataEvents"},(0,i.kt)("inlineCode",{parentName:"a"},"LNavDataEvents"))," (only those topics not backed by a SimVar)")),(0,i.kt)("h3",{id:"vnav"},"VNAV"),(0,i.kt)("p",null,"If the external navigator supports VNAV, then it must generate VNAV data. First, a vertical path calculator should be created in the the form of an instance of ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/framework/classes/SmoothingPathCalculator"},(0,i.kt)("inlineCode",{parentName:"a"},"SmoothingPathCalculator")),". The calculator must be created using a specific set of configuration options (see the example below)."),(0,i.kt)("p",null,"Here is some example code that creates a vertical path calculator compatible with the G3X Touch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { SmoothingPathCalculator } from '@microsoft/msfs-sdk';\nimport {\n  FmsUtils, GarminVNavUtils\n} from '@microsoft/msfs-garminsdk';\n\nconst vnavIndex = 0; // Must be different from the G3X Touch's internal VNAV index.\n\nconst verticalPathCalc = new SmoothingPathCalculator(bus, flightPlanner, FmsUtils.PRIMARY_PLAN_INDEX, {\n  index: vnavIndex,\n  defaultFpa: 3,\n  maxFpa: 6,\n  isLegEligible: GarminVNavUtils.isLegVNavEligible,\n  shouldUseConstraint: GarminVNavUtils.shouldUseConstraint,\n  invalidateClimbConstraint: GarminVNavUtils.invalidateClimbConstraint,\n  invalidateDescentConstraint: GarminVNavUtils.invalidateDescentConstraint\n});\n")),(0,i.kt)("p",null,"Once a vertical path calculator is created, VNAV data can be generated by using the ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/classes/GarminVNavComputer"},(0,i.kt)("inlineCode",{parentName:"a"},"GarminVNavComputer"))," class."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GarminVNavComputer")," requires feedback from the autopilot to function correctly. Specifically, it needs access to the autopilot's selected altitude, selected vertical speed, active lateral mode, active vertical mode, and armed vertical mode. It also needs to respond to when the autopilot attempts to activate and deactivate VNAV. If the aircraft is configured to use the G3X Touch's internal autopilot, then these autopilot data can all be retrieved from the event bus (see the example below). If the aircraft is configured with an autopilot that is not managed by the G3X Touch, then you will need to ensure the appropriate data is sent to and captured by the external navigator."),(0,i.kt)("p",null,"Here is some example code showing how to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"GarminVNavComputer")," that receives feedback from an autopilot managed by the G3X Touch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n APLateralModes, APVerticalModes, AutopilotInstrument, ConsumerValue, InstrumentBackplane, MappedValue\n} from '@microsoft/msfs-sdk';\nimport {\n  FmaDataEvents, FmsUtils, GarminVNavComputer, GarminVNavComputerAPValues, GarminVNavManagerEvents\n} from '@microsoft/msfs-garminsdk';\n\n// AutopilotInstrument is required to retrieve selected altitude and selected VS data from the bus.\nconst backplane = new InstrumentBackplane();\nconst apInstrument = new AutopilotInstrument(bus)\n// The names of the instrument used to add it to the backplane must be unique, but is otherwise arbitrary.\nbackplane.addInstrument('ap', apInstrument);\n\nconst vnavIndex = 0; // Must be different from the G3X Touch's internal VNAV index.\n\nconst fmaData = ConsumerValue.create<Readonly<FmaData> | undefined>(\n  bus.getSubscriber<FmaDataEvents>().on('fma_data'), undefined\n);\n\n// Retrieve autopilot data from the event bus.\nconst apValues: GarminVNavComputerAPValues = {\n  selectedAltitude: ConsumerValue.create(bus.getSubscriber<APEvents>().on('ap_altitude_selected'), 0),\n  selectedVerticalSpeed: ConsumerValue.create(bus.getSubscriber<APEvents>().on('ap_vs_selected'), 0),\n  lateralActive: MappedValue.create(([fmaData]) => fmaData?.lateralActive ?? APLateralModes.NONE),\n  verticalActive: MappedValue.create(([fmaData]) => fmaData?.verticalActive ?? APVerticalModes.NONE),\n  verticalArmed: MappedValue.create(([fmaData]) => fmaData?.verticalArmed ?? APVerticalModes.NONE)\n};\n\nconst vnavComputer = new GarminVNavComputer(\n  vnavIndex,\n  bus,\n  flightPlanner,\n  verticalPathCalc,\n  apValues,\n  {\n    primaryPlanIndex: FmsUtils.PRIMARY_PLAN_INDEX\n    // Other options as desired.\n  }\n);\n\n// Respond to attempts by the autopilot to activate/deactivate VNAV.\nbus.getSubscriber<GarminVNavManagerEvents>()\n  .on('vnav_manager_activated').handle(() => { vnavComputer.tryActivate(); });\nbus.getSubscriber<GarminVNavManagerEvents>()\n  .on('vnav_manager_deactivated').handle(() => { vnavComputer.tryDeactivate(); });\n")),(0,i.kt)("p",null,"Once created, ",(0,i.kt)("inlineCode",{parentName:"p"},"GarminVNavComputer")," must be updated periodically by calling its ",(0,i.kt)("inlineCode",{parentName:"p"},"update()")," method. Like with the LNAV computer, it is recommended to update ",(0,i.kt)("inlineCode",{parentName:"p"},"GarminVNavComputer")," every frame using a ",(0,i.kt)("inlineCode",{parentName:"p"},"setInterval()")," loop or subscribing to the event bus's ",(0,i.kt)("inlineCode",{parentName:"p"},"simTimeHiFreq")," topic. And as always, the ",(0,i.kt)("inlineCode",{parentName:"p"},"InstrumentBackplane")," (or the individual event bus publishers if not using ",(0,i.kt)("inlineCode",{parentName:"p"},"InstrumentBackplane"),") must also be initialized and updated in a loop; it is recommended to use ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseInstrument"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"Update()")," method for this."),(0,i.kt)("p",null,"Here is some example code showing how to update VNAV and supporting classes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { ClockEvents } from '@microsoft/msfs-sdk';\n\nclass MyInstrument extends BaseInstrument {\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    // Assuming all VNAV classes and publishers have been created by now.\n\n    this.backplane.init();\n\n    this.bus.getSubscriber<ClockEvents>().on('simTimeHiFreq').handle(() => {\n      this.vnavComputer.update();\n    });\n  }\n\n  public Update(): void {\n    super.Update();\n\n    this.backplane.onUpdate();\n  }\n}\n")),(0,i.kt)("h3",{id:"glidepath"},"Glidepath"),(0,i.kt)("p",null,"If the external navigator supports RNAV approaches, then it must generate glidepath data. Glidepath data can be generated using an instance of ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/classes/GarminGlidepathComputer"},(0,i.kt)("inlineCode",{parentName:"a"},"GarminGlidepathComputer")),"."),(0,i.kt)("p",null,"Here is some example code that creates a glidepath computer compatible with the G3X Touch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  FmsUtils, GarminGlidepathComputer\n} from '@microsoft/msfs-garminsdk';\n\nconst vnavIndex = 0; // Must be different from the G3X Touch's internal VNAV index.\n\nconst glidepathComputer = new GarminGlidepathComputer(\n  vnavIndex,\n  bus,\n  flightPlanner,\n  {\n    primaryPlanIndex: FmsUtils.PRIMARY_PLAN_INDEX\n    // Other options as desired.\n  }\n);\n")),(0,i.kt)("h3",{id:"autopilot-guidance"},"Autopilot Guidance"),(0,i.kt)("p",null,"The external navigator should provide LNAV, VNAV, and glidepath guidance to the G3X Touch's managed autopilot if the G3X Touch is configured with one. These guidance data should be written to the SimVars listed in the following enums:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"LNAV: ",(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/enums/APExternalGpsSteerCommandSimVars"},(0,i.kt)("inlineCode",{parentName:"a"},"APExternalGpsSteerCommandSimVars"))),(0,i.kt)("li",{parentName:"ul"},"VNAV: ",(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/enums/APExternalVNavGuidanceSimVars"},(0,i.kt)("inlineCode",{parentName:"a"},"APExternalVNavGuidanceSimVars"))," and ",(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/enums/APExternalVerticalPathGuidanceSimVars"},(0,i.kt)("inlineCode",{parentName:"a"},"APExternalVerticalPathGuidanceSimVars"))),(0,i.kt)("li",{parentName:"ul"},"Glidepath: ",(0,i.kt)("a",{parentName:"li",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/enums/APExternalGlidepathGuidanceSimVars"},(0,i.kt)("inlineCode",{parentName:"a"},"APExternalGlidepathGuidanceSimVars")))),(0,i.kt)("p",null,"The SimVars should be indexed (using the suffix ",(0,i.kt)("inlineCode",{parentName:"p"},":[index]"),") with a chosen autopilot guidance index. The index can be any positive integer, but it must be unique for each external navigator providing independent guidance and it must match the index provided to the G3X Touch when ",(0,i.kt)("a",{parentName:"p",href:"#declaring-external-navigators"},"declaring")," external navigators in ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml"),"."),(0,i.kt)("p",null,"If you used the ",(0,i.kt)("a",{parentName:"p",href:"#lnav"},"LNAV"),", ",(0,i.kt)("a",{parentName:"p",href:"#vnav"},"VNAV"),", and/or ",(0,i.kt)("a",{parentName:"p",href:"#glidepath"},"glidepath")," classes suggested above, then guidance data can be retrieved directly from those classes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const lnavComputer = new LNavComputer(/* ... */);\nconst vnavComputer = new GarminVNavComputer(/* ... */);\nconst glidepathComputer = new GarminGlidepathComputer(/* ... */);\n\nconst gpsSteerCommand = lnavComputer.steerCommand.get();\nconst vnavGuidance = vnavComputer.guidance.get();\nconst vnavPathGuidance = vnavComputer.pathGuidance.get();\nconst glidepathGuidance = glidepathComputer.glidepathGuidance.get();\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If the G3X Touch is not configured with an autopilot, then the external navigator can skip sending autopilot guidance in the form of the above SimVars. However, LNAV, VNAV, and glidepath data (the latter two only if supported) must still be generated even without an autopilot. This is because the G3X Touch uses those data to drive various indications that are not dependent on an autopilot, such as the CDI and VDI.")),(0,i.kt)("h3",{id:"fms"},"FMS"),(0,i.kt)("p",null,"The external navigator should use an instance of ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/msfs-avionics-mirror/docs/garminsdk/classes/Fms"},(0,i.kt)("inlineCode",{parentName:"a"},"Fms"))," to manipulate flight plans. ",(0,i.kt)("inlineCode",{parentName:"p"},"Fms")," ensures that the internal structure of flight plans are formatted correctly, appropriate metadata is created and maintained for flight plans, and important data is published to the event bus."),(0,i.kt)("p",null,"Here is some example code that creates an FMS compatible with the G3X Touch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Fms } from '@microsoft/msfs-garminsdk';\n\nconst isPrimary = true; // There must be exactly one primary Fms instance per unique flight planner ID.\nconst lnavIndex = 0; // Must be different from the G3X Touch's internal LNAV index.\nconst useSimObsState = true; // As desired.\nconst vnavIndex = 0; // Must be different from the G3X Touch's internal VNAV index.\n\nconst fms = new Fms(\n  isPrimary,\n  bus,\n  flightPlanner,\n  verticalPathCalculator, // Optional; only required if the external navigator supports VNAV.\n  {\n    lnavIndex,\n    useSimObsState\n    // Other options as desired.\n  }\n);\n")),(0,i.kt)("p",null,"Once created, ",(0,i.kt)("inlineCode",{parentName:"p"},"Fms")," should be used to carry out ",(0,i.kt)("strong",{parentName:"p"},"all")," modifications to the external navigator's flight plan. Direct manipulation of flight plans using ",(0,i.kt)("inlineCode",{parentName:"p"},"FlightPlanner")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"FlightPlan")," is highly discouraged and may lead to undesired behavior."),(0,i.kt)("h3",{id:"availability"},"Availability"),(0,i.kt)("p",null,"The G3X Touch needs to know when external navigators are available and when they are not so that it can revert to the backup external navigator or to its internal navigation source when necessary. Generally speaking, an external navigator should be considered available when it is powered and initialized and not available otherwise. However, external navigators are free to choose their own logic as long as they provide the G3X Touch with coherent data while they are considered to be available."),(0,i.kt)("p",null,"External navigators should communicate their availability to the G3X Touch in two ways. The first is to write the availability state as a boolean (",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"1"),") to an LVar: ",(0,i.kt)("inlineCode",{parentName:"p"},"L:WT_G3X_Fpl_Source_External_Available:[index]"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"[index]")," is the external navigator's assigned index (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," for external navigator 1 and ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," for external navigator 2). The second is to publish the availability state as a boolean value to the event bus topic ",(0,i.kt)("inlineCode",{parentName:"p"},"g3x_fpl_source_external_available_[index]"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"[index]")," again is the external navigator's assigned index. When publishing this event bus topic, ensure that the published data is synced to other instruments (so that it reaches the G3X Touch) and is cached:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"bus.pub(\n  'g3x_fpl_source_external_available_1',\n  true,\n  true, // sync to other instruments\n  true // cache data\n);\n")))}p.isMDXComponent=!0}}]);