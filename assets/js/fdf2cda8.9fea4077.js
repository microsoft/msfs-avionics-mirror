"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[75495],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||r;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},62229:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_label:"panel.xml Basics",sidebar_position:2},o="WT21 `panel.xml` Basics",l={unversionedId:"wt21/panel-xml-basics",id:"wt21/panel-xml-basics",title:"WT21 `panel.xml` Basics",description:"Introduction",source:"@site/docs/wt21/panel-xml-basics.md",sourceDirName:"wt21",slug:"/wt21/panel-xml-basics",permalink:"/msfs-avionics-mirror/docs/wt21/panel-xml-basics",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"panel.xml Basics",sidebar_position:2},sidebar:"sidebar",previous:{title:"Overview",permalink:"/msfs-avionics-mirror/docs/wt21/overview"},next:{title:"panel.xml Tag Documentation",permalink:"/msfs-avionics-mirror/docs/wt21/panel-xml-tag-documentation"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"File Structure",id:"file-structure",level:2},{value:"Tag Scope",id:"tag-scope",level:2},{value:"Global vs. Instrument-Specific Options",id:"global-vs-instrument-specific-options",level:2},{value:"Required vs. Optional Tags",id:"required-vs-optional-tags",level:2},{value:"Redundant Tags",id:"redundant-tags",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"wt21-panelxml-basics"},"WT21 ",(0,i.kt)("inlineCode",{parentName:"h1"},"panel.xml")," Basics"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," file allows developers to configure their aircraft-specific WT21 installation. A basic understanding of the XML language is recommended when working with ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml"),"."),(0,i.kt)("h2",{id:"file-structure"},"File Structure"),(0,i.kt)("p",null,"Below is an example of a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<PlaneHTMLConfig>\n\n  <Instrument>\n    <Name>WT21_PFD_1</Name>\n  </Instrument>\n\n  <Instrument>\n    <Name>WT21_PFD_2</Name>\n  </Instrument>\n\n  <Instrument>\n    \x3c!-- Where there is only one instrument of a specific type, the index may be omitted from the name --\x3e\n    <Name>WT21_MFD</Name>\n  </Instrument>\n\n  <Instrument>\n    <Name>WT21_FMC_1</Name>\n  </Instrument>\n\n  <Instrument>\n    <Name>WT21_FMC_2</Name>\n  </Instrument>\n\n</PlaneHTMLConfig>\n")),(0,i.kt)("p",null,"The file contains the root tag ",(0,i.kt)("inlineCode",{parentName:"p"},"<PlaneHTMLConfig>")," under which all other tags must be placed. There is one ",(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag for each JS/HTML instrument in the plane. The ",(0,i.kt)("inlineCode",{parentName:"p"},"<Name>")," tag identifies the specific instrument referenced by its parent ",(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag. In this example, there are five declared instruments: two PFDs, one MFD, and two FMCs."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"WT21 instrument names are standardized to the following formats:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"PFD: ",(0,i.kt)("inlineCode",{parentName:"li"},"WT21_PFD_[index]"),", where ",(0,i.kt)("inlineCode",{parentName:"li"},"index")," is an integer."),(0,i.kt)("li",{parentName:"ul"},"MFD: ",(0,i.kt)("inlineCode",{parentName:"li"},"WT21_MFD_[index]"),", where ",(0,i.kt)("inlineCode",{parentName:"li"},"index")," is an integer."),(0,i.kt)("li",{parentName:"ul"},"GTC: ",(0,i.kt)("inlineCode",{parentName:"li"},"WT21_FMC_[index]"),", where ",(0,i.kt)("inlineCode",{parentName:"li"},"index")," is an integer."))),(0,i.kt)("h2",{id:"tag-scope"},"Tag Scope"),(0,i.kt)("p",null,"Each tag parsed by the WT21 has a required ",(0,i.kt)("strong",{parentName:"p"},"scope"),", defined as the parent under which it must be placed. If a tag is placed in an incorrect scope, it may not be parsed at all or it may be interpreted as a different type of tag with the same name. Therefore, it is important to ensure that all tags are defined in the correct scope."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/wt21/panel-xml-tag-documentation"},"tags documentation"),' details the scope of each tag. When the scope is listed as "Global", this means the tag should be placed directly under the root ',(0,i.kt)("inlineCode",{parentName:"p"},"<PlaneHTMLConfig>"),' tag. When the scope is listed as "PFD", "MFD", or "FMC", this means the tag should be placed directly under a PFD, MFD, or FMC ',(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag, respectively."),(0,i.kt)("h2",{id:"global-vs-instrument-specific-options"},"Global vs. Instrument-Specific Options"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," options can either be global or specific to a particular instrument. Tags that are descendants of an ",(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag define options specific to the instrument referenced by their parent ",(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag. Tags that are not descendants of any ",(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag define global options."),(0,i.kt)("p",null,"Certain instrument-specific tags can be defined globally by placing them them in the global scope (directly under the root ",(0,i.kt)("inlineCode",{parentName:"p"},"<PlaneHTMLConfig>")," tag) instead of under an ",(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag. When doing so, the option will apply to ",(0,i.kt)("em",{parentName:"p"},"all")," instruments that support the option. If an instrument-specific tag is defined both globally and within a ",(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag, then the version defined within the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag will override the global one."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Not all instrument-specific tags can be defined globally. Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/wt21/panel-xml-tag-documentation"},"tags documentation")," to find which ones can be defined globally and which ones cannot.")),(0,i.kt)("h2",{id:"required-vs-optional-tags"},"Required vs. Optional Tags"),(0,i.kt)("p",null,"Tags and attributes can either be required or optional. Required tags/attributes must be explicitly defined for ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," to be successfully parsed. If a required tag/attribute is missing, the WT21 will throw a Javascript error during initialization with a message describing what was missing. Optional tags/attributes do not have to be explicitly defined, and omitting these will have no adverse effects. When an optional tag/attribute is omitted, the option it defines will revert to a default value."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/wt21/panel-xml-tag-documentation"},"tags documentation")," details which tags and attributes are required and which are optional, as well as the default values for optional tags/attributes."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"If the WT21 detects that an optional attribute or tag was not formatted correctly (e.g. a mis-spelled option, an out-of-bounds numeral, etc), it will emit a console warning and revert the option to its default value. Therefore, during development it is recommended that you monitor the console output of all instruments to ensure that ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," is being parsed cleanly.")),(0,i.kt)("h2",{id:"redundant-tags"},"Redundant Tags"),(0,i.kt)("p",null,"When you define multiple copies of a tag that is meant to be a singleton, only the first instance of the tag (in tree order) will apply. Take the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<Instrument>\n  <Name>WT21_PFD_1</Name>\n\n  <PfdConfig>\n      <ArtificialHorizonStyle>Full</ArtificialHorizonStyle>\n    </PfdConfig>\n\n  <PfdConfig>\n      <ArtificialHorizonStyle>Cropped</ArtificialHorizonStyle>\n    </PfdConfig>\n</Instrument>\n")),(0,i.kt)("p",null,"Of the two ",(0,i.kt)("inlineCode",{parentName:"p"},"<PfdConfig> -> <ArtificialHorizonStyle>")," tags defined for ",(0,i.kt)("inlineCode",{parentName:"p"},"WT21_PFD_1"),", only the top one will apply. As a result, the PFD will use the full artifical horizon rather than a cropped version of the artificial horizon."))}m.isMDXComponent=!0}}]);