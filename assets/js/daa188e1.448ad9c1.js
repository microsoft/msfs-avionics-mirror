"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[71414],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=d(a),k=r,g=m["".concat(p,".").concat(k)]||m[k]||c[k]||i;return a?n.createElement(g,l(l({ref:t},s),{},{components:a})):n.createElement(g,l({ref:t},s))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},28868:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const i={id:"MapFlightPlanWaypointRecordManager",title:"Class: MapFlightPlanWaypointRecordManager",sidebar_label:"MapFlightPlanWaypointRecordManager",sidebar_position:0,custom_edit_url:null},l=void 0,o={unversionedId:"garminsdk/classes/MapFlightPlanWaypointRecordManager",id:"garminsdk/classes/MapFlightPlanWaypointRecordManager",title:"Class: MapFlightPlanWaypointRecordManager",description:"Manages flight plan waypoint records.",source:"@site/docs/garminsdk/classes/MapFlightPlanWaypointRecordManager.md",sourceDirName:"garminsdk/classes",slug:"/garminsdk/classes/MapFlightPlanWaypointRecordManager",permalink:"/msfs-avionics-mirror/docs/garminsdk/classes/MapFlightPlanWaypointRecordManager",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"MapFlightPlanWaypointRecordManager",title:"Class: MapFlightPlanWaypointRecordManager",sidebar_label:"MapFlightPlanWaypointRecordManager",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"MapFlightPlanLayer",permalink:"/msfs-avionics-mirror/docs/garminsdk/classes/MapFlightPlanLayer"},next:{title:"MapFlightPlannerPlanDataProvider",permalink:"/msfs-avionics-mirror/docs/garminsdk/classes/MapFlightPlannerPlanDataProvider"}},p={},d=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"isBusy",id:"isbusy",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"refreshWaypoints",id:"refreshwaypoints",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4}],s={toc:d},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Manages flight plan waypoint records."),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new MapFlightPlanWaypointRecordManager"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"facLoader"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"facWaypointCache"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"waypointRenderer"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"inactiveRenderRole"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"activeRenderRole"),"): ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/garminsdk/classes/MapFlightPlanWaypointRecordManager"},(0,r.kt)("inlineCode",{parentName:"a"},"MapFlightPlanWaypointRecordManager"))),(0,r.kt)("p",null,"Constructor."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"facLoader")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"FacilityLoader")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This manager's facility loader.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"facWaypointCache")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"FacilityWaypointCache")),(0,r.kt)("td",{parentName:"tr",align:"left"},"This manager's facility waypoint cache.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"waypointRenderer")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/garminsdk/classes/MapWaypointRenderer"},(0,r.kt)("inlineCode",{parentName:"a"},"MapWaypointRenderer"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"This manager's waypoint renderer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"inactiveRenderRole")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/garminsdk/enums/MapWaypointRenderRole"},(0,r.kt)("inlineCode",{parentName:"a"},"MapWaypointRenderRole"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The role(s) under which waypoints should be registered when they are part of an inactive leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"activeRenderRole")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/garminsdk/enums/MapWaypointRenderRole"},(0,r.kt)("inlineCode",{parentName:"a"},"MapWaypointRenderRole"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The role(s) under which waypoints should be registered when they are part of an active leg.")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/garminsdk/classes/MapFlightPlanWaypointRecordManager"},(0,r.kt)("inlineCode",{parentName:"a"},"MapFlightPlanWaypointRecordManager"))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,"src/garminsdk/components/map/flightplan/MapFlightPlanWaypointRecordManager.ts:26"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"isbusy"},"isBusy"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"isBusy"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Checks whether this manager is busy with a waypoint refresh."),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Whether this manager is busy with a waypoint refresh."),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,"src/garminsdk/components/map/flightplan/MapFlightPlanWaypointRecordManager.ts:39"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"refreshwaypoints"},"refreshWaypoints"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"refreshWaypoints"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"flightPlan"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"activeLegIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"repick"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"startIndex?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"endIndex?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("p",null,"Refreshes this manager's waypoint records, keeping them up to date with a specified flight plan."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"flightPlan")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"FlightPlan")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A flight plan.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"activeLegIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The global index of the active flight plan leg, or -1 if there is no active leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"repick")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether to repick waypoints.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"startIndex?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The global index of the first flight plan leg from which to pick waypoints, inclusive. Defaults to 0. Ignored if ",(0,r.kt)("inlineCode",{parentName:"td"},"repick")," is false.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"endIndex?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The global index of the last flight plan leg from which to pick waypoints, inclusive. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"flightPlan.length - 1"),". Ignored if ",(0,r.kt)("inlineCode",{parentName:"td"},"repick")," is false.")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"void"),">"),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,"src/garminsdk/components/map/flightplan/MapFlightPlanWaypointRecordManager.ts:54"))}c.isMDXComponent=!0}}]);