"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[86954],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||o;return n?r.createElement(u,i(i({ref:t},p),{},{components:n})):r.createElement(u,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},63587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_label:"Interaction with Components",sidebar_position:6},i="Interaction with Components",l={unversionedId:"fmc/interaction-with-components",id:"fmc/interaction-with-components",title:"Interaction with Components",description:"FMC screen events",source:"@site/docs/fmc/interaction-with-components.md",sourceDirName:"fmc",slug:"/fmc/interaction-with-components",permalink:"/msfs-avionics-mirror/docs/fmc/interaction-with-components",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Interaction with Components",sidebar_position:6},sidebar:"sidebar",previous:{title:"Displaying and Managing Data in Components",permalink:"/msfs-avionics-mirror/docs/fmc/displaying-and-managing-data-in-components"},next:{title:"The Page Lifecycle",permalink:"/msfs-avionics-mirror/docs/fmc/page-lifecycle"}},s={},c=[{value:"FMC screen events",id:"fmc-screen-events",level:2},{value:"Event Propagation Flow",id:"event-propagation-flow",level:2},{value:"Select Key Events",id:"select-key-events",level:2},{value:"Scrolling Events",id:"scrolling-events",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interaction-with-components"},"Interaction with Components"),(0,a.kt)("h2",{id:"fmc-screen-events"},"FMC screen events"),(0,a.kt)("p",null,"FMC Screens manage a number of events, as shown in the ",(0,a.kt)("a",{parentName:"p",href:"#"},"Setting up an FMC Screen")," section. Some specific types of events\nare, by default, propagated down to individual pages and (possibly) components."),(0,a.kt)("h2",{id:"event-propagation-flow"},"Event Propagation Flow"),(0,a.kt)("p",null,"Events are first handled by the FMC Screen itself, then by each FMC page, and ultimately by individual components (if the page containing it decides\nan event is relevant to that component). At every stage of this path, the behaviour can be overridden by implementing a method, generally called ",(0,a.kt)("inlineCode",{parentName:"p"},"onHandle<EventType>"),"."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"It is important to only ever override the class event handlers prefixed with ",(0,a.kt)("inlineCode",{parentName:"p"},"on"),", as those are specifically made to allow customizing behavior.\nOverriding the non-prefixed handler will break the event propagation logic.")),(0,a.kt)("p",null,"It is possible, at any point of this process, to signal that you have handled an event by returning ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". This will indicate to the framework that no\nfurther handlers should be called regarding this event. A string can also be returned to put a value into the scratchpad (if one exists), or an exception thrown to display an error (see ",(0,a.kt)("a",{parentName:"p",href:"#"},"Error Handling"),"); both of those return values also prevent further handlers from being called."),(0,a.kt)("h2",{id:"select-key-events"},"Select Key Events"),(0,a.kt)("p",null,'Select Key Events (LSKs) represent buttons (either physical or emulated on a screen) allowing to "press" on a field, either to perform an action or\nenter a value typed into a scratchpad.'),(0,a.kt)("p",null,"A select key event is represented by the following type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export interface LineSelectKeyEvent {\n  /** The LSK row */\n  row: number;\n\n  /** The LSK column */\n  col: number;\n\n  /** The scratchpad contents at the time of pressing the LSK */\n  scratchpadContents: string;\n\n  /** Whether the CLEAR/DELETE key (if applicable) was activated */\n  isDelete: boolean;\n}\n")),(0,a.kt)("p",null,"Select key events also trigger a ",(0,a.kt)("inlineCode",{parentName:"p"},"TextInputField"),"s modification flow, if they are not interrupted beforehand by any of the handlers\npresent in ",(0,a.kt)("inlineCode",{parentName:"p"},"DisplayField"),". For example, if a ",(0,a.kt)("inlineCode",{parentName:"p"},"TextInputField")," has an options object with an ",(0,a.kt)("inlineCode",{parentName:"p"},"onSelected")," callback which returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),",\nno modification will be performed."),(0,a.kt)("p",null,"An example of the propagation of a select key event, with optionally the handling by a ",(0,a.kt)("inlineCode",{parentName:"p"},"TextInputField"),", is shown below:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Event Flowchart",src:n(30514).Z,width:"3040",height:"1248"})),(0,a.kt)("h2",{id:"scrolling-events"},"Scrolling Events"),(0,a.kt)("p",null,"Scrolling Events are emitted by dedicated buttons which, generally, either change the sub-page being displayed or scroll through a list."),(0,a.kt)("p",null,"Scrolling events are never handled by an individual component in the base framework classes."))}m.isMDXComponent=!0},30514:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/component-events-flowchart-9b1abd87dfb3a12d8265c3e4c6647368.png"}}]);