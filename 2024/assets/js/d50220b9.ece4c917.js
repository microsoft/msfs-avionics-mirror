"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["946886"],{735600:function(e,r,n){n.r(r),n.d(r,{metadata:()=>d,contentTitle:()=>t,default:()=>a,assets:()=>l,toc:()=>o,frontMatter:()=>c});var d=JSON.parse('{"id":"api/framework/classes/ProcedureTurnVectorBuilder","title":"Class: ProcedureTurnVectorBuilder","description":"Builds vectors representing procedure turn paths.","source":"@site/docs/api/framework/classes/ProcedureTurnVectorBuilder.md","sourceDirName":"api/framework/classes","slug":"/api/framework/classes/ProcedureTurnVectorBuilder","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/ProcedureTurnVectorBuilder","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"ProcedureTurnLegCalculator","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/ProcedureTurnLegCalculator"},"next":{"title":"ProxiedPerformancePlanProperty","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/classes/ProxiedPerformancePlanProperty"}}'),s=n("785893"),i=n("250065");let c={},t="Class: ProcedureTurnVectorBuilder",l={},o=[{value:"Constructors",id:"constructors",level:2},{value:"new ProcedureTurnVectorBuilder()",id:"new-procedureturnvectorbuilder",level:3},{value:"Returns",id:"returns",level:4},{value:"Methods",id:"methods",level:2},{value:"build()",id:"build",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Throws",id:"throws",level:4},{value:"Defined in",id:"defined-in",level:4}];function h(e){let r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"class-procedureturnvectorbuilder",children:"Class: ProcedureTurnVectorBuilder"})}),"\n",(0,s.jsx)(r.p,{children:"Builds vectors representing procedure turn paths."}),"\n",(0,s.jsx)(r.h2,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsx)(r.h3,{id:"new-procedureturnvectorbuilder",children:"new ProcedureTurnVectorBuilder()"}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"new ProcedureTurnVectorBuilder"}),"(): ",(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/ProcedureTurnVectorBuilder",children:(0,s.jsx)(r.code,{children:"ProcedureTurnVectorBuilder"})})]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/ProcedureTurnVectorBuilder",children:(0,s.jsx)(r.code,{children:"ProcedureTurnVectorBuilder"})})}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"build",children:"build()"}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"build"}),"(",(0,s.jsx)(r.code,{children:"vectors"}),", ",(0,s.jsx)(r.code,{children:"index"}),", ",(0,s.jsx)(r.code,{children:"start"}),", ",(0,s.jsx)(r.code,{children:"startPath"}),", ",(0,s.jsx)(r.code,{children:"end"}),", ",(0,s.jsx)(r.code,{children:"endPath"}),", ",(0,s.jsx)(r.code,{children:"outboundCourse"}),", ",(0,s.jsx)(r.code,{children:"desiredTurnRadius"}),", ",(0,s.jsx)(r.code,{children:"desiredTurnDirection"}),"?, ",(0,s.jsx)(r.code,{children:"initialCourse"}),"?, ",(0,s.jsx)(r.code,{children:"finalCourse"}),"?, ",(0,s.jsx)(r.code,{children:"flags"}),"?, ",(0,s.jsx)(r.code,{children:"includeTurnToCourseFlag"}),"?, ",(0,s.jsx)(r.code,{children:"heading"}),"?, ",(0,s.jsx)(r.code,{children:"isHeadingTrue"}),"?): ",(0,s.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Builds a sequence of vectors representing a procedure turn from a defined starting point and initial course to a\ndefined end point and final course. A procedure turn begins with a variable-length leg from the start point along\nthe initial course followed by an initial turn to intercept the outbound leg of the procedure turn, then a\nvariable-length outbound leg, a 180-degree turn, a variable-length inbound leg, and finally a turn to intercept\nthe final course at the end point. If a full set of vectors cannot be computed given the restraints imposed by the\npath geometry and the desired turn radius, parts of the turn beginning with the inbound leg of the procedure turn\nmay be altered or omitted entirely."}),"\n",(0,s.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Parameter"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Default value"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"vectors"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/FlightPathVector",children:(0,s.jsx)(r.code,{children:"FlightPathVector"})}),"[]"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"The flight path vector sequence to which to add the vectors."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"index"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"The index in the sequence at which to add the vectors."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"start"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"Readonly"}),"<",(0,s.jsx)(r.code,{children:"Omit"}),"<",(0,s.jsx)(r.code,{children:"Float64Array"}),", ",(0,s.jsx)(r.code,{children:'"set"'})," | ",(0,s.jsx)(r.code,{children:'"sort"'})," | ",(0,s.jsx)(r.code,{children:'"copyWithin"'}),">> | ",(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/LatLonInterface",children:(0,s.jsx)(r.code,{children:"LatLonInterface"})})]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"The start point."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"startPath"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/GeoCircle",children:(0,s.jsx)(r.code,{children:"GeoCircle"})})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"A GeoCircle that defines the initial course. Must be a great circle."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"end"})}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"Readonly"}),"<",(0,s.jsx)(r.code,{children:"Omit"}),"<",(0,s.jsx)(r.code,{children:"Float64Array"}),", ",(0,s.jsx)(r.code,{children:'"set"'})," | ",(0,s.jsx)(r.code,{children:'"sort"'})," | ",(0,s.jsx)(r.code,{children:'"copyWithin"'}),">> | ",(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/LatLonInterface",children:(0,s.jsx)(r.code,{children:"LatLonInterface"})})]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"The end point."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"endPath"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/GeoCircle",children:(0,s.jsx)(r.code,{children:"GeoCircle"})})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"A GeoCircle that defines the final course. Must be a great circle."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"outboundCourse"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"The true course, in degrees, of the outbound leg of the turn."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"desiredTurnRadius"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"The desired turn radius, in meters."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"desiredTurnDirection"}),"?"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/VectorTurnDirection",children:(0,s.jsx)(r.code,{children:"VectorTurnDirection"})})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsx)(r.td,{children:"The desired turn direction."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"initialCourse"}),"?"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsxs)(r.td,{children:["The initial course. If not defined, it will be calculated from ",(0,s.jsx)(r.code,{children:"startPath"})," and ",(0,s.jsx)(r.code,{children:"start"}),"."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"finalCourse"}),"?"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"number"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"undefined"})}),(0,s.jsxs)(r.td,{children:["The final course. If not defined, it will be calculated from ",(0,s.jsx)(r.code,{children:"endPath"})," and ",(0,s.jsx)(r.code,{children:"end"}),"."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"flags"}),"?"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/FlightPathVectorFlags",children:(0,s.jsx)(r.code,{children:"FlightPathVectorFlags"})})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"FlightPathVectorFlags.CourseReversal"})}),(0,s.jsxs)(r.td,{children:["The flags to set on all built vectors. Defaults to the ",(0,s.jsx)(r.code,{children:"CourseReversal"})," flag."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"includeTurnToCourseFlag"}),"?"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"boolean"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"true"})}),(0,s.jsxs)(r.td,{children:["Whether to include the ",(0,s.jsx)(r.code,{children:"TurnToCourse"})," flag on the turn vectors. Defaults to ",(0,s.jsx)(r.code,{children:"true"}),"."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"heading"}),"?"]}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"null"})," | ",(0,s.jsx)(r.code,{children:"number"})]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"null"})}),(0,s.jsxs)(r.td,{children:["The heading-to-fly to assign to all built vectors, in degrees, or ",(0,s.jsx)(r.code,{children:"null"})," if no heading is to be assigned. Defaults to ",(0,s.jsx)(r.code,{children:"null"}),"."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.code,{children:"isHeadingTrue"}),"?"]}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"boolean"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"false"})}),(0,s.jsxs)(r.td,{children:["Whether the heading-to-fly assigned to built vectors is relative to true north instead of magnetic north. Defaults to ",(0,s.jsx)(r.code,{children:"false"}),"."]})]})]})]}),"\n",(0,s.jsx)(r.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.code,{children:"number"})}),"\n",(0,s.jsx)(r.p,{children:"The number of vectors that were built and added to the array."}),"\n",(0,s.jsx)(r.h4,{id:"throws",children:"Throws"}),"\n",(0,s.jsx)(r.p,{children:"Error if either the start or end path is not a great circle."}),"\n",(0,s.jsx)(r.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(r.p,{children:"src/sdk/flightplan/flightpath/vectorbuilders/ProcedureTurnVectorBuilder.ts:52"})]})}function a(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return t},a:function(){return c}});var d=n(667294);let s={},i=d.createContext(s);function c(e){let r=d.useContext(i);return d.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),d.createElement(i.Provider,{value:r},e.children)}}}]);