"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["697447"],{785044:function(e,r,t){t.r(r),t.d(r,{metadata:()=>n,contentTitle:()=>o,default:()=>h,assets:()=>a,toc:()=>l,frontMatter:()=>s});var n=JSON.parse('{"id":"api/framework/type-aliases/APNavDirectorPhaseOptions","title":"Type Alias: APNavDirectorPhaseOptions","description":"APNavDirectorPhaseOptions: object","source":"@site/docs/api/framework/type-aliases/APNavDirectorPhaseOptions.md","sourceDirName":"api/framework/type-aliases","slug":"/api/framework/type-aliases/APNavDirectorPhaseOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorPhaseOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"APNavDirectorOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorOptions"},"next":{"title":"APNavDirectorPhaseSelectorFunc","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorPhaseSelectorFunc"}}'),i=t("785893"),c=t("250065");let s={},o="Type Alias: APNavDirectorPhaseOptions",a={},l=[{value:"Type declaration",id:"type-declaration",level:2},{value:"interceptCourseError?",id:"interceptcourseerror",level:3},{value:"interceptDeflection?",id:"interceptdeflection",level:3},{value:"interceptSwitchDelay?",id:"interceptswitchdelay",level:3},{value:"interceptXtk?",id:"interceptxtk",level:3},{value:"trackingCourseError?",id:"trackingcourseerror",level:3},{value:"trackingDeflection?",id:"trackingdeflection",level:3},{value:"trackingSwitchDelay?",id:"trackingswitchdelay",level:3},{value:"trackingXtk?",id:"trackingxtk",level:3},{value:"Defined in",id:"defined-in",level:2}];function d(e){let r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,c.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"type-alias-apnavdirectorphaseoptions",children:"Type Alias: APNavDirectorPhaseOptions"})}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"APNavDirectorPhaseOptions"}),": ",(0,i.jsx)(r.code,{children:"object"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["Options which which to configure ",(0,i.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/APNavDirector",children:"APNavDirector"}),"'s default phase selection logic."]}),"\n",(0,i.jsxs)(r.p,{children:["The director switches from intercept phase to tracking phase only when ",(0,i.jsx)(r.strong,{children:"all"})," tracking phase conditions are met.\nThe director switches from tracking phase to intercept phase when ",(0,i.jsx)(r.strong,{children:"any"})," of the intercept phase conditions is met."]}),"\n",(0,i.jsx)(r.p,{children:"When the director is activated from an armed state, it will default to intercept phase unless all tracking phase\nconditions are met, in which case it will immediately enter tracking phase. The normal delay for entering tracking\nphase is ignored in this situation."}),"\n",(0,i.jsx)(r.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,i.jsx)(r.h3,{id:"interceptcourseerror",children:"interceptCourseError?"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"optional"})," ",(0,i.jsx)(r.strong,{children:"interceptCourseError"}),": ",(0,i.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The minimum absolute value of the error between the course of the desired track and the airplane's actual ground\ntrack, in degrees, required to enter intercept phase. Defaults to ",(0,i.jsx)(r.code,{children:"5"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"interceptdeflection",children:"interceptDeflection?"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"optional"})," ",(0,i.jsx)(r.strong,{children:"interceptDeflection"}),": ",(0,i.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The minimum absolute value of the lateral deflection of the desired track relative to the plane, normalized from\n",(0,i.jsx)(r.code,{children:"0"})," to ",(0,i.jsx)(r.code,{children:"1"}),", required to enter intercept phase. Defaults to ",(0,i.jsx)(r.code,{children:"0.25"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"interceptswitchdelay",children:"interceptSwitchDelay?"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"optional"})," ",(0,i.jsx)(r.strong,{children:"interceptSwitchDelay"}),": ",(0,i.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The amount of time that the conditions for switching to intercept phase must be met, in milliseconds, before the\ndirector switches from tracking phase to intercept phase. Defaults to ",(0,i.jsx)(r.code,{children:"5000"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"interceptxtk",children:"interceptXtk?"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"optional"})," ",(0,i.jsx)(r.strong,{children:"interceptXtk"}),": ",(0,i.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The minimum absolute value of the cross-track error of the plane from the desired track, in nautical miles,\nrequired to enter intercept phase. Defaults to ",(0,i.jsx)(r.code,{children:"Infinity"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"trackingcourseerror",children:"trackingCourseError?"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"optional"})," ",(0,i.jsx)(r.strong,{children:"trackingCourseError"}),": ",(0,i.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The maximum allowed absolute value of the error between the course of the desired track and the airplane's actual\nground track, in degrees, required to enter intercept phase. Defaults to ",(0,i.jsx)(r.code,{children:"2"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"trackingdeflection",children:"trackingDeflection?"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"optional"})," ",(0,i.jsx)(r.strong,{children:"trackingDeflection"}),": ",(0,i.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The maximum allowed absolute value of the lateral deflection of the desired track relative to the plane,\nnormalized from ",(0,i.jsx)(r.code,{children:"0"})," to ",(0,i.jsx)(r.code,{children:"1"}),", required to enter tracking phase. Defaults to ",(0,i.jsx)(r.code,{children:"0.125"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"trackingswitchdelay",children:"trackingSwitchDelay?"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"optional"})," ",(0,i.jsx)(r.strong,{children:"trackingSwitchDelay"}),": ",(0,i.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The amount of time that the conditions for switching to tracking phase must be met, in milliseconds, before the\ndirector switches from intercept phase to tracking phase. Defaults to ",(0,i.jsx)(r.code,{children:"5000"}),"."]}),"\n",(0,i.jsx)(r.h3,{id:"trackingxtk",children:"trackingXtk?"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.code,{children:"optional"})," ",(0,i.jsx)(r.strong,{children:"trackingXtk"}),": ",(0,i.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The maximum allowed absolute value of the cross-track error of the plane from the desired track, in nautical\nmiles, required to enter intercept phase. Defaults to ",(0,i.jsx)(r.code,{children:"Infinity"}),"."]}),"\n",(0,i.jsx)(r.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,i.jsx)(r.p,{children:"src/sdk/autopilot/directors/APNavDirector.ts:85"})]})}function h(e={}){let{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},250065:function(e,r,t){t.d(r,{Z:function(){return o},a:function(){return s}});var n=t(667294);let i={},c=n.createContext(i);function s(e){let r=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(c.Provider,{value:r},e.children)}}}]);