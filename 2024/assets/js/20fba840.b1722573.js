"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["542292"],{916534:function(e,i,t){t.r(i),t.d(i,{metadata:()=>a,contentTitle:()=>c,default:()=>h,assets:()=>l,toc:()=>o,frontMatter:()=>s});var a=JSON.parse('{"id":"interacting-with-msfs/querying-navdata","title":"Querying Navdata","description":"What Are Facilities?","source":"@site/docs/interacting-with-msfs/querying-navdata.md","sourceDirName":"interacting-with-msfs","slug":"/interacting-with-msfs/querying-navdata","permalink":"/msfs-avionics-mirror/2024/docs/interacting-with-msfs/querying-navdata","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"sidebar","previous":{"title":"Receiving H Events","permalink":"/msfs-avionics-mirror/2024/docs/interacting-with-msfs/receiving-h-events"},"next":{"title":"@microsoft/msfs-sdk v2.1.1","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/globals"}}'),n=t("785893"),r=t("250065");let s={sidebar_position:4},c="Querying Navdata",l={},o=[{value:"What Are Facilities?",id:"what-are-facilities",level:2},{value:"Airport Facilities",id:"airport-facilities",level:3},{value:"Intersection Facilities",id:"intersection-facilities",level:3},{value:"VOR Facilities",id:"vor-facilities",level:3},{value:"NDB Facilities",id:"ndb-facilities",level:3},{value:"Boundary Facilities",id:"boundary-facilities",level:3},{value:"MSFS Facility ICAO Format",id:"msfs-facility-icao-format",level:2},{value:"Type",id:"type",level:3},{value:"Region",id:"region",level:3},{value:"Airport",id:"airport",level:3},{value:"Ident",id:"ident",level:3},{value:"Loading Individual Facilities",id:"loading-individual-facilities",level:2},{value:"Finding An ICAO",id:"finding-an-icao",level:3},{value:"Searching Nearest Facilities",id:"searching-nearest-facilities",level:2},{value:"Performing A Nearest Facility Search",id:"performing-a-nearest-facility-search",level:3}];function d(e){let i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"querying-navdata",children:"Querying Navdata"})}),"\n",(0,n.jsx)(i.h2,{id:"what-are-facilities",children:"What Are Facilities?"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"Facilities"})," are the heart of MSFS navigational data, and encompass all of the different types of navigational data that are available to query. The Javascript facility loading system can access 5 different types of facilities from the simulator: airports, intersections, VORs, NDBs, and airspace boundaries."]}),"\n",(0,n.jsx)(i.h3,{id:"airport-facilities",children:"Airport Facilities"}),"\n",(0,n.jsx)(i.p,{children:"Airport facilities records hold a large amount of data about a given airport:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Metadata about the airport, such as the name, ICAO, location"}),"\n",(0,n.jsx)(i.li,{children:"COM radio frequencies available related to the airport"}),"\n",(0,n.jsx)(i.li,{children:"Runway definitions, including available runway ILS frequencies"}),"\n",(0,n.jsxs)(i.li,{children:["Departure, arrival, and approach procedures including:\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"All procedure legs"}),"\n",(0,n.jsx)(i.li,{children:"Transitions and transition names"}),"\n",(0,n.jsx)(i.li,{children:"Approach details, such as type, associated runways, RNAV information"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"intersection-facilities",children:"Intersection Facilities"}),"\n",(0,n.jsx)(i.p,{children:"Intersection facilities are one of the more basic facility types. They indicate some metadata regarding the intersection, such as ICAO, the type (low, high), what airway they might be on, and a location."}),"\n",(0,n.jsx)(i.h3,{id:"vor-facilities",children:"VOR Facilities"}),"\n",(0,n.jsx)(i.p,{children:"VOR facilities are similar to intersection facilities, except that they indicate some more relevant details about the VOR radio, such as the magnetic variance, tuning frequency, and class (high power, low power, etc). VOR facilities do not include airway information; for VORs that are part of an airway, there is a separate intersection facility record."}),"\n",(0,n.jsx)(i.h3,{id:"ndb-facilities",children:"NDB Facilities"}),"\n",(0,n.jsx)(i.p,{children:"Similar to VOR facilities, these instead give the NDB/ADF tuning frequency."}),"\n",(0,n.jsx)(i.h3,{id:"boundary-facilities",children:"Boundary Facilities"}),"\n",(0,n.jsx)(i.p,{children:"These facility records contain the name, ID, bounding box, type, and vector shape of a given airspace boundary."}),"\n",(0,n.jsx)(i.h2,{id:"msfs-facility-icao-format",children:"MSFS Facility ICAO Format"}),"\n",(0,n.jsx)(i.p,{children:"Most navigational facilities in MSFS are uniquely identified using a 12 character formatted string, called an ICAO. The ICAO format is:"}),"\n",(0,n.jsxs)(i.table,{children:["\n  ",(0,n.jsxs)(i.thead,{children:["\n    ",(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Type"}),"\n    ",(0,n.jsx)(i.th,{colSpan:"2",children:"Region"}),"\n    ",(0,n.jsx)(i.th,{colSpan:"4",children:"Airport"}),"\n    ",(0,n.jsx)(i.th,{colSpan:"5",children:"Ident"}),"\n  "]})]}),"\n  ",(0,n.jsxs)(i.tbody,{children:["\n    ",(0,n.jsxs)(i.tr,{children:["\n      ",(0,n.jsx)(i.td,{children:"A"}),"\n      ",(0,n.jsx)(i.td,{children:"K"}),"\n      ",(0,n.jsx)(i.td,{children:"5"}),"\n      ",(0,n.jsx)(i.td,{children:"K"}),"\n      ",(0,n.jsx)(i.td,{children:"O"}),"\n      ",(0,n.jsx)(i.td,{children:"R"}),"\n      ",(0,n.jsx)(i.td,{children:"D"}),"\n      ",(0,n.jsx)(i.td,{children:"G"}),"\n      ",(0,n.jsx)(i.td,{children:"O"}),"\n      ",(0,n.jsx)(i.td,{children:"O"}),"\n      ",(0,n.jsx)(i.td,{children:"Z"}),"\n      ",(0,n.jsx)(i.td,{children:"Y"}),"\n    "]}),"\n  "]})]}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsx)(i.p,{children:"The ICAO must always be 12 characters. Any omitted fields must be replaced by empty spaces."})}),"\n",(0,n.jsx)(i.h3,{id:"type",children:"Type"}),"\n",(0,n.jsx)(i.p,{children:"The first character of a MSFS ICAO represents the type of facility. The available types are:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"A"})," - Airport"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"W"})," - Intersection"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"V"})," - VOR"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"N"})," - NDB"]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"region",children:"Region"}),"\n",(0,n.jsxs)(i.p,{children:["The second two characters represent the MSFS region code, which correspond to the ",(0,n.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/ICAO_airport_code",children:"ICAO Airport Region Codes"}),", with some large areas being subdivided. For example, the K area for the US is divided into regions K1 through K7 (generally from east to west incrementing), and the Y area for Australia is similarly divided (YB and YM)."]}),"\n",(0,n.jsx)(i.p,{children:"Airport facilities are not required to have a region code, since each airport ident is unique throughout the world."}),"\n",(0,n.jsx)(i.h3,{id:"airport",children:"Airport"}),"\n",(0,n.jsx)(i.p,{children:"Some facilities also include this optional field, which is the owning airport. This is used to disambiguate facilities which might otherwise have the same 12 character ICAO, such as airport RNAV approach fixes that share an ident with an intersection."}),"\n",(0,n.jsx)(i.p,{children:"Airports themselves do not include this field."}),"\n",(0,n.jsx)(i.h3,{id:"ident",children:"Ident"}),"\n",(0,n.jsx)(i.p,{children:"This is the name of the facility, which is almost always what a user or pilot is interacting with. Idents are not unique around the world, while the full 12 digit ICAO will be."}),"\n",(0,n.jsx)(i.h2,{id:"loading-individual-facilities",children:"Loading Individual Facilities"}),"\n",(0,n.jsxs)(i.p,{children:["This avionics framework includes a system by which you can query facility data, called ",(0,n.jsx)(i.code,{children:"FacilityLoader"}),":"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"const eventBus = new EventBus();\r\nconst facilityLoader = new FacilityLoader(FacilityRepository.getRepository(eventBus));\r\n\r\nconst ord = await facilityLoader.getFacility(FacilityType.Airport, 'A      KORD ');\r\nconsole.log(`This airport is called ${ord.name}`);\n"})}),"\n",(0,n.jsx)(i.h3,{id:"finding-an-icao",children:"Finding An ICAO"}),"\n",(0,n.jsx)(i.p,{children:"Sometimes, you may not have the full 12 character ICAO available (such as when a user is inputting a facility ident). In these cases, you can get a collection of ICAOs whose ident starts with the given string:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"const matches = await facilityLoader.searchByIdent(FacilitySearchType.None, 'JOT');\n"})}),"\n",(0,n.jsx)(i.p,{children:"Or if you would like to limit your search to a specific facility type and a maximum of a certain number of facilities:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"const matches = await facilityLoader.searchByIdent(FacilitySearchType.NDB, 'AB', 10);\n"})}),"\n",(0,n.jsx)(i.h2,{id:"searching-nearest-facilities",children:"Searching Nearest Facilities"}),"\n",(0,n.jsx)(i.p,{children:"Sometimes, it is helpful to get a collection of facilities that are within a certain geographic distance. For this, the framework provides nearest facilities search sessions."}),"\n",(0,n.jsx)(i.p,{children:"By starting a search session, you can get a list of the facilities that are within a specfied distance of a lat/lon point. Once started, this search session keeps track, within the sim, of the ICAOs of facilities that have been either added or removed since the last time you searched using the given session."}),"\n",(0,n.jsxs)(i.p,{children:["This means that for the first search performed in a given session, all facilities within range will return in the data as ",(0,n.jsx)(i.strong,{children:"added facilities"}),". If no parameters change (the search radius or the search point), then the next search will return no facilities added or removed: in other words, the facilities that were returned last time are still the valid set of facilities in the search area. If you change the search area parameters, such as by moving the search point or changing the radius, the data returned will include only the diff: everything added to the set of valid facilities in range, and everything removed from the set of valid facilities in range."]}),"\n",(0,n.jsx)(i.p,{children:"This type of search is especially useful for things like map facility icons or pages that show nearest facilities: since only the diffs since the last search are returned, that's all that needs to be processed and the map or list can add or remove the few items in the diff."}),"\n",(0,n.jsx)(i.h3,{id:"performing-a-nearest-facility-search",children:"Performing A Nearest Facility Search"}),"\n",(0,n.jsx)(i.p,{children:"You can perform a nearest facility search by starting a new search session using the facility loader, and then searching using the returned session:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"const session = await facilityLoader.startNearestSearchSession(FacilitySearchType.Airport);\r\n\r\nconst nearestAirports = new Map<string, AirportFacility>();\r\nsetInterval(async () => {\r\n  const lat = SimVar.GetSimVarValue('PLANE LATITUDE', 'degrees');\r\n  const lon = SimVar.GetSimVarValue('PLANE LONGITUDE', 'degrees');\r\n\r\n  const distanceMeters = UnitType.NMILE.convertTo(100, UnitType.METER);\r\n  const diff = await session.searchNearest(lat, lon, distanceMeters, 25);\r\n\r\n  for (let i = 0; i < diff.removed.length; i++) {\r\n    nearestAirports.remove(diff.removed[i]);\r\n  }\r\n\r\n  await Promise.all(diff.added.map(async (icao) => {\r\n    const airport = await facilityLoader.getFacility(FacilityType.Airport, icao);\r\n    nearestAirports.add(icao, airport);\r\n  }));\r\n}, 1000);\n"})}),"\n",(0,n.jsx)(i.p,{children:"This code starts a new session, then searches for all airports within 100NM of the current plane position every second, adding and removing from the collection of currently found airports as necessary."}),"\n",(0,n.jsxs)(i.admonition,{type:"warning",children:[(0,n.jsx)(i.p,{children:"Each search session started during a flight uses memory within the sim to track your session state. This is only cleared after the end of the flight. It is highly recommended to limit the number of search sessions started per instrument and reuse sessions where possible."}),(0,n.jsx)(i.p,{children:"Starting a new session for every individual search performed will cause an unnecessary memory load in the simulator and should be avoided."})]})]})}function h(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},250065:function(e,i,t){t.d(i,{Z:function(){return c},a:function(){return s}});var a=t(667294);let n={},r=a.createContext(n);function s(e){let i=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(r.Provider,{value:i},e.children)}}}]);