import {
  ComponentProps, ConsumerSubject, DisplayComponent, ElectricalEvents, EventBus, FSComponent, MappedSubject, Subject, Subscription, VNode
} from '@microsoft/msfs-sdk';

import { Sr22tElectricalSystemEvents } from '../../../../Sr22tEcu/Sr22tElectricalSystem';

import './ElectricalPanel.css';

/** Props for an Electrical Panel */
export interface ElectricalPanelProps extends ComponentProps {
  /** The event bus */
  bus: EventBus,
}

/** Electrical Panel component */
export class ElectricalPanel extends DisplayComponent<ElectricalPanelProps> {

  private subs: Subscription[] = [];

  private readonly arrowYOffsetMin = 0;    // px, y offset to move arrow to minimum position
  private readonly arrowYOffsetMax = -83;  // px, y offset to move arrow to maximum position

  private alt1Subject = ConsumerSubject.create(this.props.bus.getSubscriber<ElectricalEvents>().on('elec_bus_genalt_a_1').withPrecision(0), 0);   // Amps
  private alt2Subject = ConsumerSubject.create(this.props.bus.getSubscriber<ElectricalEvents>().on('elec_bus_genalt_a_2').withPrecision(0), 0);   // Amps
  private batt1Subject = ConsumerSubject.create(this.props.bus.getSubscriber<Sr22tElectricalSystemEvents>().on('sr22_batt_1_amps').withPrecision(0), 0);    // Amps
  private essBusSubject = ConsumerSubject.create(this.props.bus.getSubscriber<Sr22tElectricalSystemEvents>().on('sr22_ess_bus_volts').withPrecision(1), 0); // Volts
  private m1BusSubject = ConsumerSubject.create(this.props.bus.getSubscriber<ElectricalEvents>().on('elec_bus_main_v_1').withPrecision(1), 0);    // Volts
  private m2BusSubject = ConsumerSubject.create(this.props.bus.getSubscriber<ElectricalEvents>().on('elec_bus_main_v_2').withPrecision(1), 0);    // Volts

  private arrowArray = [
    {
      originOffset: {
        x: 0,
        y: 0,
      },
      numberPosition: {
        x: 735,
        y: 386,
      },
      minVal: 0,
      maxVal: 100,
      sign: true,
      decimals: 0,
      mappedSubject: MappedSubject.create(
        ([amps]): number => {
          return amps;
        },
        this.alt1Subject
      ),
      outputSubject: Subject.create(''),
      arrowRef: FSComponent.createRef<SVGPathElement>(),
    },
    {
      originOffset: {
        x: 0 + 46,
        y: 0,
      },
      numberPosition: {
        x: 735 + 46,
        y: 386,
      },
      minVal: 0,
      maxVal: 100,
      sign: true,
      decimals: 0,
      mappedSubject: MappedSubject.create(
        ([amps]): number => {
          return amps;
        },
        this.alt2Subject
      ),
      outputSubject: Subject.create(''),
      arrowRef: FSComponent.createRef<SVGPathElement>(),
    },
    {
      originOffset: {
        x: 0 + 46 + 50,
        y: 0,
      },
      numberPosition: {
        x: 735 + 46 + 50,
        y: 386,
      },
      minVal: -50,
      maxVal: 50,
      sign: true,
      decimals: 0,
      mappedSubject: this.batt1Subject,
      outputSubject: Subject.create(''),
      arrowRef: FSComponent.createRef<SVGPathElement>(),
    },
    {
      originOffset: {
        x: 0 + 46 + 50 + 65,
        y: 0,
      },
      numberPosition: {
        x: 735 + 46 + 50 + 65 + 1,
        y: 386,
      },
      minVal: 0,
      maxVal: 36,
      sign: false,
      decimals: 1,
      mappedSubject: MappedSubject.create(
        ([volts]): number => {
          return volts;
        },
        this.essBusSubject
      ),
      outputSubject: Subject.create(''),
      arrowRef: FSComponent.createRef<SVGPathElement>(),
    },
    {
      originOffset: {
        x: 0 + 46 + 50 + 65 + 50,
        y: 0,
      },
      numberPosition: {
        x: 735 + 46 + 50 + 65 + 1 + 50,
        y: 386,
      },
      minVal: 0,
      maxVal: 36,
      sign: false,
      decimals: 1,
      mappedSubject: MappedSubject.create(
        ([volts]): number => {
          return volts;
        },
        this.m1BusSubject
      ),
      outputSubject: Subject.create(''),
      arrowRef: FSComponent.createRef<SVGPathElement>(),
    },
    {
      originOffset: {
        x: 0 + 46 + 50 + 65 + 50 + 50,
        y: 0,
      },
      numberPosition: {
        x: 735 + 46 + 50 + 65 + 1 + 50 + 50,
        y: 386,
      },
      minVal: 0,
      maxVal: 36,
      sign: false,
      decimals: 1,
      mappedSubject: MappedSubject.create(
        ([volts]): number => {
          return volts;
        },
        this.m2BusSubject
      ),
      outputSubject: Subject.create(''),
      arrowRef: FSComponent.createRef<SVGPathElement>(),
    },
  ];

  /** @inheritdoc
   */
  public onAfterRender(): void {

    // Add subscriptions to subs array
    this.subs.push(
      this.alt1Subject,
      this.alt2Subject,
      this.batt1Subject,
      this.essBusSubject,
      this.m1BusSubject,
      this.m2BusSubject,
    );

    for (let arrowIndex = 0; arrowIndex < this.arrowArray.length; arrowIndex++) {
      this.arrowArray[arrowIndex].mappedSubject.sub((v) => {
        this.updateArrow(arrowIndex, v);
      }, true);
    }
  }

  /** Maps a number from one range to another
   * @param numberIn self-explanatory
   * @param inMin self-explanatory
   * @param inMax self-explanatory
   * @param outMin self-explanatory
   * @param outMax self-explanatory
   * @returns self-explanatory
   */
  private map(numberIn: number, inMin: number, inMax: number, outMin: number, outMax: number): number {
    return (((numberIn - inMin) / (inMax - inMin)) * (outMax - outMin)) + outMin;
  }

  /** @inheritdoc
   */
  private renderStaticSVG(): VNode {
    return (
      <svg width="1024" height="687" version="1.1" viewBox="0 0 1024 687">
        <g>
          <defs id="defs1">
            <linearGradient id="linearGradient3" x1="58.889" x2="58.889" y1="132.04" y2="94.76" gradientUnits="userSpaceOnUse">
              <stop id="stop154-6" offset=".92293" />
              <stop id="stop155-8" stop-color="#454545" offset="1" />
            </linearGradient>
          </defs>
          <path id="path1" transform="matrix(7.155 0 0 7.155 430.02 -451.32)" d="m37.833 94.76h42.113a1.3229 1.3229 45 011.3229 1.3229v21.501a1.3229 1.3229 135 01-1.3229 1.3229h-42.113a1.3229 1.3229 45 01-1.3229-1.3229v-21.501a1.3229 1.3229 135 011.3229-1.3229z" fill="url(#linearGradient3)" stroke="#9f9f9f" stroke-linecap="square" stroke-width=".26458" />
          <rect id="rect7" x="713.23" y="220.21" width="69.578" height="15.611" />
          <rect id="rect10" x="723.43" y="285.71" width="7.2237" height="85.884" fill="#00be00" />
          <path id="path298" d="m715.93 285.71h16.599v85.884h-16.599" fill="none" stroke="#fff" stroke-width="1.8931" />
          <rect id="rect13" x="769.15" y="285.71" width="7.2237" height="85.884" fill="#00be00" />
          <path id="path13" d="m761.65 285.71h16.599v85.884h-16.599" fill="none" stroke="#fff" stroke-width="1.8931" />
          <rect id="rect14" x="819.56" y="285.71" width="7.2236" height="41.102" fill="#00be00" />
          <rect id="rect17" x="819.56" y="330.49" width="7.2236" height="41.102" fill="#ff0" />
          <path id="path15" d="m812.06 285.71h16.599v85.884h-16.599" fill="none" stroke="#fff" stroke-width="1.8931" />
          <path id="path17" d="m812.06 328.65h16.599" fill="none" stroke="#fff" stroke-width="1.8931" />
          <rect id="rect18" x="884.26" y="295.53" width="7.2236" height="17.413" fill="#00be00" />
          <g fill="none">
            <path id="path20" d="m877.51 295.53h15.849" stroke="#f00" stroke-width="3" />
            <path id="path22" d="m877.51 312.95h15.849" stroke="#f00" stroke-width="3" />
            <path id="path19" d="m876.76 285.71h16.599v85.884h-16.599" stroke="#fff" stroke-width="1.8931" />
          </g>
          <rect id="rect11" x="934.47" y="295.53" width="7.2236" height="17.413" fill="#00be00" />
          <path id="path11" d="m927.72 295.53h15.849" fill="none" stroke="#f00" stroke-width="3" />
          <rect id="rect24" x="934.47" y="312.95" width="7.2236" height="58.644" fill="#ff0" />
          <path id="path23" d="m926.97 285.71h16.599v85.884h-16.599" fill="none" stroke="#fff" stroke-width="1.8931" />
          <rect id="rect25" x="984.32" y="295.53" width="7.2236" height="17.413" fill="#00be00" />
          <path id="path25" d="m977.57 295.53h15.849" fill="none" stroke="#f00" stroke-width="3" />
          <rect id="rect26" x="984.32" y="312.95" width="7.2236" height="58.644" fill="#ff0" />
          <path id="path39" d="m976.82 285.71h16.599v85.884h-16.599" fill="none" stroke="#fff" stroke-width="1.8931" />
          <g fill="#fff" stroke-linecap="square">
            <path id="text96" transform="matrix(1.1799 0 0 1.1799 775.04 -270.72)" d="m-45.337 426.53h-6.3867v-9.694h6.3867v1.1458h-5.0976v2.6562h5.0976v1.1458h-5.0976v3.6002h5.0976zm3.1836 0h-1.224v-10.13h1.224zm8.5091-3.5091h-5.3581q0 .67057.20182 1.1719.20182.49479.55338.8138.33854.3125.80078.46875.46875.15625 1.0286.15625.74219 0 1.4909-.29297.75521-.29947 1.0742-.58593h.0651v1.3346q-.61849.26042-1.263.4362-.64453.17578-1.3542.17578-1.8099 0-2.8255-.97656-1.0156-.98307-1.0156-2.7864 0-1.7838.97005-2.832.97656-1.0482 2.5651-1.0482 1.4714 0 2.2656.85937.80078.85937.80078 2.4414zm-1.1914-.9375q-.0065-.96353-.48828-1.4909-.47526-.52734-1.4518-.52734-.98307 0-1.569.57943-.57943.57942-.65755 1.4388zm8.4245 3.9909q-.61198.29297-1.1654.45573-.54687.16276-1.1654.16276-.78776 0-1.4453-.22787-.65755-.23437-1.1263-.70312-.47526-.46875-.73568-1.1849-.26042-.71615-.26042-1.6732 0-1.7838.97656-2.7995.98307-1.0156 2.5911-1.0156.625 0 1.224.17578.60547.17578 1.1068.42969v1.3607h-.0651q-.55989-.4362-1.1589-.67057-.59245-.23437-1.1589-.23437-1.0417 0-1.6471.70312-.59896.69661-.59896 2.0508 0 1.3151.58594 2.0247.59245.70312 1.6602.70312.37109 0 .75521-.0976.38411-.0977.6901-.25391.26693-.13672.5013-.28646.23438-.15625.37109-.26692h.0651zm5.345.39062q-.34505.0912-.75521.14974-.40364.0586-.72265.0586-1.1133 0-1.6927-.59896t-.57943-1.9206v-3.8672h-.82682v-1.0286h.82682v-2.0898h1.224v2.0898h2.526v1.0286h-2.526v3.3138q0 .57291.02604.89843.02604.31901.18229.59896.14323.26042.39062.38411.25391.11719.76823.11719.29948 0 .625-.0846.32552-.0911.46875-.14974h.0651zm6.0156-5.8724h-.0651q-.27344-.0651-.53385-.0911-.25391-.0326-.60547-.0326-.5664 0-1.0937.2539-.52734.2474-1.0156.64453v5.1628h-1.224v-7.2721h1.224v1.0742q.72916-.58594 1.2825-.82682.55989-.2474 1.1393-.2474.31901 0 .46224.0195.14323.013.42969.0586zm2.4674-2.5521h-1.3802v-1.2695h1.3802zm-.07813 8.4896h-1.224v-7.2721h1.224zm7.7995-.45573q-.61198.29297-1.1654.45573-.54687.16276-1.1654.16276-.78776 0-1.4453-.22787-.65755-.23437-1.1263-.70312-.47526-.46875-.73568-1.1849-.26042-.71615-.26042-1.6732 0-1.7838.97656-2.7995.98307-1.0156 2.5911-1.0156.625 0 1.224.17578.60547.17578 1.1068.42969v1.3607h-.065104q-.55989-.4362-1.1589-.67057-.59245-.23437-1.1589-.23437-1.0417 0-1.6471.70312-.59896.69661-.59896 2.0508 0 1.3151.58594 2.0247.59245.70312 1.6602.70312.37109 0 .75521-.0976.38411-.0977.6901-.25391.26693-.13672.5013-.28646.23437-.15625.37109-.26692h.065104zm7.22.45573h-1.2174v-.77474q-.16276.11068-.44271.3125-.27344.19531-.53385.3125-.30599.14974-.70312.24739-.39713.10417-.93099.10417-.98307 0-1.6667-.65104t-.68359-1.6602q0-.82682.35156-1.3346.35807-.51433 1.0156-.80729.66406-.29297 1.595-.39714.93099-.10416 1.9987-.15625v-.1888q0-.41666-.14974-.6901-.14323-.27344-.41667-.42969-.26042-.14974-.625-.20182-.36458-.0521-.76172-.0521-.48177 0-1.0742.1302-.59245.1237-1.224.36459h-.065104v-1.2435q.35807-.0977 1.0352-.21484.67708-.11719 1.3346-.11719.76823 0 1.3346.13021.57292.1237.98958.42968.41016.29948.625.77474.21484.47526.21484 1.1784zm-1.2174-1.7904v-2.0247q-.55989.0326-1.3216.0977-.75521.0651-1.1979.1888-.52734.14974-.85286.46875-.32552.3125-.32552.86588 0 .625.3776.94401.3776.3125 1.1523.3125.64453 0 1.1784-.24739.53385-.25391.98958-.60547zm4.8112 1.7904h-1.224v-10.13h1.224z" style="white-space:pre" aria-label="Electrical" />
            <path id="text350" transform="matrix(1.2089 0 0 1.2089 935.63 -240.01)" d="m-47.324 422.15h-4.1081v3.3594h4.7721v1.0221h-6.0221v-9.4791h5.957v1.0286h-4.707v3.0469h4.1081zm6.1328 2.513q0-.48828-.37109-.7552-.36458-.27344-1.2825-.46875-.91146-.19531-1.4518-.46875-.53385-.27344-.79427-.65104-.25391-.3776-.25391-.89844 0-.86588.72916-1.4648.73568-.59895 1.875-.59895 1.1979 0 1.9401.61848.7487.61849.7487 1.582h-1.2109q0-.49479-.42318-.85286-.41667-.35807-1.0547-.35807-.65755 0-1.0286.28646-.37109.28645-.37109.74869 0 .4362.34505.65755.34505.22136 1.2435.42318.90494.20182 1.4648.48177.55989.27994.82682.67708.27344.39062.27344.95703 0 .94401-.75521 1.5169-.75521.56641-1.9596.56641-.84635 0-1.4974-.29948t-1.0221-.83333q-.36458-.54037-.36458-1.1654h1.2044q.03255.60547.48177.96354.45573.35157 1.1979.35157.68359 0 1.0937-.27344.41666-.27995.41666-.74219zm6.875 0q0-.48828-.37109-.7552-.36458-.27344-1.2825-.46875-.91146-.19531-1.4518-.46875-.53385-.27344-.79427-.65104-.25391-.3776-.25391-.89844 0-.86588.72916-1.4648.73568-.59895 1.875-.59895 1.1979 0 1.9401.61848.7487.61849.7487 1.582h-1.2109q0-.49479-.42318-.85286-.41667-.35807-1.0547-.35807-.65755 0-1.0286.28646-.37109.28645-.37109.74869 0 .4362.34505.65755.34505.22136 1.2435.42318.90494.20182 1.4648.48177.55989.27994.82682.67708.27344.39062.27344.95703 0 .94401-.75521 1.5169-.75521.56641-1.9596.56641-.84635 0-1.4974-.29948t-1.0221-.83333q-.36458-.54037-.36458-1.1654h1.2044q.03255.60547.48177.96354.45573.35157 1.1979.35157.68359 0 1.0937-.27344.41666-.27995.41666-.74219z" style="white-space:pre" aria-label="Ess" />
            <path id="text352" transform="matrix(1.2089 0 0 1.2089 984.6 -240.01)" d="m-49.967 417.05 3.099 7.7344 3.099-7.7344h1.6211v9.4791h-1.25v-3.6914l.11719-3.9844-3.112 7.6758h-.95703l-3.1055-7.6562.1237 3.9648v3.6914h-1.25v-9.4791zm13.672 9.4791h-1.2109v-8.0273l-2.4284.89193v-1.0938l3.4505-1.2956h.1888z" style="white-space:pre" aria-label="M1" />
            <path id="text353" transform="matrix(1.2089 0 0 1.2089 1034.1 -240.01)" d="m-49.967 417.05 3.099 7.7344 3.099-7.7344h1.6211v9.4791h-1.25v-3.6914l.11719-3.9844-3.112 7.6758h-.95703l-3.1055-7.6562.1237 3.9648v3.6914h-1.25v-9.4791zm15.924 9.4791h-6.2109v-.86589l3.2812-3.6458q.72916-.82682 1.0026-1.3411.27995-.52083.27995-1.0742 0-.74218-.44922-1.2174-.44922-.47526-1.1979-.47526-.89844 0-1.3997.51432-.49479.50781-.49479 1.4193h-1.2044q0-1.3086.83984-2.1159.84635-.80729 2.2591-.80729 1.3216 0 2.0898.69661.76823.6901.76823 1.8424 0 1.3997-1.7838 3.3333l-2.5391 2.7539h4.7591z" style="white-space:pre" aria-label="M2" />
            <path id="text354" transform="matrix(1.5559 0 0 1.5559 955.52 -407.72)" d="m-50.115 426.53v-9.4791h3.099q1.543 0 2.3177.63801.78125.63802.78125 1.888 0 .66406-.3776 1.1784-.3776.50781-1.0286.78776.76823.21484 1.2109.82031.44922.59896.44922 1.4323 0 1.276-.82682 2.0052-.82682.72917-2.3372.72917zm1.25-4.4336v3.4114h2.0638q.87239 0 1.3737-.44922.50781-.45573.50781-1.25 0-1.7122-1.862-1.7122zm0-1.0026h1.888q.82031 0 1.3086-.41015.49479-.41016.49479-1.1133 0-.78125-.45573-1.1328-.45573-.35807-1.3867-.35807h-1.849zm11.211 4.7396q-.70312.82682-2.0638.82682-1.1263 0-1.7187-.65104-.58594-.65755-.59245-1.9401v-4.5833h1.2044v4.5508q0 1.6016 1.3021 1.6016 1.3802 0 1.8359-1.0286v-5.1237h1.2044v7.0443h-1.1458zm7.1028-1.1719q0-.48828-.37109-.7552-.36458-.27344-1.2825-.46875-.91146-.19531-1.4518-.46875-.53385-.27344-.79427-.65104-.2539-.3776-.2539-.89844 0-.86588.72916-1.4648.73568-.59895 1.875-.59895 1.1979 0 1.9401.61848.7487.61849.7487 1.582h-1.2109q0-.49479-.42318-.85286-.41667-.35807-1.0547-.35807-.65755 0-1.0286.28646-.37109.28645-.37109.74869 0 .4362.34505.65755.34505.22136 1.2435.42318.90495.20182 1.4648.48177.5599.27994.82682.67708.27344.39062.27344.95703 0 .94401-.75521 1.5169-.75521.56641-1.9596.56641-.84635 0-1.4974-.29948t-1.0221-.83333q-.36458-.54037-.36458-1.1654h1.2044q.03255.60547.48177.96354.45573.35157 1.1979.35157.68359 0 1.0937-.27344.41667-.27995.41667-.74219zm9.401.20834 2.7083-7.819h1.3672l-3.5156 9.4791h-1.1068l-3.5091-9.4791h1.3607zm4.5377-1.9271q0-1.0352.40364-1.862.41016-.82682 1.1328-1.276.72916-.44921 1.6602-.44921 1.4388 0 2.3242.99609.89192.99609.89192 2.6497v.0846q0 1.0286-.39714 1.849-.39062.8138-1.1263 1.2695-.72916.45573-1.6797.45573-1.4323 0-2.3242-.9961-.88541-.99609-.88541-2.6367zm1.2109.14323q0 1.1719.54036 1.8815.54687.70964 1.4583.70964.91797 0 1.4583-.71615.54036-.72265.54036-2.0182 0-1.1588-.55338-1.875-.54687-.72265-1.4583-.72265-.89192 0-1.4388.70963-.54687.70963-.54687 2.0312zm8.0208 3.444h-1.2044v-10h1.2044zm3.5612-8.75v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828t-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057zm6.8229 6.8815q0-.48828-.37109-.7552-.36458-.27344-1.2825-.46875-.91146-.19531-1.4518-.46875-.53385-.27344-.79427-.65104-.25391-.3776-.25391-.89844 0-.86588.72916-1.4648.73568-.59895 1.875-.59895 1.1979 0 1.9401.61848.7487.61849.7487 1.582h-1.2109q0-.49479-.42318-.85286-.41667-.35807-1.0547-.35807-.65755 0-1.0286.28646-.37109.28645-.37109.74869 0 .4362.34505.65755.34505.22136 1.2435.42318.90495.20182 1.4648.48177.55989.27994.82682.67708.27344.39062.27344.95703 0 .94401-.75521 1.5169-.75521.56641-1.9596.56641-.84635 0-1.4974-.29948t-1.0221-.83333q-.36458-.54037-.36458-1.1654h1.2044q.032552.60547.48177.96354.45573.35157 1.1979.35157.68359 0 1.0937-.27344.41667-.27995.41667-.74219zm6.0286-1.9792q0-1.4714.39062-2.8255.39713-1.3542 1.1784-2.4609.78125-1.1068 1.6211-1.5625l.2474.79427q-.95052.72916-1.5625 2.2266-.60547 1.4974-.66406 3.3528l-.0065.55339q0 2.513.91797 4.362.55338 1.1068 1.3151 1.7318l-.2474.73568q-.86588-.48177-1.6536-1.6146-1.5365-2.2135-1.5365-5.293zm8.0599 2.1875 2.7083-7.819h1.3672l-3.5156 9.4791h-1.1068l-3.5091-9.4791h1.3607zm8.0664-2.1224q0 1.4518-.38411 2.7864-.3776 1.3281-1.1654 2.4544-.78125 1.1263-1.6406 1.6016l-.25391-.73568q1.0026-.76823 1.6081-2.3828.61198-1.6211.625-3.5937v-.20833q0-1.3672-.28646-2.5391-.28646-1.1784-.80078-2.1094-.50781-.93098-1.1458-1.4518l.25391-.73568q.85937.47526 1.6341 1.5885.78125 1.1133 1.1654 2.4544.39062 1.3411.39062 2.8711z" style="white-space:pre" aria-label="Bus Volts (V)" />
            <path id="text355" transform="matrix(1.5559 0 0 1.5559 793.27 -407.72)" d="m-36.932 423.52q-.17578 1.5039-1.1133 2.3242-.93099.8138-2.4805.8138-1.6797 0-2.6953-1.2044-1.0091-1.2044-1.0091-3.2226v-.91145q0-1.3216.46875-2.3242.47526-1.0026 1.3411-1.5364.86588-.54036 2.0052-.54036 1.5104 0 2.4219.84635.91146.83984 1.0612 2.3307h-1.2565q-.16276-1.1328-.70963-1.6406-.54036-.50781-1.5169-.50781-1.1979 0-1.8815.88541-.67708.88542-.67708 2.5195v.91797q0 1.543.64453 2.4544.64453.91145 1.8034.91145 1.0417 0 1.595-.46875.5599-.47526.74219-1.6471zm5.8659 2.3112q-.70312.82682-2.0638.82682-1.1263 0-1.7187-.65104-.58594-.65755-.59245-1.9401v-4.5833h1.2044v4.5508q0 1.6016 1.3021 1.6016 1.3802 0 1.8359-1.0286v-5.1237h1.2044v7.0443h-1.1458zm6.4062-5.2669q-.27344-.0456-.59245-.0456-1.1849 0-1.6081 1.0091v5h-1.2044v-7.0443h1.1719l.01953.8138q.59245-.944 1.6797-.944.35156 0 .53385.0911zm4.5117 0q-.27344-.0456-.59245-.0456-1.1849 0-1.6081 1.0091v5h-1.2044v-7.0443h1.1719l.01953.8138q.59245-.944 1.6797-.944.35156 0 .53385.0911zm3.9062 6.0937q-1.4323 0-2.3307-.9375-.89844-.94401-.89844-2.5195v-.22135q0-1.0482.39713-1.8685.40364-.82682 1.1198-1.289.72265-.46875 1.5625-.46875 1.3737 0 2.1354.90494.76172.90495.76172 2.5911v.5013h-4.7721q.02604 1.0417.60547 1.6862.58594.63802 1.4844.63802.63802 0 1.0807-.26042.44271-.26042.77474-.6901l.73568.57291q-.88542 1.3607-2.6562 1.3607zm-.14974-6.3151q-.72916 0-1.224.53385-.49479.52734-.61198 1.4844h3.5286v-.0911q-.05208-.91797-.49479-1.4193-.44271-.50781-1.1979-.50781zm5.4297-.85938.03906.88542q.80729-1.0156 2.1094-1.0156 2.2331 0 2.2526 2.5195v4.6549h-1.2044v-4.6614q-.00651-.76172-.35156-1.1263-.33854-.36458-1.0612-.36458-.58594 0-1.0286.3125-.44271.3125-.6901.82031v5.0195h-1.2044v-7.0443zm7.8515-1.7057v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828-.41016-.48828-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057zm5.9765 4.9023q0-1.4714.39062-2.8255.39713-1.3542 1.1784-2.4609.78125-1.1068 1.6211-1.5625l.2474.79427q-.95052.72916-1.5625 2.2266-.60547 1.4974-.66406 3.3528l-.00651.55339q0 2.513.91797 4.362.55338 1.1068 1.3151 1.7318l-.2474.73568q-.86588-.48177-1.6536-1.6146-1.5365-2.2135-1.5365-5.293zm10.026 1.3737h-3.9713l-.89192 2.474h-1.2891l3.6198-9.4791h1.0937l3.6263 9.4791h-1.2825zm-3.5937-1.0286h3.2226l-1.6146-4.4336zm9.6484-.27994q0 1.4518-.38411 2.7864-.3776 1.3281-1.1654 2.4544-.78125 1.1263-1.6406 1.6016l-.25391-.73568q1.0026-.76823 1.6081-2.3828.61198-1.6211.625-3.5937v-.20833q0-1.3672-.28646-2.5391-.28646-1.1784-.80078-2.1094-.50781-.93098-1.1458-1.4518l.25391-.73568q.85937.47526 1.6341 1.5885.78125 1.1133 1.1654 2.4544.39062 1.3411.39062 2.8711z" style="white-space:pre" aria-label="Current (A)" />
            <path id="text356" transform="matrix(1.2089 0 0 1.2089 774.38 -240.01)" d="m-50.322 424.06h-3.9713l-.89192 2.474h-1.2891l3.6198-9.4791h1.0937l3.6263 9.4791h-1.2825zm-3.5937-1.0286h3.2226l-1.6146-4.4336zm8.1771 3.5026h-1.2044v-10h1.2044zm3.5612-8.75v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828-.41016-.48828-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057zm9.8567 8.75h-1.2109v-8.0273l-2.4284.89193v-1.0938l3.4505-1.2956h.1888z" style="white-space:pre" aria-label="Alt 1" />
            <path id="text357" transform="matrix(1.2089 0 0 1.2089 820.13 -240.01)" d="m-50.322 424.06h-3.9713l-.89192 2.474h-1.2891l3.6198-9.4791h1.0937l3.6263 9.4791h-1.2825zm-3.5937-1.0286h3.2226l-1.6146-4.4336zm8.1771 3.5026h-1.2044v-10h1.2044zm3.5612-8.75v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828-.41016-.48828-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057zm12.109 8.75h-6.2109v-.86589l3.2812-3.6458q.72916-.82682 1.0026-1.3411.27995-.52083.27995-1.0742 0-.74218-.44922-1.2174-.44922-.47526-1.1979-.47526-.89844 0-1.3997.51432-.49479.50781-.49479 1.4193h-1.2044q0-1.3086.83984-2.1159.84635-.80729 2.2591-.80729 1.3216 0 2.0898.69661.76823.6901.76823 1.8424 0 1.3997-1.7838 3.3333l-2.5391 2.7539h4.7591z" style="white-space:pre" aria-label="Alt 2" />
            <path id="text358" transform="matrix(1.2089 0 0 1.2089 865.63 -240.01)" d="m-56.028 426.53v-9.4791h3.099q1.543 0 2.3177.63801.78125.63802.78125 1.888 0 .66406-.3776 1.1784-.3776.50781-1.0286.78776.76823.21484 1.2109.82031.44922.59896.44922 1.4323 0 1.276-.82682 2.0052-.82682.72917-2.3372.72917zm1.25-4.4336v3.4114h2.0638q.87239 0 1.3737-.44922.50781-.45573.50781-1.25 0-1.7122-1.862-1.7122zm0-1.0026h1.888q.82031 0 1.3086-.41015.49479-.41016.49479-1.1133 0-.78125-.45573-1.1328-.45573-.35807-1.3867-.35807h-1.849zm11.211 5.4362q-.10417-.20833-.16927-.74219-.83984.8724-2.0052.8724-1.0417 0-1.7122-.58594-.66406-.59245-.66406-1.4974 0-1.1003.83333-1.7057.83984-.61197 2.3568-.61197h1.1719v-.55339q0-.63151-.3776-1.0026-.3776-.3776-1.1133-.3776-.64453 0-1.0807.32552-.4362.32552-.4362.78775h-1.2109q0-.52734.37109-1.0156.3776-.49479 1.0156-.78125.64453-.28645 1.4128-.28645 1.2174 0 1.9075.61197.6901.60547.71614 1.6732v3.2422q0 .97005.2474 1.543v.10417zm-1.9987-.91797q.5664 0 1.0742-.29297.50781-.29296.73568-.76171v-1.4453h-.94401q-2.2135 0-2.2135 1.2956 0 .5664.3776.88541.3776.31901.97005.31901zm6.5364-7.832v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828t-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057zm4.3555 0v1.7057h1.3151v.93099h-1.3151v4.3685q0 .42318.17578.63802.17578.20833.59896.20833.20833 0 .57292-.0781v.97656q-.47526.13021-.92448.13021-.80729 0-1.2174-.48828t-.41016-1.3867v-4.3685h-1.2825v-.93099h1.2825v-1.7057zm9.8567 8.75h-1.2109v-8.0273l-2.4284.89193v-1.0938l3.4505-1.2956h.1888z" style="white-space:pre" aria-label="Batt 1" />
            <path id="text362" transform="matrix(1.0293 0 0 1.0293 879.72 -105.86)" d="m-40.13 422.49q0 2.1159-.72266 3.1445-.72265 1.0286-2.2591 1.0286-1.5169 0-2.2461-1.0026-.72916-1.0091-.75521-3.0078v-1.6081q0-2.0898.72265-3.1055.72266-1.0156 2.2656-1.0156 1.5299 0 2.2526.98307.72265.97656.74219 3.0208zm-1.2044-1.6471q0-1.53-.42969-2.2266-.42969-.70312-1.3607-.70312-.92448 0-1.3477.69661t-.4362 2.1419v1.9271q0 1.5365.44271 2.2721.44922.72917 1.3542.72917.89192 0 1.3216-.69011.4362-.6901.45573-2.1745z" style="white-space:pre" aria-label="0" />
          </g>
        </g>
      </svg>
    );
  }

  /** @inheritdoc
   */
  private renderArrows(): VNode[] {

    const arrows: VNode[] = [];

    for (let arrowIndex = 0; arrowIndex < this.arrowArray.length; arrowIndex++) {

      const theArrow = this.arrowArray[arrowIndex];
      const labelClass = 'electrical-panel-label';

      arrows.push(
        <svg width="1024" height="687" version="1.1" viewBox="0 0 1024 687">
          <g>
            <text
              x={theArrow.numberPosition.x}
              y={theArrow.numberPosition.y}
              dominant-baseline="middle"
              text-anchor="end"
              class={labelClass}
            >
              {theArrow.outputSubject}
            </text>
            <path
              ref={theArrow.arrowRef}
              transform={'translate(0 ' + this.arrowYOffsetMax + ')'}
              d="m713.58 370.39v-5.6569l17.678 5.6569-17.678 5.6568v-5.6568"
              fill="#fff"
              stroke="#000"
              stroke-linejoin="round"
              stroke-width="1.0016"
            />
          </g>
        </svg>
      );
    }

    return arrows;
  }

  /** @inheritdoc
   */
  private updateArrow(arrowIndex: number, value: number): void {

    const theArrow = this.arrowArray[arrowIndex];

    let sign = '';
    if (theArrow.sign) {
      if (value >= 0) {
        sign = '+';
      } else {
        sign = '-';
      }
    }

    let arrowYOffset = this.map(value, theArrow.minVal, theArrow.maxVal, this.arrowYOffsetMin, this.arrowYOffsetMax);

    // limit arrow y offset
    if (arrowYOffset < this.arrowYOffsetMax) { arrowYOffset = this.arrowYOffsetMax; }
    if (arrowYOffset > this.arrowYOffsetMin) { arrowYOffset = this.arrowYOffsetMin; }

    theArrow.outputSubject.set(sign + value.toFixed(theArrow.decimals));
    theArrow.arrowRef.instance.setAttribute('transform', 'translate(' + theArrow.originOffset.x.toString() + ' ' + (theArrow.originOffset.y + arrowYOffset).toString() + ')');
  }

  /** @inheritdoc
   */
  public render(): VNode {

    return (
      <div class='electrical-panel'>
        {this.renderStaticSVG()}
        {this.renderArrows()}
      </div >
    );
  }

  /** @inheritdoc */
  public pause(): void {
    this.subs.forEach(sub => sub.pause());
  }

  /** @inheritdoc */
  public resume(): void {
    this.subs.forEach(sub => sub.resume(true));
  }

  /** @inheritdoc */
  public destroy(): void {
    this.subs.forEach(sub => sub.destroy());
  }
}
