"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["986606"],{884938:function(e,r,n){n.r(r),n.d(r,{metadata:()=>i,contentTitle:()=>c,default:()=>h,assets:()=>d,toc:()=>o,frontMatter:()=>a});var i=JSON.parse('{"id":"api/framework/type-aliases/APGSDirectorOptions","title":"Type Alias: APGSDirectorOptions","description":"APGSDirectorOptions: object","source":"@site/docs/api/framework/type-aliases/APGSDirectorOptions.md","sourceDirName":"api/framework/type-aliases","slug":"/api/framework/type-aliases/APGSDirectorOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"APGSDirectorNavData","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorNavData"},"next":{"title":"APGSDirectorVsTargetFunc","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorVsTargetFunc"}}'),t=n("785893"),s=n("250065");let a={},c="Type Alias: APGSDirectorOptions",d={},o=[{value:"Type declaration",id:"type-declaration",level:2},{value:"angleClosureRate?",id:"angleclosurerate",level:3},{value:"canActivate()?",id:"canactivate",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"canArm()?",id:"canarm",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"canRemainActive()?",id:"canremainactive",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"forceNavSource?",id:"forcenavsource",level:3},{value:"maxVs?",id:"maxvs",level:3},{value:"minVs?",id:"minvs",level:3},{value:"vsTarget?",id:"vstarget",level:3},{value:"Defined in",id:"defined-in",level:2}];function l(e){let r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"type-alias-apgsdirectoroptions",children:"Type Alias: APGSDirectorOptions"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"APGSDirectorOptions"}),": ",(0,t.jsx)(r.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["Options for ",(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/APGSDirector",children:"APGSDirector"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,t.jsx)(r.h3,{id:"angleclosurerate",children:"angleClosureRate?"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"optional"})," ",(0,t.jsx)(r.strong,{children:"angleClosureRate"}),": ",(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorAngleClosureRateFunc",children:(0,t.jsx)(r.code,{children:"APGSDirectorAngleClosureRateFunc"})})]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["A function which returns the desired angle closure rate to track a glideslope. The angle closure rate is the rate\nof reduction of glideslope angle error. If not defined, the director will use a default angle closure rate curve.\nThe output of this function will be overridden by the ",(0,t.jsx)(r.code,{children:"vsTarget"})," function if the latter is defined."]}),"\n",(0,t.jsx)(r.h3,{id:"canactivate",children:"canActivate()?"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"optional"})," ",(0,t.jsx)(r.strong,{children:"canActivate"}),": (",(0,t.jsx)(r.code,{children:"apValues"}),", ",(0,t.jsx)(r.code,{children:"navData"}),") => ",(0,t.jsx)(r.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"A function that checks whether the director can be activated from an armed state. If not defined, then default\nlogic will be used."}),"\n",(0,t.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"apValues"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(r.code,{children:"APValues"})})}),(0,t.jsx)(r.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"navData"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"Readonly"}),"<",(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorNavData",children:(0,t.jsx)(r.code,{children:"APGSDirectorNavData"})}),">"]}),(0,t.jsx)(r.td,{children:"The current radio navigation data received by the director."})]})]})]}),"\n",(0,t.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"boolean"})}),"\n",(0,t.jsx)(r.p,{children:"Whether the director can be activated from an armed state."}),"\n",(0,t.jsx)(r.h3,{id:"canarm",children:"canArm()?"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"optional"})," ",(0,t.jsx)(r.strong,{children:"canArm"}),": (",(0,t.jsx)(r.code,{children:"apValues"}),", ",(0,t.jsx)(r.code,{children:"navData"}),") => ",(0,t.jsx)(r.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"A function that checks whether the director can be armed. If not defined, then default logic will be used."}),"\n",(0,t.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"apValues"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(r.code,{children:"APValues"})})}),(0,t.jsx)(r.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"navData"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"Readonly"}),"<",(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorNavData",children:(0,t.jsx)(r.code,{children:"APGSDirectorNavData"})}),">"]}),(0,t.jsx)(r.td,{children:"The current radio navigation data received by the director."})]})]})]}),"\n",(0,t.jsx)(r.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"boolean"})}),"\n",(0,t.jsx)(r.p,{children:"Whether the director can be armed."}),"\n",(0,t.jsx)(r.h3,{id:"canremainactive",children:"canRemainActive()?"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"optional"})," ",(0,t.jsx)(r.strong,{children:"canRemainActive"}),": (",(0,t.jsx)(r.code,{children:"apValues"}),", ",(0,t.jsx)(r.code,{children:"navData"}),", ",(0,t.jsx)(r.code,{children:"activateNavData"}),") => ",(0,t.jsx)(r.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"A function that checks whether the director can remain in the active state. If not defined, then default logic\nwill be used."}),"\n",(0,t.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"apValues"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(r.code,{children:"APValues"})})}),(0,t.jsx)(r.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"navData"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"Readonly"}),"<",(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorNavData",children:(0,t.jsx)(r.code,{children:"APGSDirectorNavData"})}),">"]}),(0,t.jsx)(r.td,{children:"The current radio navigation data received by the director."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"activateNavData"})}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"Readonly"}),"<",(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorActivateNavData",children:(0,t.jsx)(r.code,{children:"APGSDirectorActivateNavData"})}),">"]}),(0,t.jsx)(r.td,{children:"The radio navigation data received by the director at the moment of activation."})]})]})]}),"\n",(0,t.jsx)(r.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.code,{children:"boolean"})}),"\n",(0,t.jsx)(r.p,{children:"Whether the director can remain in the active state."}),"\n",(0,t.jsx)(r.h3,{id:"forcenavsource",children:"forceNavSource?"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"optional"})," ",(0,t.jsx)(r.strong,{children:"forceNavSource"}),": ",(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/NavRadioIndex",children:(0,t.jsx)(r.code,{children:"NavRadioIndex"})})]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"The index of the nav radio to force the director to use. If not defined, the director will use the nav radio\nspecified by the active autopilot navigation source."}),"\n",(0,t.jsx)(r.h3,{id:"maxvs",children:"maxVs?"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"optional"})," ",(0,t.jsx)(r.strong,{children:"maxVs"}),": ",(0,t.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["The maximum vertical speed the director can target, in feet per minute. Defaults to ",(0,t.jsx)(r.code,{children:"0"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"minvs",children:"minVs?"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"optional"})," ",(0,t.jsx)(r.strong,{children:"minVs"}),": ",(0,t.jsx)(r.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["The minimum vertical speed the director can target, in feet per minute. Defaults to ",(0,t.jsx)(r.code,{children:"-3000"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"vstarget",children:"vsTarget?"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"optional"})," ",(0,t.jsx)(r.strong,{children:"vsTarget"}),": ",(0,t.jsx)(r.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APGSDirectorVsTargetFunc",children:(0,t.jsx)(r.code,{children:"APGSDirectorVsTargetFunc"})})]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:["A function which returns the desired vertical speed target to track a glideslope. If defined, the output of this\nfunction will override that of the ",(0,t.jsx)(r.code,{children:"angleClosureRate"})," function."]}),"\n",(0,t.jsx)(r.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(r.p,{children:"src/sdk/autopilot/directors/APGSDirector.ts:110"})]})}function h(e={}){let{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},250065:function(e,r,n){n.d(r,{Z:function(){return c},a:function(){return a}});var i=n(667294);let t={},s=i.createContext(t);function a(e){let r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);