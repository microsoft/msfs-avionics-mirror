"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["603765"],{299602:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>o,default:()=>h,assets:()=>l,toc:()=>d,frontMatter:()=>s});var i=JSON.parse('{"id":"wt21/panel-xml-basics","title":"WT21 panel.xml Basics","description":"Introduction","source":"@site/docs/wt21/panel-xml-basics.md","sourceDirName":"wt21","slug":"/wt21/panel-xml-basics","permalink":"/msfs-avionics-mirror/2024/docs/wt21/panel-xml-basics","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"panel.xml Basics","sidebar_position":2},"sidebar":"sidebar","previous":{"title":"Overview","permalink":"/msfs-avionics-mirror/2024/docs/wt21/overview"},"next":{"title":"panel.xml Tag Documentation","permalink":"/msfs-avionics-mirror/2024/docs/wt21/panel-xml-tag-documentation"}}'),r=t("785893"),a=t("250065");let s={sidebar_label:"panel.xml Basics",sidebar_position:2},o="WT21 panel.xml Basics",l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"File Structure",id:"file-structure",level:2},{value:"Tag Scope",id:"tag-scope",level:2},{value:"Global vs. Instrument-Specific Options",id:"global-vs-instrument-specific-options",level:2},{value:"Required vs. Optional Tags",id:"required-vs-optional-tags",level:2},{value:"Redundant Tags",id:"redundant-tags",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"wt21-panelxml-basics",children:["WT21 ",(0,r.jsx)(n.code,{children:"panel.xml"})," Basics"]})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"panel.xml"})," file allows developers to configure their aircraft-specific WT21 installation. A basic understanding of the XML language is recommended when working with ",(0,r.jsx)(n.code,{children:"panel.xml"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of a simple ",(0,r.jsx)(n.code,{children:"panel.xml"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<PlaneHTMLConfig>\r\n\r\n  <Instrument>\r\n    <Name>WT21_PFD_1</Name>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    <Name>WT21_PFD_2</Name>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    \x3c!-- Where there is only one instrument of a specific type, the index may be omitted from the name --\x3e\r\n    <Name>WT21_MFD</Name>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    <Name>WT21_FMC_1</Name>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    <Name>WT21_FMC_2</Name>\r\n  </Instrument>\r\n\r\n</PlaneHTMLConfig>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The file contains the root tag ",(0,r.jsx)(n.code,{children:"<PlaneHTMLConfig>"})," under which all other tags must be placed. There is one ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag for each JS/HTML instrument in the plane. The ",(0,r.jsx)(n.code,{children:"<Name>"})," tag identifies the specific instrument referenced by its parent ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag. In this example, there are five declared instruments: two PFDs, one MFD, and two FMCs."]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"WT21 instrument names are standardized to the following formats:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["PFD: ",(0,r.jsx)(n.code,{children:"WT21_PFD_[index]"}),", where ",(0,r.jsx)(n.code,{children:"index"})," is an integer."]}),"\n",(0,r.jsxs)(n.li,{children:["MFD: ",(0,r.jsx)(n.code,{children:"WT21_MFD_[index]"}),", where ",(0,r.jsx)(n.code,{children:"index"})," is an integer."]}),"\n",(0,r.jsxs)(n.li,{children:["GTC: ",(0,r.jsx)(n.code,{children:"WT21_FMC_[index]"}),", where ",(0,r.jsx)(n.code,{children:"index"})," is an integer."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"tag-scope",children:"Tag Scope"}),"\n",(0,r.jsxs)(n.p,{children:["Each tag parsed by the WT21 has a required ",(0,r.jsx)(n.strong,{children:"scope"}),", defined as the parent under which it must be placed. If a tag is placed in an incorrect scope, it may not be parsed at all or it may be interpreted as a different type of tag with the same name. Therefore, it is important to ensure that all tags are defined in the correct scope."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/wt21/panel-xml-tag-documentation",children:"tags documentation"}),' details the scope of each tag. When the scope is listed as "Global", this means the tag should be placed directly under the root ',(0,r.jsx)(n.code,{children:"<PlaneHTMLConfig>"}),' tag. When the scope is listed as "PFD", "MFD", or "FMC", this means the tag should be placed directly under a PFD, MFD, or FMC ',(0,r.jsx)(n.code,{children:"<Instrument>"})," tag, respectively."]}),"\n",(0,r.jsx)(n.h2,{id:"global-vs-instrument-specific-options",children:"Global vs. Instrument-Specific Options"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"panel.xml"})," options can either be global or specific to a particular instrument. Tags that are descendants of an ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag define options specific to the instrument referenced by their parent ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag. Tags that are not descendants of any ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag define global options."]}),"\n",(0,r.jsxs)(n.p,{children:["Certain instrument-specific tags can be defined globally by placing them them in the global scope (directly under the root ",(0,r.jsx)(n.code,{children:"<PlaneHTMLConfig>"})," tag) instead of under an ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag. When doing so, the option will apply to ",(0,r.jsx)(n.em,{children:"all"})," instruments that support the option. If an instrument-specific tag is defined both globally and within a ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag, then the version defined within the ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag will override the global one."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["Not all instrument-specific tags can be defined globally. Please refer to the ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/wt21/panel-xml-tag-documentation",children:"tags documentation"})," to find which ones can be defined globally and which ones cannot."]})}),"\n",(0,r.jsx)(n.h2,{id:"required-vs-optional-tags",children:"Required vs. Optional Tags"}),"\n",(0,r.jsxs)(n.p,{children:["Tags and attributes can either be required or optional. Required tags/attributes must be explicitly defined for ",(0,r.jsx)(n.code,{children:"panel.xml"})," to be successfully parsed. If a required tag/attribute is missing, the WT21 will throw a Javascript error during initialization with a message describing what was missing. Optional tags/attributes do not have to be explicitly defined, and omitting these will have no adverse effects. When an optional tag/attribute is omitted, the option it defines will revert to a default value."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/wt21/panel-xml-tag-documentation",children:"tags documentation"})," details which tags and attributes are required and which are optional, as well as the default values for optional tags/attributes."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If the WT21 detects that an optional attribute or tag was not formatted correctly (e.g. a mis-spelled option, an out-of-bounds numeral, etc), it will emit a console warning and revert the option to its default value. Therefore, during development it is recommended that you monitor the console output of all instruments to ensure that ",(0,r.jsx)(n.code,{children:"panel.xml"})," is being parsed cleanly."]})}),"\n",(0,r.jsx)(n.h2,{id:"redundant-tags",children:"Redundant Tags"}),"\n",(0,r.jsx)(n.p,{children:"When you define multiple copies of a tag that is meant to be a singleton, only the first instance of the tag (in tree order) will apply. Take the following example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<Instrument>\r\n  <Name>WT21_PFD_1</Name>\r\n\r\n  <PfdConfig>\r\n	  <ArtificialHorizonStyle>Full</ArtificialHorizonStyle>\r\n	</PfdConfig>\r\n\r\n  <PfdConfig>\r\n	  <ArtificialHorizonStyle>Cropped</ArtificialHorizonStyle>\r\n	</PfdConfig>\r\n</Instrument>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Of the two ",(0,r.jsx)(n.code,{children:"<PfdConfig> -> <ArtificialHorizonStyle>"})," tags defined for ",(0,r.jsx)(n.code,{children:"WT21_PFD_1"}),", only the top one will apply. As a result, the PFD will use the full artifical horizon rather than a cropped version of the artificial horizon."]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return s}});var i=t(667294);let r={},a=i.createContext(r);function s(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);