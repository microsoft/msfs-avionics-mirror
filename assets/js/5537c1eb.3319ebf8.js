"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[74870],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,d=u["".concat(l,".").concat(m)]||u[m]||f[m]||a;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},86266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const a={sidebar_label:"Overview",sidebar_position:1},o="WT21 Overview",s={unversionedId:"wt21/overview",id:"wt21/overview",title:"WT21 Overview",description:"Introduction",source:"@site/docs/wt21/overview.md",sourceDirName:"wt21",slug:"/wt21/overview",permalink:"/msfs-avionics-mirror/docs/wt21/overview",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Overview",sidebar_position:1},sidebar:"sidebar",previous:{title:"WT21FmcPluginBinder",permalink:"/msfs-avionics-mirror/docs/wt21fmc/interfaces/WT21FmcPluginBinder"},next:{title:"panel.xml Basics",permalink:"/msfs-avionics-mirror/docs/wt21/panel-xml-basics"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Customizing and Extending the WT21",id:"customizing-and-extending-the-wt21",level:2}],p={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"wt21-overview"},"WT21 Overview"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The WT21 package provides a feature-complete rendition of an avionics package commonly found in business jets. In real life, these avionics can be found in many different aircraft. Each installation shares a core set of common features, but also often include numerous aircraft-specific options."),(0,i.kt)("p",null,"This avionics package was initially designed to replicate the feature set of the Citation CJ4, therefore aircraft developers may come across features within the avionics set that may not be suited for their aircraft, and will therefore have to adapt the avionics."),(0,i.kt)("h2",{id:"customizing-and-extending-the-wt21"},"Customizing and Extending the WT21"),(0,i.kt)("p",null,"There are two primary avenues to adapting the WT21 to a specific airplane, both of which are ",(0,i.kt)("em",{parentName:"p"},"required")," for the avionics to function as a complete end-product."),(0,i.kt)("p",null,"The first avenue is the ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," configuration file found in the airplane's ",(0,i.kt)("inlineCode",{parentName:"p"},"panel/")," folder. ",(0,i.kt)("inlineCode",{parentName:"p"},"panel.xml")," is already used by the sim's ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseInstrument")," system to define some basic options for JS/HTML instruments. WT21 extends this API to allow developers to configure a plethora of options that span all aspects of the avionics."),(0,i.kt)("p",null,"The second avenue is the ",(0,i.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/plugins/overview"},"Plugin API"),". WT21 allows developers to inject plugins for each of its three main instrument types: PFD, MFD, and FMC. Plugins are used in the WT21 to allow support for plane-specific features that would be too complex and/or cumbersome to be defined in an XML file."),(0,i.kt)("p",null,"For more details, please refer to the following pages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/msfs-avionics-mirror/docs/wt21/panel-xml-basics"},(0,i.kt)("em",{parentName:"a"},"WT21 ",(0,i.kt)("inlineCode",{parentName:"em"},"panel.xml")," Basics"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/msfs-avionics-mirror/docs/wt21/plugin-basics"},(0,i.kt)("em",{parentName:"a"},"WT21 Plugin Basics")))))}f.isMDXComponent=!0}}]);