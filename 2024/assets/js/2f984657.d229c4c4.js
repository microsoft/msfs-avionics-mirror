"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["857051"],{860479:function(e,n,r){r.r(n),r.d(n,{metadata:()=>i,contentTitle:()=>s,default:()=>h,assets:()=>d,toc:()=>l,frontMatter:()=>c});var i=JSON.parse('{"id":"api/framework/type-aliases/APNavDirectorOptions","title":"Type Alias: APNavDirectorOptions","description":"APNavDirectorOptions: object","source":"@site/docs/api/framework/type-aliases/APNavDirectorOptions.md","sourceDirName":"api/framework/type-aliases","slug":"/api/framework/type-aliases/APNavDirectorOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorOptions","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"APNavDirectorNavData","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorNavData"},"next":{"title":"APNavDirectorPhaseOptions","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorPhaseOptions"}}'),t=r("785893"),a=r("250065");let c={},s="Type Alias: APNavDirectorOptions",d={},l=[{value:"Type declaration",id:"type-declaration",level:2},{value:"bankRate?",id:"bankrate",level:3},{value:"bankRateIntercept?",id:"bankrateintercept",level:3},{value:"bankRateTracking?",id:"bankratetracking",level:3},{value:"canActivate()?",id:"canactivate",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"canArm()?",id:"canarm",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"canRemainActive()?",id:"canremainactive",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"desiredBankIntercept()?",id:"desiredbankintercept",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"desiredBankTracking()?",id:"desiredbanktracking",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"disableArming?",id:"disablearming",level:3},{value:"forceNavSource?",id:"forcenavsource",level:3},{value:"lateralInterceptCurve?",id:"lateralinterceptcurve",level:3},{value:"lateralInterceptCurveIntercept?",id:"lateralinterceptcurveintercept",level:3},{value:"lateralInterceptCurveTracking?",id:"lateralinterceptcurvetracking",level:3},{value:"maxBankAngle?",id:"maxbankangle",level:3},{value:"maxBankAngleIntercept?",id:"maxbankangleintercept",level:3},{value:"maxBankAngleTracking?",id:"maxbankangletracking",level:3},{value:"phaseOptions?",id:"phaseoptions",level:3},{value:"phaseSelector?",id:"phaseselector",level:3},{value:"Defined in",id:"defined-in",level:2}];function o(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"type-alias-apnavdirectoroptions",children:"Type Alias: APNavDirectorOptions"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"APNavDirectorOptions"}),": ",(0,t.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Options for ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/APNavDirector",children:"APNavDirector"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,t.jsx)(n.h3,{id:"bankrate",children:"bankRate?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"bankRate"}),": ",(0,t.jsx)(n.code,{children:"number"})," | () => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The bank rate to enforce when the director commands changes in bank angle, in degrees per second, or a function\nwhich returns it. If not defined, a default bank rate will be used. Defaults to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"bankrateintercept",children:"bankRateIntercept?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"bankRateIntercept"}),": ",(0,t.jsx)(n.code,{children:"number"})," | () => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The bank rate to enforce when the director commands changes in bank angle during intercept phase, in degrees per\nsecond, or a function which returns it. If not defined, the bank rate defined by ",(0,t.jsx)(n.code,{children:"bankRate"})," will be used.\nDefaults to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"bankratetracking",children:"bankRateTracking?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"bankRateTracking"}),": ",(0,t.jsx)(n.code,{children:"number"})," | () => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The bank rate to enforce when the director commands changes in bank angle during tracking phase, in degrees per\nsecond, or a function which returns it. If not defined, the bank rate defined by ",(0,t.jsx)(n.code,{children:"bankRate"})," will be used.\nDefaults to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"canactivate",children:"canActivate()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"canActivate"}),": (",(0,t.jsx)(n.code,{children:"mode"}),", ",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"navData"}),") => ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that checks whether the director can be activated from an armed state. If not defined, then default\nlogic will be used."}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mode"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/APLateralModes",children:(0,t.jsx)(n.code,{children:"APLateralModes"})})}),(0,t.jsx)(n.td,{children:"The director's lateral mode."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"navData"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorNavData",children:(0,t.jsx)(n.code,{children:"APNavDirectorNavData"})}),">"]}),(0,t.jsx)(n.td,{children:"The current radio navigation data received by the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.p,{children:"Whether the director can be activated from an armed state."}),"\n",(0,t.jsx)(n.h3,{id:"canarm",children:"canArm()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"canArm"}),": (",(0,t.jsx)(n.code,{children:"mode"}),", ",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"navData"}),") => ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that checks whether the director can be armed. If not defined, then default logic will be used."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mode"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/APLateralModes",children:(0,t.jsx)(n.code,{children:"APLateralModes"})})}),(0,t.jsx)(n.td,{children:"The director's lateral mode."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"navData"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorNavData",children:(0,t.jsx)(n.code,{children:"APNavDirectorNavData"})}),">"]}),(0,t.jsx)(n.td,{children:"The current radio navigation data received by the director."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.p,{children:"Whether the director can be armed."}),"\n",(0,t.jsx)(n.h3,{id:"canremainactive",children:"canRemainActive()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"canRemainActive"}),": (",(0,t.jsx)(n.code,{children:"mode"}),", ",(0,t.jsx)(n.code,{children:"apValues"}),", ",(0,t.jsx)(n.code,{children:"navData"}),", ",(0,t.jsx)(n.code,{children:"isInZoneOfConfusion"}),", ",(0,t.jsx)(n.code,{children:"activateNavData"}),") => ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function that checks whether the director can remain in the active state. If not defined, then default logic\nwill be used."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"mode"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/APLateralModes",children:(0,t.jsx)(n.code,{children:"APLateralModes"})})}),(0,t.jsx)(n.td,{children:"The director's lateral mode."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"apValues"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/APValues",children:(0,t.jsx)(n.code,{children:"APValues"})})}),(0,t.jsx)(n.td,{children:"Autopilot values from the director's parent autopilot."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"navData"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorNavData",children:(0,t.jsx)(n.code,{children:"APNavDirectorNavData"})}),">"]}),(0,t.jsx)(n.td,{children:"The current radio navigation data received by the director."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"isInZoneOfConfusion"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"boolean"})}),(0,t.jsx)(n.td,{children:"Whether the source of the radio navigation data is a VOR and the airplane's position is close enough to the VOR to render lateral deviation values unreliable."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"activateNavData"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorActivateNavData",children:(0,t.jsx)(n.code,{children:"APNavDirectorActivateNavData"})}),">"]}),(0,t.jsx)(n.td,{children:"The radio navigation data received by the director at the moment of activation."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"boolean"})}),"\n",(0,t.jsx)(n.p,{children:"Whether the director can remain in the active state."}),"\n",(0,t.jsx)(n.h3,{id:"desiredbankintercept",children:"desiredBankIntercept()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"desiredBankIntercept"}),": (",(0,t.jsx)(n.code,{children:"trackError"}),") => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A function which computes a desired bank angle to command for a given track error during intercept phase. The\ntrack error is the difference between the director's computed desired track and the airplane's actual ground track\nin the range ",(0,t.jsx)(n.code,{children:"[-180, 180)"})," degrees. A positive error indicates that the shortest turn direction from the actual\nground track toward the desired track is to the right. A positive bank angle indicates leftward bank. Defaults to\na linear function which scales the track error by ",(0,t.jsx)(n.code,{children:"2.5"})," to derive the desired bank angle."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"trackError"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"number"})}),"\n",(0,t.jsx)(n.h3,{id:"desiredbanktracking",children:"desiredBankTracking()?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"desiredBankTracking"}),": (",(0,t.jsx)(n.code,{children:"trackError"}),") => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A function which computes a desired bank angle to command for a given track error during tracking phase. The\ntrack error is the difference between the director's computed desired track and the airplane's actual ground track\nin the range ",(0,t.jsx)(n.code,{children:"[-180, 180)"})," degrees. A positive error indicates that the shortest turn direction from the actual\nground track toward the desired track is to the right. A positive bank angle indicates leftward bank. Defaults to\na linear function which scales the track error by ",(0,t.jsx)(n.code,{children:"1.25"})," to derive the desired bank angle."]}),"\n",(0,t.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Parameter"}),(0,t.jsx)(n.th,{children:"Type"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"trackError"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"number"})})]})})]}),"\n",(0,t.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"number"})}),"\n",(0,t.jsx)(n.h3,{id:"disablearming",children:"disableArming?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"disableArming"}),": ",(0,t.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Whether to disable arming on the director. If ",(0,t.jsx)(n.code,{children:"true"}),", the director will always skip the arming phase and instead\nimmediately activate itself when requested. Defaults to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"forcenavsource",children:"forceNavSource?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"forceNavSource"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/NavRadioIndex",children:(0,t.jsx)(n.code,{children:"NavRadioIndex"})})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Force the director to always use a certain NAV/CDI source"}),"\n",(0,t.jsx)(n.h3,{id:"lateralinterceptcurve",children:"lateralInterceptCurve?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"lateralInterceptCurve"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorInterceptFunc",children:(0,t.jsx)(n.code,{children:"APNavDirectorInterceptFunc"})})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"A function used to translate DTK and XTK into a track intercept angle. If not defined, a function that computes\na default curve tuned for slow GA aircraft will be used."}),"\n",(0,t.jsx)(n.h3,{id:"lateralinterceptcurveintercept",children:"lateralInterceptCurveIntercept?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"lateralInterceptCurveIntercept"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorInterceptFunc",children:(0,t.jsx)(n.code,{children:"APNavDirectorInterceptFunc"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A function used to translate DTK and XTK into a track intercept angle during intercept phase. If not defined, the\nfunction defined by ",(0,t.jsx)(n.code,{children:"lateralInterceptCurve"})," will be used instead. Defaults to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"lateralinterceptcurvetracking",children:"lateralInterceptCurveTracking?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"lateralInterceptCurveTracking"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorInterceptFunc",children:(0,t.jsx)(n.code,{children:"APNavDirectorInterceptFunc"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A function used to translate DTK and XTK into a track intercept angle during tracking phase. If not defined, the\nfunction defined by ",(0,t.jsx)(n.code,{children:"lateralInterceptCurve"})," will be used instead. Defaults to ",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"maxbankangle",children:"maxBankAngle?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"maxBankAngle"}),": ",(0,t.jsx)(n.code,{children:"number"})," | () => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The maximum bank angle, in degrees, supported by the director, or a function which returns it. If not defined,\nthe director will use the maximum bank angle defined by its parent autopilot (via ",(0,t.jsx)(n.code,{children:"apValues"}),"). Defaults to\n",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"maxbankangleintercept",children:"maxBankAngleIntercept?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"maxBankAngleIntercept"}),": ",(0,t.jsx)(n.code,{children:"number"})," | () => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The maximum bank angle, in degrees, supported by the director during intercept phase, or a function which returns\nit. If not defined, the director will use the maximum bank angle defined by ",(0,t.jsx)(n.code,{children:"maxBankAngle"}),". Defaults to\n",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"maxbankangletracking",children:"maxBankAngleTracking?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"maxBankAngleTracking"}),": ",(0,t.jsx)(n.code,{children:"number"})," | () => ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The maximum bank angle, in degrees, supported by the director during tracking phase, or a function which returns\nit. If not defined, the director will use the maximum bank angle defined by ",(0,t.jsx)(n.code,{children:"maxBankAngle"}),". Defaults to\n",(0,t.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"phaseoptions",children:"phaseOptions?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"phaseOptions"}),": ",(0,t.jsx)(n.code,{children:"Readonly"}),"<",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorPhaseOptions",children:(0,t.jsx)(n.code,{children:"APNavDirectorPhaseOptions"})}),">"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Options with which to configure the default phase selector logic. Ignored if the ",(0,t.jsx)(n.code,{children:"phaseSelector"})," option is\nspecified."]}),"\n",(0,t.jsx)(n.h3,{id:"phaseselector",children:"phaseSelector?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"phaseSelector"}),": ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/APNavDirectorPhaseSelectorFunc",children:(0,t.jsx)(n.code,{children:"APNavDirectorPhaseSelectorFunc"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A function which selects the phase for the director to use when it is active and tracking a navigation signal.\nIf not defined, the director will use a default selector which can be configured using the ",(0,t.jsx)(n.code,{children:"phaseOptions"})," option."]}),"\n",(0,t.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(n.p,{children:"src/sdk/autopilot/directors/APNavDirector.ts:177"})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return c}});var i=r(667294);let t={},a=i.createContext(t);function c(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);