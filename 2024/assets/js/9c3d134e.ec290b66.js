"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["702948"],{648859:function(e,n,r){r.r(n),r.d(n,{metadata:()=>t,contentTitle:()=>a,default:()=>o,assets:()=>c,toc:()=>l,frontMatter:()=>s});var t=JSON.parse('{"id":"api/garminsdk/interfaces/MapFlightPathPlanRenderer","title":"Interface: MapFlightPathPlanRenderer","description":"Renders the path for flight plans to canvas.","source":"@site/docs/api/garminsdk/interfaces/MapFlightPathPlanRenderer.md","sourceDirName":"api/garminsdk/interfaces","slug":"/api/garminsdk/interfaces/MapFlightPathPlanRenderer","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/MapFlightPathPlanRenderer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"MapDetailIndicatorProps","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/MapDetailIndicatorProps"},"next":{"title":"MapFlightPathProcRenderer","permalink":"/msfs-avionics-mirror/2024/docs/api/garminsdk/interfaces/MapFlightPathProcRenderer"}}'),d=r("785893"),i=r("250065");let s={},a="Interface: MapFlightPathPlanRenderer",c={},l=[{value:"Methods",id:"methods",level:2},{value:"render()",id:"render",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4}];function h(e){let n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"interface-mapflightpathplanrenderer",children:"Interface: MapFlightPathPlanRenderer"})}),"\n",(0,d.jsx)(n.p,{children:"Renders the path for flight plans to canvas."}),"\n",(0,d.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,d.jsx)(n.h3,{id:"render",children:"render()"}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"render"}),"(",(0,d.jsx)(n.code,{children:"plan"}),", ",(0,d.jsx)(n.code,{children:"context"}),", ",(0,d.jsx)(n.code,{children:"streamStack"}),", ",(0,d.jsx)(n.code,{children:"renderEntirePlan"}),", ",(0,d.jsx)(n.code,{children:"activeLegIndex"}),", ",(0,d.jsx)(n.code,{children:"lnavData"}),"?, ",(0,d.jsx)(n.code,{children:"obsCourse"}),"?): ",(0,d.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Renders a flight plan to a canvas."}),"\n",(0,d.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Parameter"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"plan"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"FlightPlan"})}),(0,d.jsx)(n.td,{children:"The flight plan to render."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"context"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"CanvasRenderingContext2D"})}),(0,d.jsx)(n.td,{children:"The canvas 2D rendering context to which to render."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"streamStack"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"GeoProjectionPathStreamStack"})}),(0,d.jsx)(n.td,{children:"The path stream stack to which to render."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"renderEntirePlan"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"boolean"})}),(0,d.jsx)(n.td,{children:"Whether to render the entire plan. If false, only the active leg and legs after the active leg will be rendered."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"activeLegIndex"})}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The global index of the active flight plan leg, or -1 if there is no active leg."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"lnavData"}),"?"]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"LNavTrackingState"})}),(0,d.jsx)(n.td,{children:"LNAV tracking data for the flight plan to render, or undefined if LNAV is not tracking the flight plan."})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"obsCourse"}),"?"]}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"The active OBS course, or undefined if OBS is not active."})]})]})]}),"\n",(0,d.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.code,{children:"void"})}),"\n",(0,d.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,d.jsx)(n.p,{children:"src/garminsdk/components/map/flightplan/MapFlightPathPlanRenderer.ts:19"})]})}function o(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(h,{...e})}):h(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return a},a:function(){return s}});var t=r(667294);let d={},i=t.createContext(d);function s(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);