"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["130431"],{961981:function(e,n,t){t.r(n),t.d(n,{metadata:()=>s,contentTitle:()=>a,default:()=>h,assets:()=>c,toc:()=>l,frontMatter:()=>o});var s=JSON.parse('{"id":"getting-started/using-the-event-bus","title":"Using the Event Bus","description":"What is the Event Bus?","source":"@site/docs/getting-started/using-the-event-bus.md","sourceDirName":"getting-started","slug":"/getting-started/using-the-event-bus","permalink":"/msfs-avionics-mirror/2024/docs/getting-started/using-the-event-bus","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"sidebar","previous":{"title":"Dealing With Dynamic Data","permalink":"/msfs-avionics-mirror/2024/docs/getting-started/dealing-with-dynamic-data"},"next":{"title":"Refs and the Component Lifecycle","permalink":"/msfs-avionics-mirror/2024/docs/getting-started/refs-and-component-lifecycle"}}'),i=t("785893"),r=t("250065");let o={sidebar_position:6},a="Using the Event Bus",c={},l=[{value:"What is the Event Bus?",id:"what-is-the-event-bus",level:2},{value:"EventBus Subscriber Filters",id:"eventbus-subscriber-filters",level:2},{value:"whenChanged()",id:"whenchanged",level:3},{value:"whenChangedBy()",id:"whenchangedby",level:3},{value:"onlyAfter()",id:"onlyafter",level:3},{value:"atFrequency()",id:"atfrequency",level:3},{value:"withPrecision()",id:"withprecision",level:3},{value:"Publishing SimVar Data Via the Event Bus",id:"publishing-simvar-data-via-the-event-bus",level:2},{value:"Wiring the EventBus Consumer to the Component",id:"wiring-the-eventbus-consumer-to-the-component",level:3},{value:"Setting Up the Event Bus in the Instrument",id:"setting-up-the-event-bus-in-the-instrument",level:3},{value:"Sometimes Too Much Precision is Too Much",id:"sometimes-too-much-precision-is-too-much",level:3}];function d(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"using-the-event-bus",children:"Using the Event Bus"})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-the-event-bus",children:"What is the Event Bus?"}),"\n",(0,i.jsxs)(n.p,{children:["Subscribable values are an excellent way to get data from parent components down to child components, but what about data that may be more instrument-wide or cut across components in your instrument? For that, there's ",(0,i.jsx)(n.code,{children:"EventBus"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"EventBus"})," allows you to define typesafe publishers and consumers that broadcast events with corresponding data on given topics. Each topic is a string key that consumers can subscribe to, and will have their subscribed callbacks called when a publisher publishes data on the topic key. Simply define an interface, and the fields of that interface become the keys, and the value types the data types."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface HelloWorldEvents {\r\n  new_text: string;\r\n}\r\n\r\nconst bus = new EventBus();\r\nconst publisher = bus.getPublisher<HelloWorldEvents>();\r\nconst subscriber = bus.getSubscriber<HelloWorldEvents>();\r\n\r\nsubscriber.on('new_text').handle(text => console.log(text));\r\npublisher.pub('new_text', 'Hello, EventBus!'); //Logs 'Hello, EventBus!'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"eventbus-subscriber-filters",children:"EventBus Subscriber Filters"}),"\n",(0,i.jsx)(n.p,{children:"The avionics framework helpfully provides a number of built-in filtering options to help reduce the frequency of subscriptions being called on topic data updates."}),"\n",(0,i.jsx)(n.h3,{id:"whenchanged",children:"whenChanged()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"//Only call the consumer when the value is different than prior, not on every topic publish\r\nsubscriber.on('distance_to_go')\r\n  .whenChanged()\r\n  .handle(distance => console.log(`Distance to go: ${distance} NM`));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"whenchangedby",children:"whenChangedBy()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"//Only call the consumer when the value is different than prior by at least the specified amount\r\nsubscriber.on('distance_to_go')\r\n  .whenChangedBy(0.1)\r\n  .handle(distance => console.log(`Distance to go: ${distance} NM`));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"onlyafter",children:"onlyAfter()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"//Supress consuming events until a minimum time in milliseconds has elapsed since the previous event\r\nsubscriber.on('distance_to_go')\r\n  .onlyAfter(1000)\r\n  .handle(distance => console.log(`Distance to go: ${distance} NM`));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"atfrequency",children:"atFrequency()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"//Only consume events at a specified frequency in Hz\r\nsubscriber.on('distance_to_go')\r\n  .atFrequency(4)\r\n  .handle(distance => console.log(`Distance to go: ${distance} NM`));\n"})}),"\n",(0,i.jsx)(n.h3,{id:"withprecision",children:"withPrecision()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"//Only consume events when the numeric value rounded to the number of provided decimal places\r\n//has changed since the previous rounded value. Accepts negative values for 10, 100s, etc.\r\nsubscriber.on('distance_to_go')\r\n  .withPrecision(1)\r\n  .handle(distance => console.log(`Distance to go: ${distance} NM`));\n"})}),"\n",(0,i.jsx)(n.h2,{id:"publishing-simvar-data-via-the-event-bus",children:"Publishing SimVar Data Via the Event Bus"}),"\n",(0,i.jsxs)(n.p,{children:["Publishing SimVar data across ",(0,i.jsx)(n.code,{children:"EventBus"})," is an ideal application, as getting SimVar data requires a call into the Coherent GT framework and a serialization round trip from the sim, which is a (relatively) slow operation. Instead of peppering code with a number of local SimVar calls, we can use ",(0,i.jsx)(n.code,{children:"EventBus"})," to get a SimVar just once and then push that data to all consumers who are subscribed, keeping performance at a maximum."]}),"\n",(0,i.jsx)(n.h3,{id:"wiring-the-eventbus-consumer-to-the-component",children:"Wiring the EventBus Consumer to the Component"}),"\n",(0,i.jsxs)(n.p,{children:["Let's make a few modifications to our ",(0,i.jsx)(n.code,{children:"MyComponent"})," component. First, let's change the props interface and also add an interface for our events:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface MyComponentProps extends ComponentProps {\r\n  bus: EventBus;\r\n}\r\n\r\nexport interface SpeedEvents {\r\n  indicated_airspeed: number;\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then, we can use some tools at our disposal to subscribe to the bus and create a subscribable value from the consumer. First, add a private field to the class:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"private readonly indicatedAirspeed: Subscribable<number>;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then, we can create a constructor to subscribe to the bus and pipe to a subscribable value:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"constructor(props: MyComponentProps) {\r\n  super(props);\r\n\r\n  const subscriber = props.bus.getSubscriber<SpeedEvents>();\r\n  const consumer = subscriber.on('indicated_airspeed');\r\n\r\n  this.indicatedAirspeed = ConsumerSubject.create(consumer, 0);\r\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["Just as in React, constructors must call ",(0,i.jsx)(n.code,{children:"super(props)"}),", and should do so as the first line in the constructor."]})}),"\n",(0,i.jsx)(n.p,{children:"Finally, we can reference our new subscribable value in our render method:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"public render(): VNode {\r\n  return (\r\n    <div class='my-component'>{this.indicatedAirspeed} IAS</div>\r\n  );\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-the-event-bus-in-the-instrument",children:"Setting Up the Event Bus in the Instrument"}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"MyInstrument"}),", we now need to create an instance of ",(0,i.jsx)(n.code,{children:"EventBus"})," so we can pass it as a prop to ",(0,i.jsx)(n.code,{children:"MyComponent"}),". Create the following field in the class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"private readonly eventBus = new EventBus();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then we can pass it as a prop to our component:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"public connectedCallback(): void {\r\n  super.connectedCallback();\r\n\r\n  FSComponent.render(<MyComponent bus={this.eventBus} />, document.getElementById('InstrumentContent'));\r\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["You should generally only instantiate a ",(0,i.jsx)(n.strong,{children:"single instance"})," of ",(0,i.jsx)(n.code,{children:"EventBus"})," within your instrument, and pass it to components as necessary. Different instances of the event bus will not automatically share topic publications, and any topics published to on one bus will not be published to on another."]})}),"\n",(0,i.jsxs)(n.p,{children:["In order to publish this SimVar data to the bus, we are going to want to get that data each simulation frame. Thankfully, the VCockpit system gives us a hook to do just that. Simply make a method on your instrument called ",(0,i.jsx)(n.code,{children:"Update()"}),", and give it the following code to read our indicated airspeed and publish it on the bus:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"public Update(): void {\r\n  const indicatedAirspeed = SimVar.GetSimVarValue('AIRSPEED INDICATED', 'knots');\r\n  this.eventBus.getPublisher<SpeedEvents>().pub('indicated_airspeed', indicatedAirspeed);\r\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"SimVar"})," is another item that comes from the underlying MSFS SDK.  You will need to pull in a reference from ",(0,i.jsx)(n.code,{children:"msfs-types"})," for the compiler to know where to find it.  Add the following line to the top of your file to accomplish this:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'/// <reference types="@microsoft/msfs-types/JS/SimVar" />\n'})})]}),"\n",(0,i.jsx)(n.p,{children:'After you rebuild/resync, you will note that now your "Hello World" text has been replaced by an indicated airspeed value that updates every frame.'}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Manually writing code to publish data from multiple SimVars to the bus can get tedious. ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/interacting-with-msfs/simvars#bridging-simvars-to-the-event-bus",children:"This section"})," of the documentation will walk you through how to leverage framework-provided classes to abstract away much of the boilerplate."]})}),"\n",(0,i.jsx)(n.h3,{id:"sometimes-too-much-precision-is-too-much",children:"Sometimes Too Much Precision is Too Much"}),"\n",(0,i.jsx)(n.p,{children:"After reloading, you may notice that the precision of your airspeed value is quite high. In fact, probably too high to be of any use in a display. Additionally, each time this value is re-rendered, it alters the DOM slightly and causes a repaint of the affected area, which is something we would like to avoid."}),"\n",(0,i.jsxs)(n.p,{children:["However, this can easily be addressed by simply adding a filter to the bus event consumer in ",(0,i.jsx)(n.code,{children:"MyComponent"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const consumer = subscriber.on('indicated_airspeed').withPrecision(0);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now you will find that your airspeed values will be nice, round, whole numbers, and will only re-render and repaint when that whole number value changes."})]})}function h(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return o}});var s=t(667294);let i={},r=s.createContext(i);function o(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);