"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[53400],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),l=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(r),f=n,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return r?o.createElement(m,a(a({ref:t},u),{},{components:r})):o.createElement(m,a({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:n,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4006:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=r(87462),n=(r(67294),r(3905));const i={id:"index.XMLHostedLogicGauge",title:"Interface: XMLHostedLogicGauge",sidebar_label:"XMLHostedLogicGauge",custom_edit_url:null},a=void 0,s={unversionedId:"framework/interfaces/index.XMLHostedLogicGauge",id:"framework/interfaces/index.XMLHostedLogicGauge",title:"Interface: XMLHostedLogicGauge",description:"index.XMLHostedLogicGauge",source:"@site/docs/framework/interfaces/index.XMLHostedLogicGauge.md",sourceDirName:"framework/interfaces",slug:"/framework/interfaces/index.XMLHostedLogicGauge",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/index.XMLHostedLogicGauge",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"index.XMLHostedLogicGauge",title:"Interface: XMLHostedLogicGauge",sidebar_label:"XMLHostedLogicGauge",custom_edit_url:null},sidebar:"sidebar",previous:{title:"XMLHorizontalGaugeStyle",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/index.XMLHorizontalGaugeStyle"},next:{title:"XMLTextColumnProps",permalink:"/msfs-avionics-mirror/docs/framework/interfaces/index.XMLTextColumnProps"}},c={},l=[{value:"Properties",id:"properties",level:2},{value:"logicHost",id:"logichost",level:3},{value:"Defined in",id:"defined-in",level:4}],u={toc:l},d="wrapper";function p(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules/"},"index"),".XMLHostedLogicGauge"),(0,n.kt)("p",null,"I don't want to make the logic host a defined part of the base gauge\ninterface, because I feel like that breaks abstraction boundaries and\nties this code too much to our specific implementation.   But I don't()\nwant people to have to subclass their own type of every gauge type in\norder to pass the logic host in as a prop, so I'll make an additonal\ninterface for that which can be mixed in by people who want to use it."),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("h3",{id:"logichost"},"logicHost"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"logicHost"),": ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.CompositeLogicXMLHost"},(0,n.kt)("inlineCode",{parentName:"a"},"CompositeLogicXMLHost"))),(0,n.kt)("p",null,"The logic host."),(0,n.kt)("h4",{id:"defined-in"},"Defined in"),(0,n.kt)("p",null,"src/sdk/components/XMLGauges/GaugeDefinitions/BaseGauge.ts:59"))}p.isMDXComponent=!0}}]);