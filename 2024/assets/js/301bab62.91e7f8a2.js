"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["759626"],{791968:function(e,n,t){t.r(n),t.d(n,{metadata:()=>a,contentTitle:()=>l,default:()=>c,assets:()=>o,toc:()=>d,frontMatter:()=>r});var a=JSON.parse('{"id":"avionics/g3000/features/weight-balance","title":"G3000 Weight and Balance","description":"Introduction","source":"@site/docs/avionics/g3000/features/weight-balance.md","sourceDirName":"avionics/g3000/features","slug":"/avionics/g3000/features/weight-balance","permalink":"/msfs-avionics-mirror/2024/docs/avionics/g3000/features/weight-balance","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_label":"Weight and Balance","sidebar_position":7,"toc_max_heading_level":3},"sidebar":"sidebar","previous":{"title":"Weight and Fuel","permalink":"/msfs-avionics-mirror/2024/docs/avionics/g3000/features/weight-fuel"},"next":{"title":"Electronic Checklists","permalink":"/msfs-avionics-mirror/2024/docs/avionics/g3000/features/electronic-checklists"}}'),i=t("785893"),s=t("250065");let r={sidebar_label:"Weight and Balance",sidebar_position:7,toc_max_heading_level:3},l="G3000 Weight and Balance",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Configuring Weight and Balance",id:"configuring-weight-and-balance",level:2},{value:"Units",id:"units",level:4},{value:"Moment arm labels",id:"moment-arm-labels",level:4},{value:"%MAC support",id:"mac-support",level:4},{value:"Empty weight and moment arm",id:"empty-weight-and-moment-arm",level:4},{value:"Example",id:"example",level:3},{value:"Load Stations",id:"load-stations",level:2},{value:"Basic properties",id:"basic-properties",level:4},{value:"Weight limits",id:"weight-limits",level:4},{value:"Moment-arm limits",id:"moment-arm-limits",level:4},{value:"Default parameters",id:"default-parameters",level:4},{value:"User-editability",id:"user-editability",level:4},{value:"Example",id:"example-1",level:3},{value:"Fuel Station",id:"fuel-station",level:2},{value:"Example",id:"example-2",level:3},{value:"Envelopes",id:"envelopes",level:2},{value:"Envelope parameters",id:"envelope-parameters",level:4},{value:"Envelope shape",id:"envelope-shape",level:4},{value:"Graph options",id:"graph-options",level:4},{value:"Example",id:"example-3",level:3},{value:"Customizing the Weight and Balance Pane",id:"customizing-the-weight-and-balance-pane",level:2},{value:"Rendering the Aircraft Loading Panel",id:"rendering-the-aircraft-loading-panel",level:3}];function h(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"g3000-weight-and-balance",children:"G3000 Weight and Balance"})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["The G3000 supports an optional ",(0,i.jsx)(n.strong,{children:"weight and balance"})," feature which extends the base ",(0,i.jsx)(n.strong,{children:"weight and fuel"})," feature with additional capabilities, such as the ability to define and load individual weight stations and carry out center-of-gravity (CG) calculations."]}),"\n",(0,i.jsxs)(n.p,{children:["By default, the weight and balance feature is disabled. The following sections describe how to enable and configure the feature. Because weight and balance extends the weight and fuel feature, the latter must still be configured even if weight and balance is enabled. Please refer to ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/features/weight-fuel",children:"this page"})," for more information about the weight and fuel feature."]}),"\n",(0,i.jsx)(n.h2,{id:"configuring-weight-and-balance",children:"Configuring Weight and Balance"}),"\n",(0,i.jsxs)(n.p,{children:["The weight and balance feature is enabled in ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-basics",children:(0,i.jsx)(n.code,{children:"panel.xml"})})," by including the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#weightbalance",children:(0,i.jsx)(n.code,{children:"<WeightBalance>"})})," tag. Several global options are defined using attributes on this tag:"]}),"\n",(0,i.jsx)(n.h4,{id:"units",children:"Units"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"weight-unit"})," and ",(0,i.jsx)(n.code,{children:"arm-unit"})," attributes define the units with which all weight and moment-arm values in the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag and its descendants are parsed. The supported weight units are pounds (",(0,i.jsx)(n.code,{children:"lb"}),", ",(0,i.jsx)(n.code,{children:"lbs"}),", ",(0,i.jsx)(n.code,{children:"pound"}),", ",(0,i.jsx)(n.code,{children:"pounds"}),") and kilograms (",(0,i.jsx)(n.code,{children:"kg"}),", ",(0,i.jsx)(n.code,{children:"kgs"}),", ",(0,i.jsx)(n.code,{children:"kilogram"}),", ",(0,i.jsx)(n.code,{children:"kilograms"}),"). The supported moment arm units are inches (",(0,i.jsx)(n.code,{children:"in"}),", ",(0,i.jsx)(n.code,{children:"inch"}),", ",(0,i.jsx)(n.code,{children:"inches"}),") and centimeters (",(0,i.jsx)(n.code,{children:"cm"}),", ",(0,i.jsx)(n.code,{children:"centimeter"}),", ",(0,i.jsx)(n.code,{children:"centimeters"}),")."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["These units only affect the parsing of values from ",(0,i.jsx)(n.code,{children:"panel.xml"}),". They do not affect how weight and moment-arm values are displayed by the G3000. The G3000 uses the Weight Units setting (which the user can configure via the GTC Avionics Settings page) to determine the units in which weight and moment-arm values are displayed."]})}),"\n",(0,i.jsx)(n.h4,{id:"moment-arm-labels",children:"Moment arm labels"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"arm-label"})," and ",(0,i.jsx)(n.code,{children:"arm-label-short"})," attributes define how moment-arm values are labeled. ",(0,i.jsx)(n.code,{children:"arm-label"})," defines the long-form label text used for moment-arm values, and ",(0,i.jsx)(n.code,{children:"arm-label-short"})," defines the short-form label text. The short-form label text is recommended to be no longer than 3 characters."]}),"\n",(0,i.jsx)(n.p,{children:'Both attributes are optional. If not explicitly defined, the long-form label text defaults to "CG", and the short-form label text defaults to the long-form label text.'}),"\n",(0,i.jsx)(n.h4,{id:"mac-support",children:"%MAC support"}),"\n",(0,i.jsxs)(n.p,{children:["To enable support for %MAC (mean aerodynamic chord) values, both the ",(0,i.jsx)(n.code,{children:"lemac"})," and ",(0,i.jsx)(n.code,{children:"temac"})," attributes must be defined. ",(0,i.jsx)(n.code,{children:"lemac"})," defines the moment arm of the leading edge mean aerodynamic cord (LEMAC) and ",(0,i.jsx)(n.code,{children:"temac"})," defines the moment arm of the trailing edge mean aerodynamic cord (TEMAC). Both should be expressed in the unit type defined by the ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"arm-unit"})})," attribute. LEMAC and TEMAC cannot be equal to each other."]}),"\n",(0,i.jsxs)(n.p,{children:["When %MAC support is enabled, moment-arm values will be displayed as %MAC in certain places. Additionally, %MAC support allows ",(0,i.jsx)(n.a,{href:"#envelopes",children:"envelopes"})," to be defined in terms of %MAC."]}),"\n",(0,i.jsx)(n.h4,{id:"empty-weight-and-moment-arm",children:"Empty weight and moment arm"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"empty-weight"})," attribute defines the aircraft's weight when all load stations are disabled (zero empty weight and zero load weight) and with no fuel loaded. It can be any finite non-negative number. It should be expressed in the unit type defined by the ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"weight-unit"})})," attribute."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"empty-arm"})," attribute defines the moment arm of the aircraft's center of gravity when all load stations are disabled (zero empty weight and zero load weight) and with no fuel loaded. It can be any finite number. It should be expressed in the unit type defined by the ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"arm-unit"})})," attribute."]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The following example ",(0,i.jsx)(n.code,{children:"panel.xml"})," excerpt enables the weight and balance feature and configures global options."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Performance>\r\n\r\n  \x3c!--\r\n    The <Weights> tag still needs to be defined when enabling the weight and balance feature.\r\n\r\n    In this case the options defined by the <BasicEmpty> and <MaxPax> tags are informational only and are not used by\r\n    the G3000 system.\r\n  --\x3e\r\n  <Weights>\r\n    <BasicEmpty unit=\'pounds\'>3000</BasicEmpty>\r\n    <MaxRamp unit=\'pounds\'>5300</MaxRamp>\r\n    <MaxTakeoff unit=\'pounds\'>5200</MaxTakeoff>\r\n    <MaxLanding unit=\'pounds\'>4750</MaxLanding>\r\n    <MaxZeroFuel unit=\'pounds\'>4200</MaxZeroFuel>\r\n    <MaxPax>4</MaxPax>\r\n  </Weights>\r\n\r\n  <WeightBalance\r\n    weight-unit="lb"\r\n    arm-unit="in"\r\n    arm-label="Station"\r\n    arm-label-short="STA"\r\n    empty-weight="3000"\r\n    empty-arm="190"\r\n  >\r\n    \x3c!-- ... --\x3e\r\n  </WeightBalance>\r\n\r\n</Performance>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"load-stations",children:"Load Stations"}),"\n",(0,i.jsxs)(n.p,{children:["With the weight and balance feature, the user adjusts the weight of the airplane by assigning load weight to individual load stations. You may define as many load stations as you wish in ",(0,i.jsx)(n.code,{children:"panel.xml"})," with the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#loadstations",children:(0,i.jsx)(n.code,{children:"<LoadStations>"})})," tag. Each load station is defined using a ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#station-loadstations",children:(0,i.jsx)(n.code,{children:"<Station>"})})," tag as a child of ",(0,i.jsx)(n.code,{children:"<LoadStations>"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A load station can be assigned ",(0,i.jsx)(n.strong,{children:"empty weight"})," and ",(0,i.jsx)(n.strong,{children:"load weight"}),". The empty weight of a station generally does not change from one flight to another and is considered to be part of the aircraft's basic operating weight. For example, the empty weight of a passenger station may include the weight of the seat. The load weight of a station is the weight at that station that typically may change from one flight to another. For example, the load weight of a passenger station would be the weight of the passenger and any of their belongings that are stored with them at the station."]}),"\n",(0,i.jsx)(n.p,{children:"Each station is also assigned a moment arm. The same moment arm applies to both the empty weight and load weight assigned to the station."}),"\n",(0,i.jsx)(n.p,{children:"Finally, each station can be enabled or disabled. When enabled, the user may adjust its load weight and any weight (empty or load) assigned to it is taken into account when performing weight and balance calculations. When disabled, the user cannot adjust its load weight and any weight (empty or load) assigned to it is ignored when performing weight and balance calculations."}),"\n",(0,i.jsx)(n.p,{children:"The following sub-sections describe how each load station can be configured."}),"\n",(0,i.jsx)(n.h4,{id:"basic-properties",children:"Basic properties"}),"\n",(0,i.jsxs)(n.p,{children:["Each load station requires the following basic properties to be defined using attributes on the ",(0,i.jsx)(n.code,{children:"<Station>"})," tag:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Attribute"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:"The load station's ID. Each load station must have a unique ID. The ID is only used internally and is not displayed anywhere."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"type"})}),(0,i.jsx)(n.td,{children:"The load station's type. Can be either 'operating', 'passenger', or 'cargo'. The station's type affects how load weight assigned to it is classified. Note that empty weight assigned to any station is classified as operating weight regardless of the station's type."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{children:"The load station's displayed name."})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"weight-limits",children:"Weight limits"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"max-empty-weight"})," and ",(0,i.jsx)(n.code,{children:"max-load-weight"})," attributes on the ",(0,i.jsx)(n.code,{children:"<Station>"})," tag define the maximum empty and load weights, respectively, that can be assigned to the station. Both weights should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"weight-unit"})})," attribute. If either of these values is not defined, then it will default to 99999 (of the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.code,{children:"weight-unit"})," attribute)."]}),"\n",(0,i.jsx)(n.h4,{id:"moment-arm-limits",children:"Moment-arm limits"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"min-arm"})," and ",(0,i.jsx)(n.code,{children:"max-arm"})," attributes on the ",(0,i.jsx)(n.code,{children:"<LoadStations>"})," tag define the global minimum and maximum moment arms, respectively, that can be assigned to any load station. Additionally, the ",(0,i.jsx)(n.code,{children:"min-arm"})," and ",(0,i.jsx)(n.code,{children:"max-arm"})," attributes on the ",(0,i.jsx)(n.code,{children:"<Station>"})," tag define the minimum and maximum moment arms, respectively, that can be assigned to the station associated with that tag. The final moment-arm limits imposed on a station represent the most restrictive range of values that comply with both the global limits and the station limits."]}),"\n",(0,i.jsxs)(n.p,{children:["All moment-arm limits should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"arm-unit"})})," attribute. If a global or station moment-arm limit is not defined, then it will default to -\u221E for the minimum and \u221E for the maximum."]}),"\n",(0,i.jsx)(n.h4,{id:"default-parameters",children:"Default parameters"}),"\n",(0,i.jsxs)(n.p,{children:["Several default load station parameters can be configured using ",(0,i.jsx)(n.code,{children:"<Station>"})," tag attributes: default empty weight, default moment arm, and default enabled state. Of these, only the default moment arm must be explicitly defined. The other two will take default values if not defined. These default parameters are assigned to the station before any potential changes are made by the user."]}),"\n",(0,i.jsxs)(n.p,{children:["The default empty weight is defined using the ",(0,i.jsx)(n.code,{children:"empty-weight"})," attribute. It should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"weight-unit"})})," attribute. If not defined, then it defaults to 0."]}),"\n",(0,i.jsxs)(n.p,{children:["The default moment arm is defined using the ",(0,i.jsx)(n.code,{children:"arm"})," attribute. It should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"arm-unit"})})," attribute."]}),"\n",(0,i.jsxs)(n.p,{children:["The default enabled state is defined using the ",(0,i.jsx)(n.code,{children:"enabled"})," attribute. If not defined, then it defaults to true."]}),"\n",(0,i.jsx)(n.h4,{id:"user-editability",children:"User-editability"}),"\n",(0,i.jsxs)(n.p,{children:["You can configure whether the empty weight, moment arm, and enabled state of a load station are user editable using the ",(0,i.jsx)(n.code,{children:"<Station>"})," tag's ",(0,i.jsx)(n.code,{children:"empty-weight-editable"}),", ",(0,i.jsx)(n.code,{children:"arm-editable"}),", and ",(0,i.jsx)(n.code,{children:"enabled-editable"})," attributes, respectively. All options default to false if not defined."]}),"\n",(0,i.jsx)(n.p,{children:"When one or more of these parameters are configured to be user editable, the user can change them through the GTC Weight and Balance Configuration page (see image below)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"GTC Weight and Balance Configuration Page",src:t(100159).Z+"",width:"492",height:"388"})}),"\n",(0,i.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The following example ",(0,i.jsx)(n.code,{children:"panel.xml"})," excerpt configures seven load stations: pilot, copilot, four passengers, and one baggage. Two passenger stations are optional (they can be disabled by the user) and the rest are required and always enabled. The empty weights and moment arms of all stations except the baggage station are user editable."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<WeightBalance\r\n  weight-unit="lb"\r\n  arm-unit="in"\r\n  ...\r\n>\r\n\r\n  \x3c!-- Apply global moment-arm limits of 100 to 250 inches to all load stations. --\x3e\r\n  <LoadStations min-arm="100" max-arm="250">\r\n\r\n    \x3c!-- Pilot and copilot stations, required --\x3e\r\n    <Station\r\n      id="pilot" type="operating" name="Pilot"\r\n      max-load-weight="500"\r\n      empty-weight="0" arm="146.4" enabled="true"\r\n      empty-weight-editable="true" arm-editable="true"\r\n    />\r\n    <Station\r\n      id="copilot" type="operating" name="Copilot"\r\n      max-load-weight="500"\r\n      empty-weight="0" arm="146.4" enabled="true"\r\n      empty-weight-editable="true" arm-editable="true"\r\n    />\r\n\r\n    \x3c!-- Two front-row passenger stations, required --\x3e\r\n    <Station\r\n      id="passengerF1" type="passenger" name="Pass F 1"\r\n      max-load-weight="500"\r\n      empty-weight="35" arm="190.1" enabled="true"\r\n      empty-weight-editable="true" arm-editable="true"\r\n    />\r\n    <Station\r\n      id="passengerF2" type="passenger" name="Pass F 2"\r\n      max-load-weight="500"\r\n      empty-weight="35" arm="190.1" enabled="true"\r\n      empty-weight-editable="true" arm-editable="true"\r\n    />\r\n\r\n    \x3c!-- Two rear-row passenger stations, optional --\x3e\r\n    <Station\r\n      id="passengerR1" type="passenger" name="Pass R 1"\r\n      max-load-weight="500"\r\n      empty-weight="35" arm="218.2" enabled="false"\r\n      empty-weight-editable="true" arm-editable="true" enabled-editable="true"\r\n    />\r\n    <Station\r\n      id="passengerR2" type="passenger" name="Pass R 2"\r\n      max-load-weight="500"\r\n      empty-weight="35" arm="218.2" enabled="false"\r\n      empty-weight-editable="true" arm-editable="true" enabled-editable="true"\r\n    />\r\n\r\n    \x3c!-- Baggage station, required --\x3e\r\n    <Station\r\n      id="baggage" type="cargo" name="Baggage"\r\n      max-load-weight="999"\r\n      empty-weight="0" arm="229.0" enabled="true"\r\n    />\r\n\r\n  </LoadStations>\r\n\r\n  \x3c!-- ... --\x3e\r\n\r\n</WeightBalance>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"fuel-station",children:"Fuel Station"}),"\n",(0,i.jsx)(n.p,{children:"The weight and balance feature supports a single fuel station. All weight from loading fuel is assigned to this fuel station."}),"\n",(0,i.jsxs)(n.p,{children:["Configuring the fuel station is done in ",(0,i.jsx)(n.code,{children:"panel.xml"})," using the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#fuelstation",children:(0,i.jsx)(n.code,{children:"<FuelStation>"})})," tag. The only configurable value for the fuel station is its moment arm, which is defined using the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#arm-fuelstation",children:(0,i.jsx)(n.code,{children:"<Arm>"})})," tag. The moment arm should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"arm-unit"})})," attribute."]}),"\n",(0,i.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The following example ",(0,i.jsx)(n.code,{children:"panel.xml"})," excerpt configures a fuel station with a moment arm of 203 inches."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<WeightBalance\r\n  weight-unit="lb"\r\n  arm-unit="in"\r\n  ...\r\n>\r\n\r\n  <FuelStation>\r\n    <Arm>203</Arm>\r\n  </FuelStation>\r\n\r\n  \x3c!-- ... --\x3e\r\n\r\n</WeightBalance>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"envelopes",children:"Envelopes"}),"\n",(0,i.jsx)(n.p,{children:"One or more envelopes must be defined with the weight and balance feature. An envelope represents the two-dimensional space of allowed weight and center-of-gravity moment-arm values for a given set of conditions. The user selects one envelope as the active envelope through the GTC Weight and Balance page. Weight and center-of-gravity moment-arm pairs calculated by the weight and balance system are compared to the active envelope. If any calculated pairs are found to be outside of the active envelope limits, then the system notifies the user of the exceedance using amber visual cues on the Weight and Balance pane (see image below)."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Envelope Exceedance",src:t(640055).Z+"",width:"327",height:"472"})}),"\n",(0,i.jsxs)(n.p,{children:["Envelopes are defined in ",(0,i.jsx)(n.code,{children:"panel.xml"})," with the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#envelopes-weightbalance",children:(0,i.jsx)(n.code,{children:"<Envelopes>"})})," tag. Each load station is defined using a ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#envelope-weightbalanceenvelopes",children:(0,i.jsx)(n.code,{children:"<Envelope>"})})," tag as a child of ",(0,i.jsx)(n.code,{children:"<Envelopes>"}),". The ",(0,i.jsx)(n.code,{children:"<Envelopes>"})," tag's ",(0,i.jsx)(n.code,{children:"default-index"})," attribute defines the index of the envelope that is selected as the default envelope. Envelopes are indexed in the order they are defined in ",(0,i.jsx)(n.code,{children:"<Envelopes>"}),", starting at index 0."]}),"\n",(0,i.jsx)(n.p,{children:"The following sub-sections describe how each envelope can be configured."}),"\n",(0,i.jsx)(n.h4,{id:"envelope-parameters",children:"Envelope parameters"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<Envelope>"})," tag's ",(0,i.jsx)(n.code,{children:"name"})," attribute defines the displayed name of the envelope."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<Envelope>"})," tag's ",(0,i.jsx)(n.code,{children:"min-weight"})," and ",(0,i.jsx)(n.code,{children:"max-weight"})," attributes define the minimum and maximum weights, respectively, allowed by the envelope. The weights should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"weight-unit"})})," attribute."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"<Envelope>"})," tag's ",(0,i.jsx)(n.code,{children:"max-zero-fuel-weight"}),", ",(0,i.jsx)(n.code,{children:"max-ramp-weight"}),", ",(0,i.jsx)(n.code,{children:"max-takeoff-weight"}),", and ",(0,i.jsx)(n.code,{children:"max-landing-weight"})," attributes define the maximum zero-fuel, ramp, takeoff, and landing weights that are used when the envelope is active. The weights should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"weight-unit"})})," attribute. If any of these weights are not defined, then it will default to the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/features/weight-fuel#configuring-weight-and-fuel",children:"corresponding weight"})," defined by the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#weights",children:(0,i.jsx)(n.code,{children:"<Weights>"})})," tag."]}),"\n",(0,i.jsx)(n.h4,{id:"envelope-shape",children:"Envelope shape"}),"\n",(0,i.jsxs)(n.p,{children:["The shape of the envelope between its minimum and maximum weights is defined by the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#minimumarm-envelope",children:(0,i.jsx)(n.code,{children:"<MinimumArm>"})})," and ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#maximumarm-envelope",children:(0,i.jsx)(n.code,{children:"<MaximumArm>"})})," tags. The ",(0,i.jsx)(n.code,{children:"<MinimumArm>"})," tag uses breakpoints to define the minimum moment-arm boundary: the minimum allowed moment arms at all weights between the minimum and maximum weights (below image, red highlight). The ",(0,i.jsx)(n.code,{children:"<MaximumArm>"})," tag uses breakpoints to define the maximum moment-arm boundary: the maximum allowed moment arms at all weights between the minimum and maximum weights (below image, cyan highlight)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Envelope",src:t(340104).Z+"",width:"379",height:"500"})}),"\n",(0,i.jsxs)(n.p,{children:["For both the minimum and maximum moment-arm boundaries, breakpoints define anchor points along the boundary and the boundary is linearly interpolated between breakpoints. Breakpoints are expressed as a JSON-formatted array of 2-tuples. Each tuple is one breakpoint. The first tuple member is the breakpoint's moment arm. If the ",(0,i.jsx)(n.code,{children:"<Envelope>"})," tag's ",(0,i.jsx)(n.code,{children:"use-mac"})," attribute is true and ",(0,i.jsx)(n.a,{href:"#mac-support",children:"%MAC support"})," is enabled, then the moment arm should be expressed as a %MAC value. Otherwise, the moment arm should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"arm-unit"})})," attribute. The second tuple member is the breakpoint's weight, expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"weight-unit"})})," attribute. Breakpoints should be ordered in the array such that their weights are monotonically increasing (i.e. a breakpoint's weight must be greater than or equal to the weight of the previous breakpoint)."]}),"\n",(0,i.jsx)(n.p,{children:"If the first breakpoint in the array has a weight greater than the envelope's minimum weight, then the boundary will extend from the first breakpoint's weight down to the minimum weight at a constant moment-arm value equal to the first breakpoint's moment arm. Likewise, if the last breakpoint in the array has a weight less than the envelope's maximum weight, then the boundary will extend from the last breakpoint's weight up to the maximum weight at a constant moment-arm value equal to the last breakpoint's moment arm."}),"\n",(0,i.jsx)(n.h4,{id:"graph-options",children:"Graph options"}),"\n",(0,i.jsxs)(n.p,{children:["The Weight and Balance pane displays a graph that depicts the active envelope. The scales of this graph must be configured for each envelope. This is done using the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#graphscale-envelope",children:(0,i.jsx)(n.code,{children:"<GraphScale>"})}),", ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#largegraphscale-envelope",children:(0,i.jsx)(n.code,{children:"<LargeGraphScale>"})}),", and ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/panel-xml-tag-documentation#smallgraphscale-envelope",children:(0,i.jsx)(n.code,{children:"<SmallGraphScale>"})})," tags. The ",(0,i.jsx)(n.code,{children:"<LargeGraphScale>"})," tag defines scale options for the large-format graph (image, left). The ",(0,i.jsx)(n.code,{children:"<SmallGraphScale>"})," tag defines scale options for the small-format graph (image, right). If either ",(0,i.jsx)(n.code,{children:"<LargeGraphScale>"})," or ",(0,i.jsx)(n.code,{children:"<SmallGraphScale>"})," is not defined, then the options for the missing tag default to those defined by the ",(0,i.jsx)(n.code,{children:"<GraphScale>"})," tag. If ",(0,i.jsx)(n.code,{children:"<GraphScale>"})," is not defined, then both ",(0,i.jsx)(n.code,{children:"<LargeGraphScale>"})," and ",(0,i.jsx)(n.code,{children:"<SmallGraphScale>"})," must be defined."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Envelope Graphs",src:t(550096).Z+"",width:"643",height:"476"})}),"\n",(0,i.jsxs)(n.p,{children:["All three graph scale tags share the same syntax. The ",(0,i.jsx)(n.code,{children:"min-weight"})," and ",(0,i.jsx)(n.code,{children:"max-weight"})," attributes define the minimum and maximum scale weights, respectively, of the graph's vertical axis. The weights should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"weight-unit"})})," attribute. The ",(0,i.jsx)(n.code,{children:"min-arm"})," and ",(0,i.jsx)(n.code,{children:"max-arm"})," attributes define the minimum and maximum scale moment arms, respectively, of the graph's horizontal axis. If the ",(0,i.jsx)(n.code,{children:"<Envelope>"})," tag's ",(0,i.jsx)(n.code,{children:"use-mac"})," attribute is true and ",(0,i.jsx)(n.a,{href:"#mac-support",children:"%MAC support"})," is enabled, then the moment arms should be expressed as %MAC values. Otherwise, the moment arms should be expressed in the unit type defined by the ",(0,i.jsx)(n.code,{children:"<WeightBalance>"})," tag's ",(0,i.jsx)(n.a,{href:"#units",children:(0,i.jsx)(n.code,{children:"arm-unit"})})," attribute."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["If an ",(0,i.jsx)(n.code,{children:"<Envelope>"})," tag's ",(0,i.jsx)(n.code,{children:"use-mac"})," attribute is true and ",(0,i.jsx)(n.a,{href:"#mac-support",children:"%MAC support"})," is enabled, then the Weight and Balance pane graph's moment-arm scale will be displayed in units of %MAC when the envelope is active."]})}),"\n",(0,i.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The following example ",(0,i.jsx)(n.code,{children:"panel.xml"})," excerpt configures the envelope seen in the images in the previous sub-sections."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<WeightBalance\r\n  weight-unit="lb"\r\n  arm-unit="in"\r\n  ...\r\n>\r\n\r\n  <Envelopes>\r\n    <Envelope name="Normal" min-weight="3000" max-weight="5200" max-landing-weight="4750">\r\n      <MinimumArm>\r\n        [\r\n          [194.2, 3000],\r\n          [188.5, 3500],\r\n          [188.5, 4000],\r\n          [191.6, 5200]\r\n        ]\r\n      </MinimumArm>\r\n      <MaximumArm>\r\n        [\r\n          [194.2, 3000],\r\n          [200.2, 4400],\r\n          [200.2, 5200]\r\n        ]\r\n      </MaximumArm>\r\n\r\n      <LargeGraphScale min-weight="2600" max-weight="5600" min-arm="184" max-arm="204" />\r\n      <SmallGraphScale min-weight="2600" max-weight="5600" min-arm="180" max-arm="210" />\r\n    </Envelope>\r\n  </Envelopes>\r\n\r\n  \x3c!-- ... --\x3e\r\n\r\n</WeightBalance>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"customizing-the-weight-and-balance-pane",children:"Customizing the Weight and Balance Pane"}),"\n",(0,i.jsxs)(n.p,{children:["The Weight and Balance pane requires some configuration that is too complex to be defined in ",(0,i.jsx)(n.code,{children:"panel.xml"}),". This configuration is done using ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/plugin-basics",children:"plugins"})," instead. To configure the pane, a ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/pfd-plugins",children:"PFD"})," ",(0,i.jsx)(n.strong,{children:"and"})," an ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/g3000/mfd-plugins",children:"MFD"})," plugin should return instances of ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/WeightBalancePaneViewModule",children:(0,i.jsx)(n.code,{children:"WeightBalancePaneViewModule"})})," from their respective ",(0,i.jsx)(n.code,{children:"getWeightBalancePaneViewModule()"})," methods."]}),"\n",(0,i.jsxs)(n.p,{children:["The following sub-sections describe how to customize the Weight and Balance pane using ",(0,i.jsx)(n.code,{children:"WeightBalancePaneViewModule"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"rendering-the-aircraft-loading-panel",children:"Rendering the Aircraft Loading Panel"}),"\n",(0,i.jsxs)(n.p,{children:["The Weight and Balance pane's aircraft loading panel depicts the assigned load weights of all enabled ",(0,i.jsx)(n.a,{href:"#load-stations",children:"load stations"}),". The load stations are represented graphically and are typically superimposed on a diagram of the airplane."]}),"\n",(0,i.jsxs)(n.p,{children:["The content of the loading panel is rendered using ",(0,i.jsx)(n.code,{children:"WeightBalancePaneViewModule"}),"'s ",(0,i.jsx)(n.code,{children:"renderAircraftLoadPanel()"})," method. The method should create and render a component that implements the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/WeightBalancePaneViewPanel",children:(0,i.jsx)(n.code,{children:"WeightBalancePaneViewPanel"})})," interface and return it as a ",(0,i.jsx)(n.code,{children:"VNode"}),". A ",(0,i.jsx)(n.code,{children:"NodeReference"})," is passed to the method as the first argument, which should in turn be passed to the ",(0,i.jsx)(n.code,{children:"ref"})," prop of the component so that the component instance is assigned to the ",(0,i.jsx)(n.code,{children:"NodeReference"}),". Additional arguments that may be helpful in creating the component are also passed to the method; these arguments are for convenience only and do not have to be used."]}),"\n",(0,i.jsxs)(n.p,{children:["The following code shows how to render a loading panel component using ",(0,i.jsx)(n.code,{children:"renderAircraftLoadPanel()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class ExampleWeightBalancePaneViewModule implements WeightBalancePaneViewModule {\r\n\r\n  public renderAircraftLoadPanel(\r\n    ref: NodeReference<WeightBalancePaneViewPanel>,\r\n    bus: EventBus,\r\n    weightBalanceConfig: WeightBalanceConfig,\r\n    weightBalanceSettingManager: WeightBalanceUserSettingManager,\r\n    unitsSettingManager: UnitsUserSettingManager\r\n  ): VNode {\r\n    return (\r\n      <ExampleAircraftLoadPanel\r\n        ref={ref} // This prop assignment is required\r\n        weightBalanceSettingManager={weightBalanceSettingManager}\r\n        unitsSettingManager={unitsSettingManager}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\ninterface ExampleAircraftLoadPanelProps extends ComponentProps {\r\n  weightBalanceSettingManager: WeightBalanceUserSettingManager;\r\n  unitsSettingManager: UnitsUserSettingManager;\r\n}\r\n\r\nclass ExampleAircraftLoadPanel\r\n  extends DisplayComponent<ExampleAircraftLoadPanelProps>\r\n  implements WeightBalancePaneViewPanel {\r\n  // ...\r\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"The total available size of the load panel content area depends on the display pane in which it is contained and whether the pane is full size or half size:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pane"}),(0,i.jsx)(n.th,{children:"Size"}),(0,i.jsx)(n.th,{children:"Width (px)"}),(0,i.jsx)(n.th,{children:"Height (px)"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"PFD"}),(0,i.jsx)(n.td,{children:"Half"}),(0,i.jsx)(n.td,{children:"508"}),(0,i.jsx)(n.td,{children:"778"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MFD"}),(0,i.jsx)(n.td,{children:"Full"}),(0,i.jsx)(n.td,{children:"464"}),(0,i.jsx)(n.td,{children:"702"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MFD"}),(0,i.jsx)(n.td,{children:"Half"}),(0,i.jsx)(n.td,{children:"495"}),(0,i.jsx)(n.td,{children:"748"})]})]})]}),(0,i.jsx)(n.p,{children:"When styling your load panel component, care should be taken to ensure it supports and fits well into all of these sizes."})]}),"\n",(0,i.jsxs)(n.p,{children:["When rendering the loading panel component, you may find it helpful to use the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/classes/WeightBalancePaneViewLoadStation",children:(0,i.jsx)(n.code,{children:"WeightBalancePaneViewLoadStation"})})," to render the graphical representations of the load stations. Each instance of ",(0,i.jsx)(n.code,{children:"WeightBalancePaneViewLoadStation"})," renders a single load station and will automatically show/hide itself when the load station is enabled/disabled and update the displayed load weight as appropriate. The following image shows an example of what a rendered ",(0,i.jsx)(n.code,{children:"WeightBalancePaneViewLoadStation"})," component looks like."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"WeightBalancePaneViewLoadStation",src:t(671934).Z+"",width:"295",height:"117"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["The root element of ",(0,i.jsx)(n.code,{children:"WeightBalancePaneViewLoadStation"})," is assigned the ",(0,i.jsx)(n.code,{children:"weight-balance-pane-load-station"})," class. Therefore, to apply CSS styling to the root element you can select it with the following selector:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".weight-balance-pane-load-station { }\n"})}),(0,i.jsxs)(n.p,{children:["You can also add additional classes to the root elements of individual ",(0,i.jsx)(n.code,{children:"WeightBalancePaneViewLoadStation"})," components using the ",(0,i.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/WeightBalancePaneViewLoadStationProps#class",children:(0,i.jsx)(n.code,{children:"class"})})," prop."]})]}),"\n",(0,i.jsxs)(n.p,{children:["The following code shows how to use ",(0,i.jsx)(n.code,{children:"WeightBalancePaneViewLoadStation"})," to render two load stations."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface ExampleAircraftLoadPanelProps extends ComponentProps {\r\n  weightBalanceSettingManager: WeightBalanceUserSettingManager;\r\n  unitsSettingManager: UnitsUserSettingManager;\r\n}\r\n\r\nclass ExampleAircraftLoadPanel\r\n  extends DisplayComponent<ExampleAircraftLoadPanelProps>\r\n  implements WeightBalancePaneViewPanel {\r\n\r\n  // ...\r\n\r\n  public render(): VNode {\r\n    return (\r\n      <div>\r\n        // ...\r\n        {this.renderStation('pilot', 'weight-balance-pane-load-station-pilot')}\r\n        {this.renderStation('copilot', 'weight-balance-pane-load-station-copilot')}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Renders one of this panel's load station displays.\r\n   * @param id The ID of the load station for which to render a display.\r\n   * @param cssClass CSS class(es) to apply to the display's root element.\r\n   * @returns A display for the specified load station.\r\n   */\r\n  private renderStation(id: string, cssClass?: string): VNode | null {\r\n    const settingManager = this.props.weightBalanceSettingManager;\r\n    const stationDef = settingManager.loadStationDefs.find(def => def.id === id);\r\n\r\n    if (!stationDef) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <WeightBalancePaneViewLoadStation\r\n        show={settingManager.getSetting(`weightBalanceLoadStationEnabled_${id}`)}\r\n        label={stationDef.name}\r\n        loadWeight={settingManager.getSetting(`weightBalanceLoadStationLoadWeight_${id}`)}\r\n        weightDisplayUnit={this.props.unitsSettingManager.weightUnits}\r\n        class={cssClass}\r\n      />\r\n    );\r\n  }\r\n}\n"})})]})}function c(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},100159:function(e,n,t){t.d(n,{Z:function(){return a}});let a=t.p+"assets/images/gtc-weight-balance-config-page-035ddb7970a1943037052257036f096f.jpg"},340104:function(e,n,t){t.d(n,{Z:function(){return a}});let a=t.p+"assets/images/weight-balance-envelope-28e6ddb1bdd01aa8ab3540bc642fe983.jpg"},640055:function(e,n,t){t.d(n,{Z:function(){return a}});let a=t.p+"assets/images/weight-balance-pane-envelope-exceedance-7be71b2c1de69196cb856ad3201c2467.jpg"},550096:function(e,n,t){t.d(n,{Z:function(){return a}});let a=t.p+"assets/images/weight-balance-pane-envelope-graphs-bc8b68f5fbea6d90eb2ab0b583c66bc6.jpg"},671934:function(e,n,t){t.d(n,{Z:function(){return a}});let a=t.p+"assets/images/weight-balance-pane-load-station-22436e4ee7fc46080e81f02f0e2f1a2f.jpg"},250065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return r}});var a=t(667294);let i={},s=a.createContext(i);function r(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);