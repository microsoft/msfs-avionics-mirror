"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["220888"],{309190:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>o,default:()=>h,assets:()=>l,toc:()=>d,frontMatter:()=>a});var i=JSON.parse('{"id":"g3000/panel-xml-basics","title":"G3000 panel.xml Basics","description":"Introduction","source":"@site/docs/g3000/panel-xml-basics.md","sourceDirName":"g3000","slug":"/g3000/panel-xml-basics","permalink":"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-basics","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"panel.xml Basics","sidebar_position":3},"sidebar":"sidebar","previous":{"title":"Instrument Setup","permalink":"/msfs-avionics-mirror/2024/docs/g3000/instrument-setup"},"next":{"title":"panel.xml Tag Documentation","permalink":"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-tag-documentation"}}'),r=t("785893"),s=t("250065");let a={sidebar_label:"panel.xml Basics",sidebar_position:3},o="G3000 panel.xml Basics",l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"File Structure",id:"file-structure",level:2},{value:"Tag Scope",id:"tag-scope",level:2},{value:"Global vs. Instrument-Specific Options",id:"global-vs-instrument-specific-options",level:2},{value:"Required vs. Optional Tags",id:"required-vs-optional-tags",level:2},{value:"Option Inheritance",id:"option-inheritance",level:2},{value:"Redundant Tags",id:"redundant-tags",level:2},{value:"Numeric Tags and Operators",id:"numeric-tags-and-operators",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"g3000-panelxml-basics",children:["G3000 ",(0,r.jsx)(n.code,{children:"panel.xml"})," Basics"]})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"panel.xml"})," file allows developers to configure their aircraft-specific G3000 installation. A basic understanding of the XML language is recommended when working with ",(0,r.jsx)(n.code,{children:"panel.xml"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"file-structure",children:"File Structure"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example of a simple ",(0,r.jsx)(n.code,{children:"panel.xml"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<PlaneHTMLConfig>\r\n\r\n  <Instrument>\r\n    <Name>WTG3000_PFD_1</Name>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    <Name>WTG3000_PFD_2</Name>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    <Name>WTG3000_MFD</Name>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    <Name>WTG3000_GTC_1</Name>\r\n  </Instrument>\r\n\r\n  <Instrument>\r\n    <Name>WTG3000_GTC_2</Name>\r\n  </Instrument>\r\n\r\n</PlaneHTMLConfig>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The file contains the root tag ",(0,r.jsx)(n.code,{children:"<PlaneHTMLConfig>"})," under which all other tags must be placed. There is one ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag for each JS/HTML instrument in the plane. The ",(0,r.jsx)(n.code,{children:"<Name>"})," tag identifies the specific instrument referenced by its parent ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag. In this example, there are five declared instruments: two PFDs, one MFD, and two GTCs."]}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"G3000 instrument names are standardized to the following formats:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["PFD: ",(0,r.jsx)(n.code,{children:"WTG3000_PFD_[index]"}),", where ",(0,r.jsx)(n.code,{children:"index"})," is either 1 or 2."]}),"\n",(0,r.jsxs)(n.li,{children:["MFD: ",(0,r.jsx)(n.code,{children:"WTG3000_MFD"})]}),"\n",(0,r.jsxs)(n.li,{children:["GTC: ",(0,r.jsx)(n.code,{children:"WTG3000_GTC_[index]"}),", where ",(0,r.jsx)(n.code,{children:"index"})," is 1, 2, etc."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"tag-scope",children:"Tag Scope"}),"\n",(0,r.jsxs)(n.p,{children:["Each tag parsed by the G3000 has a required ",(0,r.jsx)(n.strong,{children:"scope"}),", defined as the parent under which it must be placed. If a tag is placed in an incorrect scope, it may not be parsed at all or it may be interpreted as a different type of tag with the same name. Therefore, it is important to ensure that all tags are defined in the correct scope."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-tag-documentation",children:"tags documentation"}),' details the scope of each tag. When the scope is listed as "Global", this means the tag should be placed directly under the root ',(0,r.jsx)(n.code,{children:"<PlaneHTMLConfig>"}),' tag. When the scope is listed as "PFD", "MFD", or "GTC", this means the tag should be placed directly under a PFD, MFD, or GTC ',(0,r.jsx)(n.code,{children:"<Instrument>"})," tag, respectively."]}),"\n",(0,r.jsx)(n.h2,{id:"global-vs-instrument-specific-options",children:"Global vs. Instrument-Specific Options"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"panel.xml"})," options can either be global or specific to a particular instrument. Tags that are descendants of an ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag define options specific to the instrument referenced by their parent ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag. Tags that are not descendants of any ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag define global options."]}),"\n",(0,r.jsxs)(n.p,{children:["Certain instrument-specific tags can be defined globally by placing them them in the global scope (directly under the root ",(0,r.jsx)(n.code,{children:"<PlaneHTMLConfig>"})," tag) instead of under an ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag. When doing so, the option will apply to ",(0,r.jsx)(n.em,{children:"all"})," instruments that support the option. If an instrument-specific tag is defined both globally and within a ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag, then the version defined within the ",(0,r.jsx)(n.code,{children:"<Instrument>"})," tag will override the global one."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["Not all instrument-specific tags can be defined globally. Please refer to the ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-tag-documentation",children:"tags documentation"})," to find which ones can be defined globally and which ones cannot."]})}),"\n",(0,r.jsx)(n.h2,{id:"required-vs-optional-tags",children:"Required vs. Optional Tags"}),"\n",(0,r.jsxs)(n.p,{children:["Tags and attributes can either be required or optional. Required tags/attributes must be explicitly defined for ",(0,r.jsx)(n.code,{children:"panel.xml"})," to be successfully parsed. If a required tag/attribute is missing, the G3000 will throw a Javascript error during initialization with a message describing what was missing. Optional tags/attributes do not have to be explicitly defined, and omitting these will have no adverse effects. When an optional tag/attribute is omitted, the option it defines will revert to a default value."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/panel-xml-tag-documentation",children:"tags documentation"})," details which tags and attributes are required and which are optional, as well as the default values for optional tags/attributes."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If the G3000 detects that an optional attribute or tag was not formatted correctly (e.g. a mis-spelled option, an out-of-bounds numeral, etc), it will emit a console warning and revert the option to its default value. Therefore, during development it is recommended that you monitor the console output of all instruments to ensure that ",(0,r.jsx)(n.code,{children:"panel.xml"})," is being parsed cleanly."]})}),"\n",(0,r.jsx)(n.h2,{id:"option-inheritance",children:"Option Inheritance"}),"\n",(0,r.jsx)(n.p,{children:"Certain complex instrument-specific option tags support a basic form of inheritance. This allows you to define similar, but not identical, options in multiple instruments without needing to duplicate the entire tag subtree for each instrument. Here is an example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<PfdLayout id="base-pfd-layout" use-banners="true" softkeys="true" />\r\n\r\n<Instrument>\r\n  <Name>WTG3000_PFD_1</Name>\r\n\r\n  <PfdLayout inherit="base-pfd-layout" instrument-side="right" />\r\n</Instrument>\r\n\r\n<Instrument>\r\n  <Name>WTG3000_PFD_2</Name>\r\n\r\n  <PfdLayout inherit="base-pfd-layout" instrument-side="left" />\r\n</Instrument>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, the two ",(0,r.jsx)(n.code,{children:"<PfdLayout>"})," tags defined for the ",(0,r.jsx)(n.code,{children:"WTG3000_PFD_1"})," and ",(0,r.jsx)(n.code,{children:"WTG3000_PFD_2"})," instruments both inherit from the globally defined ",(0,r.jsx)(n.code,{children:"<PfdLayout>"})," tag. Inheritance is enabled for these tags by the presence of the ",(0,r.jsx)(n.code,{children:"inherit"})," attribute, which defines the ID of the tag from which they inherit (in this case: ",(0,r.jsx)(n.code,{children:"base-pfd-layout"}),")."]}),"\n",(0,r.jsxs)(n.p,{children:["When inheriting, a tag copies all descendants and attributes that it does not explicitly define itself from the source tag. In the example, the two instrument-specific ",(0,r.jsx)(n.code,{children:"<PfdLayout>"})," tags inherit the ",(0,r.jsx)(n.code,{children:"use-banners"})," and ",(0,r.jsx)(n.code,{children:"softkeys"})," attributes from ",(0,r.jsx)(n.code,{children:"#base-pfd-layout"}),". The instrument-specific ",(0,r.jsx)(n.code,{children:"<PfdLayout>"})," tags also define their own (different) values for the ",(0,r.jsx)(n.code,{children:"instrument-side"})," attribute. If ",(0,r.jsx)(n.code,{children:"#base-pfd-layout"})," had defined its own ",(0,r.jsx)(n.code,{children:"instrument-side"})," attribute, it would not be inherited by the instrument-specific tags."]}),"\n",(0,r.jsx)(n.h2,{id:"redundant-tags",children:"Redundant Tags"}),"\n",(0,r.jsx)(n.p,{children:"When you define multiple copies of a tag that is meant to be a singleton, only the first instance of the tag (in tree order) will apply. Take the following example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<Instrument>\r\n  <Name>WTG3000_PFD_1</Name>\r\n\r\n  <Altimeter>\r\n    <Scale\r\n      min="-9999"\r\n      max="99999"\r\n      window="1000"\r\n      major-tick-interval="100"\r\n      minor-tick-factor="5"\r\n    />\r\n  </Altimeter>\r\n\r\n  <Altimeter>\r\n    <Scale\r\n      min="-9999"\r\n      max="99999"\r\n      window="1000"\r\n      major-tick-interval="500"\r\n      minor-tick-factor="5"\r\n    />\r\n  </Altimeter>\r\n</Instrument>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Of the two ",(0,r.jsx)(n.code,{children:"<Altimeter>"})," tags defined for ",(0,r.jsx)(n.code,{children:"WTG3000_PFD_1"}),", only the top one will apply. As a result, the PFD will have an altimeter with major ticks at 100 feet intervals instead of 500 feet intervals."]}),"\n",(0,r.jsx)(n.h2,{id:"numeric-tags-and-operators",children:"Numeric Tags and Operators"}),"\n",(0,r.jsxs)(n.p,{children:["Certain G3000-specific tags define numeric values. One such tag is the generic ",(0,r.jsx)(n.code,{children:"<Number>"}),", which is a numeric tag that returns a constant value equal to its content (for example, ",(0,r.jsx)(n.code,{children:"<Number>0</Number>"})," returns a value of zero). Other numeric tags may return values with more complicated logic."]}),"\n",(0,r.jsx)(n.p,{children:"Numeric tags can be used together with numeric operator tags to generate computed numeric values. Each numeric operator tag accepts one or more numeric tags as children (the operands) and outputs the result of the operation as a new numeric value. Numeric operators also are considered numeric tags, so they can be used as operands of other numeric operator tags."}),"\n",(0,r.jsx)(n.p,{children:"The available numeric operator tags are:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operator"}),(0,r.jsx)(n.th,{children:"Operand Count"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<Min>"})}),(0,r.jsx)(n.td,{children:"One or More"}),(0,r.jsx)(n.td,{children:"Returns the minimum value among all operands."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<Max>"})}),(0,r.jsx)(n.td,{children:"One or More"}),(0,r.jsx)(n.td,{children:"Returns the maximum value among all operands."})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The following are examples of numeric operator usage:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\x3c!-- Always returns 0 --\x3e\r\n<Min>\r\n  <Number>0</Number>\r\n  <Number>5</Number>\r\n  <Number>10</Number>\r\n</Min>\r\n\r\n\x3c!-- Always returns 100 --\x3e\r\n<Max>\r\n  <Number>10</Number>\r\n  <Min>\r\n    <Number>100</Number>\r\n    <Number>1000</Number>\r\n  </Min>\r\n</Max>\n"})})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return a}});var i=t(667294);let r={},s=i.createContext(r);function a(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);