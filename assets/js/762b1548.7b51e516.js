"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[94841],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>f});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=p(a),k=r,f=m["".concat(o,".").concat(k)]||m[k]||c[k]||i;return a?n.createElement(f,l(l({ref:t},s),{},{components:a})):n.createElement(f,l({ref:t},s))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=k;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d[m]="string"==typeof e?e:r,l[1]=d;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},42961:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={id:"index.CircleInterceptLegCalculator",title:"Class: CircleInterceptLegCalculator",sidebar_label:"CircleInterceptLegCalculator",custom_edit_url:null},l=void 0,d={unversionedId:"framework/classes/index.CircleInterceptLegCalculator",id:"framework/classes/index.CircleInterceptLegCalculator",title:"Class: CircleInterceptLegCalculator",description:"index.CircleInterceptLegCalculator",source:"@site/docs/framework/classes/index.CircleInterceptLegCalculator.md",sourceDirName:"framework/classes",slug:"/framework/classes/index.CircleInterceptLegCalculator",permalink:"/msfs-avionics-mirror/docs/framework/classes/index.CircleInterceptLegCalculator",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"index.CircleInterceptLegCalculator",title:"Class: CircleInterceptLegCalculator",sidebar_label:"CircleInterceptLegCalculator",custom_edit_url:null},sidebar:"sidebar",previous:{title:"CircleInterceptBuilder",permalink:"/msfs-avionics-mirror/docs/framework/classes/index.CircleInterceptBuilder"},next:{title:"CircleVectorBuilder",permalink:"/msfs-avionics-mirror/docs/framework/classes/index.CircleVectorBuilder"}},o={},p=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"directToPointBuilder",id:"directtopointbuilder",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"facilityCache",id:"facilitycache",level:3},{value:"Inherited from",id:"inherited-from",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"geoCircleCache",id:"geocirclecache",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"geoPointCache",id:"geopointcache",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"handleInvalidInterceptCache",id:"handleinvalidinterceptcache",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"includeInitialTurn",id:"includeinitialturn",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"interceptBuilder",id:"interceptbuilder",level:3},{value:"Defined in",id:"defined-in-7",level:4},{value:"interceptInfo",id:"interceptinfo",level:3},{value:"Defined in",id:"defined-in-8",level:4},{value:"intersectionCache",id:"intersectioncache",level:3},{value:"Defined in",id:"defined-in-9",level:4},{value:"skipWhenActive",id:"skipwhenactive",level:3},{value:"Inherited from",id:"inherited-from-1",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"turnBuilder",id:"turnbuilder",level:3},{value:"Defined in",id:"defined-in-11",level:4},{value:"vec3Cache",id:"vec3cache",level:3},{value:"Defined in",id:"defined-in-12",level:4},{value:"Methods",id:"methods",level:2},{value:"calculate",id:"calculate",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns",level:4},{value:"Inherited from",id:"inherited-from-2",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"calculateFallbackIntercept",id:"calculatefallbackintercept",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"calculateMagVar",id:"calculatemagvar",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Inherited from",id:"inherited-from-3",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"calculateVectors",id:"calculatevectors",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"getInterceptCourse",id:"getinterceptcourse",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"getInterceptPathInfo",id:"getinterceptpathinfo",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"getLegMagVar",id:"getlegmagvar",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Inherited from",id:"inherited-from-4",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"getLegTrueCourse",id:"getlegtruecourse",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Inherited from",id:"inherited-from-5",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"getPositionFromIcao",id:"getpositionfromicao",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Inherited from",id:"inherited-from-6",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"getTerminatorPosition",id:"getterminatorposition",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Inherited from",id:"inherited-from-7",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"resolveIngressToEgress",id:"resolveingresstoegress",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Inherited from",id:"inherited-from-8",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"shouldSkipWhenActive",id:"shouldskipwhenactive",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Inherited from",id:"inherited-from-9",level:4},{value:"Defined in",id:"defined-in-24",level:4}],s={toc:p},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules/"},"index"),".CircleInterceptLegCalculator"),(0,r.kt)("p",null,"Calculates flight path vectors for legs which define a great-circle path terminating at an intercept with another\ngeo circle."),(0,r.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},(0,r.kt)("inlineCode",{parentName:"a"},"AbstractFlightPathLegCalculator"))),(0,r.kt)("p",{parentName:"li"},"\u21b3 ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"CircleInterceptLegCalculator"))),(0,r.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.CourseToDmeLegCalculator"},(0,r.kt)("inlineCode",{parentName:"a"},"CourseToDmeLegCalculator"))),(0,r.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.CourseToRadialLegCalculator"},(0,r.kt)("inlineCode",{parentName:"a"},"CourseToRadialLegCalculator"))),(0,r.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.CourseToInterceptLegCalculator"},(0,r.kt)("inlineCode",{parentName:"a"},"CourseToInterceptLegCalculator"))))),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"constructor"},"constructor"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"new CircleInterceptLegCalculator"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"facilityCache"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"includeInitialTurn"),")"),(0,r.kt)("p",null,"Constructor."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"facilityCache")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Map"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.Facility"},(0,r.kt)("inlineCode",{parentName:"a"},"Facility")),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"This calculator's cache of facilities.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"includeInitialTurn")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether this calculator should calculate an initial turn toward the intercept course.")))),(0,r.kt)("h4",{id:"overrides"},"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#constructor"},"constructor")),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:609"),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"directtopointbuilder"},"directToPointBuilder"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"directToPointBuilder"),": ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.DirectToPointBuilder"},(0,r.kt)("inlineCode",{parentName:"a"},"DirectToPointBuilder"))),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:595"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"facilitycache"},"facilityCache"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"facilityCache"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Map"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.Facility"},(0,r.kt)("inlineCode",{parentName:"a"},"Facility")),">"),(0,r.kt)("p",null,"This calculator's cache of facilities."),(0,r.kt)("h4",{id:"inherited-from"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#facilitycache"},"facilityCache")),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:43"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"geocirclecache"},"geoCircleCache"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"geoCircleCache"),": ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoCircle"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoCircle")),"[]"),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:591"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"geopointcache"},"geoPointCache"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"geoPointCache"),": ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint")),"[]"),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:590"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"handleinvalidinterceptcache"},"handleInvalidInterceptCache"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"handleInvalidInterceptCache"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"geoCircle")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoCircle"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoCircle")),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"intersection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"vec3")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),"[]")))),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:785"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"includeinitialturn"},"includeInitialTurn"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"includeInitialTurn"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Whether this calculator should calculate an initial turn toward the intercept course."),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:609"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"interceptbuilder"},"interceptBuilder"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"interceptBuilder"),": ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.CircleInterceptBuilder"},(0,r.kt)("inlineCode",{parentName:"a"},"CircleInterceptBuilder"))),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:596"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"interceptinfo"},"interceptInfo"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"interceptInfo"),": ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules/#circleinterceptpathinfo"},(0,r.kt)("inlineCode",{parentName:"a"},"CircleInterceptPathInfo"))),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:598"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"intersectioncache"},"intersectionCache"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"intersectionCache"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),"[]"),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:592"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"skipwhenactive"},"skipWhenActive"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"skipWhenActive"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("p",null,"Whether this calculator will skip calculations for active legs when the leg has already\nbeen calculated. False by default."),(0,r.kt)("h4",{id:"inherited-from-1"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#skipwhenactive"},"skipWhenActive")),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:43"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"turnbuilder"},"turnBuilder"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"turnBuilder"),": ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.TurnToCourseBuilder"},(0,r.kt)("inlineCode",{parentName:"a"},"TurnToCourseBuilder"))),(0,r.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:594"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"vec3cache"},"vec3Cache"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.kt)("strong",{parentName:"p"},"vec3Cache"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array"),"[]"),(0,r.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:589"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"calculate"},"calculate"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"calculate"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"legs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"calculateIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"activeLegIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"resolveIngressToEgress?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegCalculations"},(0,r.kt)("inlineCode",{parentName:"a"},"LegCalculations"))),(0,r.kt)("p",null,"Calculates flight path vectors for a flight plan leg and adds the calculations to the leg."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"legs")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegDefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"LegDefinition")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A sequence of flight plan legs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"calculateIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the leg to calculate.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"activeLegIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the active leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPathState"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPathState"))),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current flight path state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"resolveIngressToEgress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegCalculations"},(0,r.kt)("inlineCode",{parentName:"a"},"LegCalculations"))),(0,r.kt)("p",null,"The flight plan leg calculations."),(0,r.kt)("h4",{id:"inherited-from-2"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#calculate"},"calculate")),(0,r.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:109"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"calculatefallbackintercept"},"calculateFallbackIntercept"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,r.kt)("strong",{parentName:"p"},"calculateFallbackIntercept"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"interceptPath"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pathToInterceptCircle"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pathToInterceptStart"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pathToInterceptEnd"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pathToInterceptAngularWidth"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onlyHandleInitialPointPastIntercept"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"forceFallback"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"out"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array")),(0,r.kt)("p",null,"Checks if a path to intercept cannot be intercepted from a defined starting point and intercept course, and\ncalculates a fallback intercept point if so."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"start")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"'),">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The start point.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"interceptPath")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoCircle"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The great-circle path defining the intercept course.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"pathToInterceptCircle")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoCircle"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoCircle"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The geo circle defining the path to intercept.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"pathToInterceptStart")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"'),">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The start of the path to intercept.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"pathToInterceptEnd")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"Readonly"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Omit"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"set"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"copyWithin"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"sort"'),">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The end of the path to intercept.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"pathToInterceptAngularWidth")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The angular width of the path to intercept, in radians.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"onlyHandleInitialPointPastIntercept")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether to only handle cases where the start point is located beyond the path to intercept as measured along the intercept course.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"forceFallback")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Whether to treat the case where the path to intercept can be intercepted from the starting point and intercept course as a fallback case. If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the natural intercept point will be returned as the fallback intercept point.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"out")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Float64Array")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The vector to which to write the result.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Float64Array")),(0,r.kt)("p",null,"The fallback intercept point, or ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," if a fallback is not necessary."),(0,r.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:808"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"calculatemagvar"},"calculateMagVar"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Abstract")," ",(0,r.kt)("strong",{parentName:"p"},"calculateMagVar"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"legs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"calculateIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"activeLegIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Calculates the magnetic variation for a flight plan leg."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"legs")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegDefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"LegDefinition")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A sequence of flight plan legs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"calculateIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the leg to calculate.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"activeLegIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the active leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPathState"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPathState"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current flight path state.")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"The number of vectors added to the sequence."),(0,r.kt)("h4",{id:"inherited-from-3"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#calculatemagvar"},"calculateMagVar")),(0,r.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:191"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"calculatevectors"},"calculateVectors"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"calculateVectors"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"legs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"calculateIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"activeLegIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Calculates flight path vectors for a flight plan leg."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"legs")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegDefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"LegDefinition")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A sequence of flight plan legs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"calculateIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the leg to calculate.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"activeLegIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the active leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPathState"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPathState"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current flight path state.")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"The number of vectors added to the sequence."),(0,r.kt)("h4",{id:"overrides-1"},"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#calculatevectors"},"calculateVectors")),(0,r.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:614"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getinterceptcourse"},"getInterceptCourse"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Abstract")," ",(0,r.kt)("strong",{parentName:"p"},"getInterceptCourse"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"legs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the true intercept course bearing defined by a flight plan leg."),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"legs")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegDefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"LegDefinition")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A sequence of leg definitions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"index")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index in the sequence of the leg from which to get the course.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPathState"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPathState"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current flight path state.")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The true intercept course bearing defined by the flight plan leg, or undefined if it could not be\ndetermined."),(0,r.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:950"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getinterceptpathinfo"},"getInterceptPathInfo"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Abstract")," ",(0,r.kt)("strong",{parentName:"p"},"getInterceptPathInfo"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"legs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"out"),"): ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules/#circleinterceptpathinfo"},(0,r.kt)("inlineCode",{parentName:"a"},"CircleInterceptPathInfo"))),(0,r.kt)("p",null,"Gets the geo circle path to intercept defined by a flight plan leg."),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"legs")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegDefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"LegDefinition")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A sequence of leg definitions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"index")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index in the sequence of the leg from which to get the course.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPathState"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPathState"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current flight path state.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"out")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/modules/#circleinterceptpathinfo"},(0,r.kt)("inlineCode",{parentName:"a"},"CircleInterceptPathInfo"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The path info object to which to write the result.")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/modules/#circleinterceptpathinfo"},(0,r.kt)("inlineCode",{parentName:"a"},"CircleInterceptPathInfo"))),(0,r.kt)("p",null,"Information on the geo circle path to intercept defined by the flight plan leg."),(0,r.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:960"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getlegmagvar"},"getLegMagVar"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"getLegMagVar"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"leg"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"point"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the magnetic variation, in degrees, to use when calculating a flight plan leg's course. If the leg defines\nan origin or fix VOR facility, then the magnetic variation defined at the VOR is used. Otherwise the computed\nmagnetic variation for the specified point is used."),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"leg")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPlanLeg"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPlanLeg"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A flight plan leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"point")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LatLonInterface"},(0,r.kt)("inlineCode",{parentName:"a"},"LatLonInterface"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The location from which to get magnetic variation, if an origin VOR is not found.")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The magnetic variation, in degrees, to use when calculating the specified flight plan leg's course."),(0,r.kt)("h4",{id:"inherited-from-4"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#getlegmagvar"},"getLegMagVar")),(0,r.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:81"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getlegtruecourse"},"getLegTrueCourse"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"getLegTrueCourse"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"leg"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"point"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"Gets the true course, in degrees, for a flight plan leg. If the leg defines an origin or fix VOR facility, then\nthe magnetic variation defined at the VOR is used to adjust magnetic course. Otherwise the computed magnetic\nvariation for the specified point is used."),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"leg")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPlanLeg"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPlanLeg"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A flight plan leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"point")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LatLonInterface"},(0,r.kt)("inlineCode",{parentName:"a"},"LatLonInterface"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The location from which to get magnetic variation, if an origin VOR is not found.")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("p",null,"The true course, in degrees, for the flight plan leg."),(0,r.kt)("h4",{id:"inherited-from-5"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#getlegtruecourse"},"getLegTrueCourse")),(0,r.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:100"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getpositionfromicao"},"getPositionFromIcao"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"getPositionFromIcao"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"icao"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"out"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("p",null,"Gets a geographical position from an ICAO string."),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"icao")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"An ICAO string.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"out")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A GeoPoint object to which to write the result.")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("p",null,"The geographical position corresponding to the ICAO string, or undefined if one could not be obtained."),(0,r.kt)("h4",{id:"inherited-from-6"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#getpositionfromicao"},"getPositionFromIcao")),(0,r.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:52"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getterminatorposition"},"getTerminatorPosition"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"getTerminatorPosition"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"leg"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"icao"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"out"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("p",null,"Gets the geographic position for a flight plan leg terminator."),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"leg")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPlanLeg"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPlanLeg"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A flight plan leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"icao")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ICAO string of the leg's terminator fix.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"out")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"A GeoPoint object to which to write the result.")))),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," ","|"," ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.GeoPoint"},(0,r.kt)("inlineCode",{parentName:"a"},"GeoPoint"))),(0,r.kt)("p",null,"The position of the leg terminator, or undefined if it could not be determined."),(0,r.kt)("h4",{id:"inherited-from-7"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#getterminatorposition"},"getTerminatorPosition")),(0,r.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:64"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"resolveingresstoegress"},"resolveIngressToEgress"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"resolveIngressToEgress"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"legCalc"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Calculates the ingress to egress vectors for a flight plan leg and adds them to a leg calculation."),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"legCalc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegCalculations"},(0,r.kt)("inlineCode",{parentName:"a"},"LegCalculations"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The calculations for a flight plan leg.")))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"inherited-from-8"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#resolveingresstoegress"},"resolveIngressToEgress")),(0,r.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:207"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"shouldskipwhenactive"},"shouldSkipWhenActive"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,r.kt)("strong",{parentName:"p"},"shouldSkipWhenActive"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"legs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"calculateIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"activeLegIndex"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Checks whether vector calculations should be skipped when the leg to calculate is the active leg."),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"legs")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.LegDefinition"},(0,r.kt)("inlineCode",{parentName:"a"},"LegDefinition")),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A sequence of flight plan legs.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"calculateIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the leg to calculate.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"activeLegIndex")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The index of the active leg.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/interfaces/index.FlightPathState"},(0,r.kt)("inlineCode",{parentName:"a"},"FlightPathState"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current flight path state.")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Whether to skip vector calculations."),(0,r.kt)("h4",{id:"inherited-from-9"},"Inherited from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator"},"AbstractFlightPathLegCalculator"),".",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/index.AbstractFlightPathLegCalculator#shouldskipwhenactive"},"shouldSkipWhenActive")),(0,r.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,r.kt)("p",null,"src/sdk/flightplan/FlightPathLegCalculator.ts:178"))}c.isMDXComponent=!0}}]);