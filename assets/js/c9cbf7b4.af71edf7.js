"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[60506],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},23123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_label:"panel.xml Basics",sidebar_position:2},o="G1000 `panel.xml` Basics",l={unversionedId:"g1000/panel-xml-basics",id:"g1000/panel-xml-basics",title:"G1000 `panel.xml` Basics",description:"Introduction",source:"@site/docs/g1000/panel-xml-basics.md",sourceDirName:"g1000",slug:"/g1000/panel-xml-basics",permalink:"/msfs-avionics-mirror/docs/g1000/panel-xml-basics",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"panel.xml Basics",sidebar_position:2},sidebar:"sidebar",previous:{title:"Overview",permalink:"/msfs-avionics-mirror/docs/g1000/overview"},next:{title:"panel.xml Tag Documentation",permalink:"/msfs-avionics-mirror/docs/g1000/panel-xml-tag-documentation"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"File Structure",id:"file-structure",level:2},{value:"Tag Scope",id:"tag-scope",level:2},{value:"Required vs. Optional Tags",id:"required-vs-optional-tags",level:2},{value:"Redundant Tags",id:"redundant-tags",level:2},{value:"Numeric Tags and Operators",id:"numeric-tags-and-operators",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"g1000-panelxml-basics"},"G1000 ",(0,r.kt)("inlineCode",{parentName:"h1"},"panel.xml")," Basics"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"panel.xml")," file allows developers to configure their aircraft-specific G1000 installation. A basic understanding of the XML language is recommended when working with ",(0,r.kt)("inlineCode",{parentName:"p"},"panel.xml"),". For a general introduction to ",(0,r.kt)("inlineCode",{parentName:"p"},"panel.xml"),", see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.flightsimulator.com/html/Content_Configuration/SimObjects/Aircraft_SimO/Instruments/panel_xml.htm"},"the main MSFS developer documentation"),"."),(0,r.kt)("h2",{id:"file-structure"},"File Structure"),(0,r.kt)("p",null,"Below is an example of a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"panel.xml")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<PlaneHTMLConfig>\n\n  <Instrument>\n    <Name>AS1000_PFD</Name>\n  </Instrument>\n\n  <Instrument>\n    <Name>AS1000_MFD</Name>\n  </Instrument>\n\n</PlaneHTMLConfig>\n")),(0,r.kt)("p",null,"The file contains the root tag ",(0,r.kt)("inlineCode",{parentName:"p"},"<PlaneHTMLConfig>")," under which all other tags must be placed. There is one ",(0,r.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag for each JS/HTML instrument in the plane. The ",(0,r.kt)("inlineCode",{parentName:"p"},"<Name>")," tag identifies the specific instrument referenced by its parent ",(0,r.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag. In this example, there are two declared instruments: one PFD and one MFD."),(0,r.kt)("h2",{id:"tag-scope"},"Tag Scope"),(0,r.kt)("p",null,"Each tag parsed by the G1000 has a required ",(0,r.kt)("strong",{parentName:"p"},"scope"),", defined as the parent under which it must be placed. If a tag is placed in an incorrect scope, it may not be parsed at all or it may be interpreted as a different type of tag with the same name. Therefore, it is important to ensure that all tags are defined in the correct scope."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/g1000/panel-xml-tag-documentation"},"tags documentation"),' details the scope of each tag. When the scope is listed as "Global", this means the tag should be placed directly under the root ',(0,r.kt)("inlineCode",{parentName:"p"},"<PlaneHTMLConfig>"),' tag. When the scope is listed as "PFD" or "MFD", this means the tag should be placed directly under the PFD or MFD ',(0,r.kt)("inlineCode",{parentName:"p"},"<Instrument>")," tag, respectively."),(0,r.kt)("h2",{id:"required-vs-optional-tags"},"Required vs. Optional Tags"),(0,r.kt)("p",null,"Tags and attributes can either be required or optional. Required tags/attributes must be explicitly defined for ",(0,r.kt)("inlineCode",{parentName:"p"},"panel.xml")," to be successfully parsed. If a required tag/attribute is missing, the G1000 will throw a Javascript error during initialization with a message describing what was missing. Optional tags/attributes do not have to be explicitly defined, and omitting these will have no adverse effects. When an optional tag/attribute is omitted, the option it defines will revert to a default value."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/g1000/panel-xml-tag-documentation"},"tags documentation")," details which tags and attributes are required and which are optional, as well as the default values for optional tags/attributes."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If the G1000 detects that an optional attribute or tag was not formatted correctly (e.g. a mis-spelled option, an out-of-bounds numeral, etc), it will emit a console warning and revert the option to its default value. Therefore, during development it is recommended that you monitor the console output of all instruments to ensure that ",(0,r.kt)("inlineCode",{parentName:"p"},"panel.xml")," is being parsed cleanly.")),(0,r.kt)("h2",{id:"redundant-tags"},"Redundant Tags"),(0,r.kt)("p",null,"When you define multiple copies of a tag that is meant to be a singleton, only the first instance of the tag (in tree order) will apply. Take the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<AirspeedIndicator>\n  <Scale min="20" max="999" window="60" major-tick-interval="10" minor-tick-factor="2" />\n</AirspeedIndicator>\n\n<AirspeedIndicator>\n  <Scale min="20" max="999" window="60" major-tick-interval="20" minor-tick-factor="2" />\n</AirspeedIndicator>\n')),(0,r.kt)("p",null,"Of the two ",(0,r.kt)("inlineCode",{parentName:"p"},"<AirspeedIndicator>")," tags defined, only the top one will apply. As a result, the PFD will have an airspeed indicator with major ticks at 10 knot intervals instead of 20 knot intervals."),(0,r.kt)("h2",{id:"numeric-tags-and-operators"},"Numeric Tags and Operators"),(0,r.kt)("p",null,"Certain G1000-specific tags define numeric values. One such tag is the generic ",(0,r.kt)("inlineCode",{parentName:"p"},"<Number>"),", which is a numeric tag that returns a constant value equal to its content (for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"<Number>0</Number>")," returns a value of zero). Other numeric tags may return values with more complicated logic."),(0,r.kt)("p",null,"Numeric tags can be used together with numeric operator tags to generate computed numeric values. Each numeric operator tag accepts one or more numeric tags as children (the operands) and outputs the result of the operation as a new numeric value. Numeric operators also are considered numeric tags, so they can be used as operands of other numeric operator tags."),(0,r.kt)("p",null,"The available numeric operator tags are:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operator"),(0,r.kt)("th",{parentName:"tr",align:null},"Operand Count"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<Min>")),(0,r.kt)("td",{parentName:"tr",align:null},"One or More"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the minimum value among all operands.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<Max>")),(0,r.kt)("td",{parentName:"tr",align:null},"One or More"),(0,r.kt)("td",{parentName:"tr",align:null},"Returns the maximum value among all operands.")))),(0,r.kt)("p",null,"The following are examples of numeric operator usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- Always returns 0 --\x3e\n<Min>\n  <Number>0</Number>\n  <Number>5</Number>\n  <Number>10</Number>\n</Min>\n\n\x3c!-- Always returns 100 --\x3e\n<Max>\n  <Number>10</Number>\n  <Min>\n    <Number>100</Number>\n    <Number>1000</Number>\n  </Min>\n</Max>\n")))}m.isMDXComponent=!0}}]);