"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[76416],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=i.createContext({}),p=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(o.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=p(t),c=a,g=d["".concat(o,".").concat(c)]||d[c]||m[c]||s;return t?i.createElement(g,l(l({ref:n},u),{},{components:t})):i.createElement(g,l({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=c;var r={};for(var o in n)hasOwnProperty.call(n,o)&&(r[o]=n[o]);r.originalType=e,r[d]="string"==typeof e?e:a,l[1]=r;for(var p=2;p<s;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},67907:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var i=t(87462),a=(t(67294),t(3905));const s={sidebar_label:"Adding Plugin Support",sidebar_position:2},l="Adding Plugin Support For Your Instrument",r={unversionedId:"plugins/adding-plugin-support",id:"plugins/adding-plugin-support",title:"Adding Plugin Support For Your Instrument",description:"The Plugin API is included as part of the MSFS SDK library (@microsoft/msfs-sdk). In order to use the API, the first step is to make sure your instrument imports @microsoft/msfs-sdk. Once the library is imported, you can start using the Plugin API classes.",source:"@site/docs/plugins/adding-plugin-support.md",sourceDirName:"plugins",slug:"/plugins/adding-plugin-support",permalink:"/msfs-avionics-mirror/docs/plugins/adding-plugin-support",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Adding Plugin Support",sidebar_position:2},sidebar:"sidebar",previous:{title:"Overview",permalink:"/msfs-avionics-mirror/docs/plugins/overview"},next:{title:"Creating Plugins",permalink:"/msfs-avionics-mirror/docs/plugins/creating-plugins"}},o={},p=[{value:"Plugin API Basics",id:"plugin-api-basics",level:2},{value:"Setting Up <code>PluginSystem</code>",id:"setting-up-pluginsystem",level:2},{value:"Passing Data to Plugins",id:"passing-data-to-plugins",level:2},{value:"Calling Methods on Plugins",id:"calling-methods-on-plugins",level:2},{value:"Retrieving Data from Plugins",id:"retrieving-data-from-plugins",level:2},{value:"Handling Plugins for Multi-Instrument Avionics Systems",id:"handling-plugins-for-multi-instrument-avionics-systems",level:2}],u={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adding-plugin-support-for-your-instrument"},"Adding Plugin Support For Your Instrument"),(0,a.kt)("p",null,"The Plugin API is included as part of the MSFS SDK library (",(0,a.kt)("inlineCode",{parentName:"p"},"@microsoft/msfs-sdk"),"). In order to use the API, the first step is to make sure your instrument imports ",(0,a.kt)("inlineCode",{parentName:"p"},"@microsoft/msfs-sdk"),". Once the library is imported, you can start using the Plugin API classes."),(0,a.kt)("h2",{id:"plugin-api-basics"},"Plugin API Basics"),(0,a.kt)("p",null,"The core of the Plugin API consists of two classes: ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin"),". The former is responsible for loading and managing plugins for an instrument, while the latter is an abstract class that is extended to create individual plugins."),(0,a.kt)("p",null,"The basic process by which plugins are handled by an instrument is outlined below:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The instrument creates an instance of ",(0,a.kt)("inlineCode",{parentName:"li"},"PluginSystem"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PluginSystem")," is used to load plugins. When a plugin is loaded, it is instantiated as a subclass of ",(0,a.kt)("inlineCode",{parentName:"li"},"AvionicsPlugin")," and optionally data is passed from the instrument to the plugin."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"PluginSystem")," is used to call methods on the loaded plugins to execute plugin-specific functions and/or retrieve data from plugins.")),(0,a.kt)("h2",{id:"setting-up-pluginsystem"},"Setting Up ",(0,a.kt)("inlineCode",{parentName:"h2"},"PluginSystem")),(0,a.kt)("p",null,"The first step for any instrument looking to support plugins is to create an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem"),". This can be done at any time, but should typically be done during instrument initialization. The ",(0,a.kt)("inlineCode",{parentName:"p"},"connectedCallback()")," method of your instrument class is a good candidate:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AvionicsPlugin, PluginSystem } from '@microsoft/msfs-sdk';\n\nclass MyInstrument extends BaseInstrument {\n  // Don't worry about the type parameters for now; we'll get to those later.\n  private pluginSystem?: PluginSystem<AvionicsPlugin<void>, void>;\n\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    this.initPlugins();\n  }\n\n  public initPlugins(): void {\n    // Don't worry about the type parameters for now; we'll get to those later.\n    this.pluginSystem = new PluginSystem<AvionicsPlugin<void>, void>();\n  }\n\n  // ...\n}\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"There should be at most ",(0,a.kt)("strong",{parentName:"p"},"one")," instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem")," created per instrument.")),(0,a.kt)("p",null,"Once ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem")," is created, the next step is to load the plugins for your instrument. ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem")," makes this easy; all you have to do is call two methods while providing some basic information:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AvionicsPlugin, PluginSystem } from '@microsoft/msfs-sdk';\n\nclass MyInstrument extends BaseInstrument {\n  // Don't worry about the type parameters for now; we'll get to those later.\n  private pluginSystem?: PluginSystem<AvionicsPlugin<void>, void>;\n\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    this.initPlugins();\n  }\n\n  public async initPlugins(): Promise<void> {\n    this.pluginSystem = new PluginSystem<AvionicsPlugin<void>, void>();\n\n    await this.pluginSystem.addScripts(this.xmlConfig, this.templateID, (target: string) => false);\n    await this.pluginSystem.startSystem();\n  }\n\n  // ...\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"addScripts()")," method prepares a list of plugins to load from Javascript (.js) files. It takes in three arguments: (1) the XML document object generated for the airplane's ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml")," (available as the ",(0,a.kt)("inlineCode",{parentName:"p"},"xmlConfig")," property on ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseInstrument")," after ",(0,a.kt)("inlineCode",{parentName:"p"},"connectedCallback()")," is called), (2) the ID of the instrument, which is defined by the ",(0,a.kt)("inlineCode",{parentName:"p"},"templateID")," getter on ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseInstrument")," with an optional index suffix if one is defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.cfg"),", and (3) a function that filters ",(0,a.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/plugins/overview#global-vs-airplane-plugins"},"global plugins")," based on their declared ",(0,a.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/plugins/creating-plugins#loading-global-plugins"},"targets"),"."),(0,a.kt)("p",null,"Once ",(0,a.kt)("inlineCode",{parentName:"p"},"addScripts()")," is called, calling ",(0,a.kt)("inlineCode",{parentName:"p"},"startSystem()")," will cause the system to load and instantiate the plugins."),(0,a.kt)("p",null,"Note that ",(0,a.kt)("inlineCode",{parentName:"p"},"initPlugins()")," in the above example was turned into an ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," method so that we could ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," the calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"addScripts()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"startSystem()"),". This is important. Both methods are asynchronous and must be called in order. Calling ",(0,a.kt)("inlineCode",{parentName:"p"},"startSystem()")," before ",(0,a.kt)("inlineCode",{parentName:"p"},"addScripts()")," is finished executing will cause some or all plugins to not be loaded correctly."),(0,a.kt)("h2",{id:"passing-data-to-plugins"},"Passing Data to Plugins"),(0,a.kt)("p",null,"You will often want to provide plugins with certain data or references to objects in order to allow them to interact properly with your instrument. For example, if you use ",(0,a.kt)("inlineCode",{parentName:"p"},"EventBus")," in your instrument, it's generally a good idea to provide plugins a reference to the instrument's ",(0,a.kt)("inlineCode",{parentName:"p"},"EventBus")," instance to allow communication between the instrument and plugins. You can pass any arbitrary data from the instrument to plugins using a ",(0,a.kt)("em",{parentName:"p"},"binder"),". A binder is just an object with an interface that both the instrument and the plugins have agreed upon in advance. The binder is created on the instrument, then passed to the plugins when they are instantiated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AvionicsPlugin, PluginSystem } from '@microsoft/msfs-sdk';\n\nexport interface MyPluginBinder {\n  readonly bus: EventBus;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private readonly bus = new EventBus();\n\n  private pluginSystem?: PluginSystem<AvionicsPlugin<MyPluginBinder>, MyPluginBinder>;\n\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    this.initPlugins();\n  }\n\n  public async initPlugins(): Promise<void> {\n    this.pluginSystem = new PluginSystem<AvionicsPlugin<MyPluginBinder>, MyPluginBinder>();\n\n    await this.pluginSystem.addScripts(this.xmlConfig, this.templateID, (target: string) => false);\n    await this.pluginSystem.startSystem({ bus: this.bus });\n  }\n\n  // ...\n}\n")),(0,a.kt)("p",null,"In the example, we have declared the binder interface ",(0,a.kt)("inlineCode",{parentName:"p"},"MyPluginBinder"),". We also specify that our ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem")," uses binders that implement ",(0,a.kt)("inlineCode",{parentName:"p"},"MyPluginBinder")," by including ",(0,a.kt)("inlineCode",{parentName:"p"},"MyPluginBinder")," as the second type parameter on our instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"MyPluginBinder")," is also used as the type parameter on ",(0,a.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin"),", which declares that all plugins loaded by this instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem")," should expect a binder that implements ",(0,a.kt)("inlineCode",{parentName:"p"},"MyPluginBinder"),". Now all loaded plugins will be able to access a reference to the instrument's ",(0,a.kt)("inlineCode",{parentName:"p"},"EventBus")," instance via the binder."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Because the binder is just a regular object, it can be mutated like any other object. In almost all cases, this would not be desired behavior. Declaring all properties on the binder interface as ",(0,a.kt)("inlineCode",{parentName:"p"},"readonly")," signals to everyone involved that they should not mutate the binder.")),(0,a.kt)("h2",{id:"calling-methods-on-plugins"},"Calling Methods on Plugins"),(0,a.kt)("p",null,"When you want your instrument to execute certain plugin-specific code, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem")," to call methods on plugins that it has loaded. However, the ",(0,a.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin")," class does not by itself declare any methods that are callable by ",(0,a.kt)("inlineCode",{parentName:"p"},"PluginSystem")," (it defines several publically accessible methods, but they are for internal use only). Therefore, if your instrument requires that plugins implement certain methods, you must declare your own plugin interface that extends ",(0,a.kt)("inlineCode",{parentName:"p"},"AvionicsPlugin"),"."),(0,a.kt)("p",null,"For example, the following code defines a plugin interface that requires an ",(0,a.kt)("inlineCode",{parentName:"p"},"onUpdate()")," method that is called whenever the instrument is updated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AvionicsPlugin, PluginSystem } from '@microsoft/msfs-sdk';\n\nexport interface MyPlugin extends AvionicsPlugin<void> {\n  /**\n   * Called when the instrument is updated.\n   * @param currentTime The current operating system timestamp.\n   */\n  onUpdate(currentTime: number): void;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private pluginSystem?: PluginSystem<MyPlugin, void>;\n\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    this.initPlugins();\n  }\n\n  public async initPlugins(): Promise<void> {\n    this.pluginSystem = new PluginSystem<MyPlugin, void>();\n\n    await this.pluginSystem.addScripts(this.xmlConfig, this.templateID, (target: string) => false);\n    await this.pluginSystem.startSystem();\n  }\n\n  public Update(): void {\n    super.Update();\n\n    const time = Date.now();\n\n    this.pluginSystem!.callPlugins((plugin: MyPlugin) => {\n      plugin.onUpdate(time);\n    });\n  }\n\n  // ...\n}\n")),(0,a.kt)("p",null,"In the example, ",(0,a.kt)("inlineCode",{parentName:"p"},"callPlugins()")," is used to call the ",(0,a.kt)("inlineCode",{parentName:"p"},"onUpdate()")," method on plugins. The callback function passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"callPlugins()")," is executed once for every loaded plugin. You may have noticed that there are no checks to see if the asynchronous ",(0,a.kt)("inlineCode",{parentName:"p"},"addScripts()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"startSystem()")," have finished executing before we attempt to call ",(0,a.kt)("inlineCode",{parentName:"p"},"onUpdate()"),". This is because ",(0,a.kt)("inlineCode",{parentName:"p"},"callPlugins()")," simply iterates over all loaded plugins; if a plugin has not finished loaded it will not be enumerated by ",(0,a.kt)("inlineCode",{parentName:"p"},"callPlugins()"),". In the case of an update callback, there is little harm in simply not triggering the callback until the plugin has loaded. However, for other use cases where you need the plugins to ",(0,a.kt)("em",{parentName:"p"},"exist")," before executing a method, you will need to ensure ",(0,a.kt)("inlineCode",{parentName:"p"},"startSystem()")," has finished loading plugins before using ",(0,a.kt)("inlineCode",{parentName:"p"},"callPlugins()"),"."),(0,a.kt)("h2",{id:"retrieving-data-from-plugins"},"Retrieving Data from Plugins"),(0,a.kt)("p",null,"If your instrument needs to retrieve data from plugins, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"callPlugins()")," to call methods on plugins that return data. For example, the following code delegates the rendering of a specific display component to plugins:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AvionicsPlugin, PluginSystem } from '@microsoft/msfs-sdk';\n\nexport interface MyPlugin extends AvionicsPlugin<void> {\n  /**\n   * Renders a component.\n   * @returns The rendered component, or null if this plugin does not support rendering the component.\n   */\n  renderComponent(): VNode | null;\n}\n\nclass MyInstrument extends BaseInstrument {\n  private pluginSystem?: PluginSystem<MyPlugin, void>;\n\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    this.initPlugins();\n  }\n\n  public async initPlugins(): Promise<void> {\n    this.pluginSystem = new PluginSystem<MyPlugin, void>();\n\n    await this.pluginSystem.addScripts(this.xmlConfig, this.templateID, (target: string) => false);\n    await this.pluginSystem.startSystem();\n\n    let pluginComponent: VNode | null = null;\n\n    // Call renderComponent() for each plugin until one of them returns a non-null value, then render that value into\n    // the instrument. If all plugins return null, then the component will not be rendered.\n    this.pluginSystem!.callPlugins((plugin: MyPlugin) => {\n      pluginComponent ??= plugin.renderComponent();\n    });\n\n    FSComponent.render(\n      (\n        <div>\n          {/* ... */}\n          {pluginComponent}\n          {/* ... */}\n        </div>\n      ),\n      this.instrument.getChildById('Electricity')\n    );\n  }\n\n  // ...\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"callPlugins()")," always executes its callback once for each loaded plugin. If you need only one copy of a particular piece of data and you don't have total control over how many plugins are loaded for your instrument (which will be true most of the time), remember to consider how to deal with potentially multiple plugins responding to your call for data.")),(0,a.kt)("h2",{id:"handling-plugins-for-multi-instrument-avionics-systems"},"Handling Plugins for Multi-Instrument Avionics Systems"),(0,a.kt)("p",null,"When creating an avionics system that has multiple instruments (e.g., PFD, MFD, CDU), keep in mind that plugins are loaded on a ",(0,a.kt)("em",{parentName:"p"},"per-instrument")," basis. This means that different instruments can end up loading different sets of plugins. You may also choose to specify different binder and plugin interfaces for different instruments."))}m.isMDXComponent=!0}}]);