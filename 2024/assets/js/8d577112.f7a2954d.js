"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["318350"],{787017:function(e,n,i){i.r(n),i.d(n,{metadata:()=>s,contentTitle:()=>d,default:()=>h,assets:()=>l,toc:()=>o,frontMatter:()=>r});var s=JSON.parse('{"id":"g3000/display-panes","title":"G3000 Display Panes","description":"Introduction","source":"@site/docs/g3000/display-panes.md","sourceDirName":"g3000","slug":"/g3000/display-panes","permalink":"/msfs-avionics-mirror/2024/docs/g3000/display-panes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_label":"Display Panes","sidebar_position":9},"sidebar":"sidebar","previous":{"title":"GTC Plugins","permalink":"/msfs-avionics-mirror/2024/docs/g3000/gtc-plugins"},"next":{"title":"GTC Framework","permalink":"/msfs-avionics-mirror/2024/docs/g3000/gtc-framework"}}'),t=i("785893"),a=i("250065");let r={sidebar_label:"Display Panes",sidebar_position:9},d="G3000 Display Panes",l={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Pane Basics",id:"pane-basics",level:2},{value:"Pane Dimensions",id:"pane-dimensions",level:2},{value:"Pane Views",id:"pane-views",level:2},{value:"Pane View Lifecycle Callbacks",id:"pane-view-lifecycle-callbacks",level:2},{value:"<code>onResume()</code>",id:"onresume",level:3},{value:"<code>onUpdate()</code>",id:"onupdate",level:3},{value:"<code>onResize()</code>",id:"onresize",level:3},{value:"<code>onPause()</code>",id:"onpause",level:3},{value:"Example",id:"example",level:3},{value:"Designated Pane Views",id:"designated-pane-views",level:2},{value:"Display Pane User Settings",id:"display-pane-user-settings",level:2},{value:"Controlling Panes",id:"controlling-panes",level:2},{value:"Controlling Pane Views",id:"controlling-pane-views",level:2},{value:"System Power-On Behavior",id:"system-power-on-behavior",level:2},{value:"Full Example of a Pane View",id:"full-example-of-a-pane-view",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"g3000-display-panes",children:"G3000 Display Panes"})}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Display panes"})," are window-like elements found on the G3000 MFD and PFDs that present various graphical and textual information, such as moving maps and systems synoptics, in a modular fashion. Each pane can display multiple ",(0,t.jsx)(n.strong,{children:"views"}),", though only one view can be visible at a time. Panes can also be hidden and resized. The user controls display panes through the touchscreen controllers (GTCs)."]}),"\n",(0,t.jsx)(n.h2,{id:"pane-basics",children:"Pane Basics"}),"\n",(0,t.jsxs)(n.p,{children:["Each MFD and PFD contains two display panes, for a total of six when the full set of two PFDs and one MFD is included in an installation. One display pane on each PFD is always reserved for the primary instruments display; this pane is always visible and cannot display any other view. The other display panes (up to four total) can be fully controlled by the user. Each display pane is referenced by a numeric index. The indexes are defined by the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/enumerations/DisplayPaneIndex",children:(0,t.jsx)(n.code,{children:"DisplayPaneIndex"})})," enum."]}),"\n",(0,t.jsx)(n.p,{children:"Panes can be either hidden, full-size or half-size. The controllable PFD pane is hidden when the PFD is in Full mode and half-size when the PFD is in Split mode (it is never full-size). Each of the two MFD panes can be in any of these three states depending whether the MFD is in Full mode or Half mode."}),"\n",(0,t.jsx)(n.h2,{id:"pane-dimensions",children:"Pane Dimensions"}),"\n",(0,t.jsx)(n.p,{children:"This table presents the dimensions of the various display panes, which may be helpful when laying out pane views:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pane"}),(0,t.jsx)(n.th,{children:"Size"}),(0,t.jsx)(n.th,{children:"Width (px)"}),(0,t.jsx)(n.th,{children:"Height (px)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PFD (instrument)"}),(0,t.jsx)(n.td,{children:"Full"}),(0,t.jsx)(n.td,{children:"1280"}),(0,t.jsx)(n.td,{children:"800"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PFD (instrument)"}),(0,t.jsx)(n.td,{children:"Half"}),(0,t.jsx)(n.td,{children:"768"}),(0,t.jsx)(n.td,{children:"800"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PFD (controllable)"}),(0,t.jsx)(n.td,{children:"Half"}),(0,t.jsx)(n.td,{children:"508"}),(0,t.jsx)(n.td,{children:"778"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"MFD"}),(0,t.jsx)(n.td,{children:"Full"}),(0,t.jsx)(n.td,{children:"995"}),(0,t.jsx)(n.td,{children:"748"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"MFD"}),(0,t.jsx)(n.td,{children:"Half"}),(0,t.jsx)(n.td,{children:"495"}),(0,t.jsx)(n.td,{children:"748"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["These dimensions only include the ",(0,t.jsx)(n.em,{children:"usable"})," space available to views in the pane, and exclude any pane headers or borders."]}),"\n",(0,t.jsx)(n.h2,{id:"pane-views",children:"Pane Views"}),"\n",(0,t.jsxs)(n.p,{children:["Each display pane displays one of many possible views at a time. Display pane views contain the bulk of the visual content of a pane. All display pane views are implemented as FS components that extend the abstract class ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/classes/DisplayPaneView",children:(0,t.jsx)(n.code,{children:"DisplayPaneView"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Views should define a title that will appear in the header of its parent pane. View titles can be defined as a simple string or a ",(0,t.jsx)(n.code,{children:"VNode"}),". No matter how a title is defined, its rendered form must fit within a single line in the pane header."]}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example of a simple pane view that has the title ",(0,t.jsx)(n.em,{children:"CURRENT TIME"})," but doesn't do much else:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { DisplayPaneView } from '@microsoft/msfs-wtg3000-common';\r\n\r\nexport class TimePaneView extends DisplayPaneView {\r\n  private readonly time = Subject.create('');\r\n\r\n  public onAfterRender(): void {\r\n    // Sets the title of the view.\r\n    this._title.set('CURRENT TIME');\r\n  }\r\n\r\n  public render(): VNode {\r\n    return (\r\n      <div>{this.time}</div>\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Each view must be registered with an appropriate display pane view factory before it can be displayed in a pane. Views are registered under specific keys. These keys are then used to reference views in an abstract manner. If multiple views are registered with the same factory under the same key, the most recent view to be registered will replace the older views. ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/plugin-basics",children:"Plugins"})," can register views using the ",(0,t.jsx)(n.code,{children:"registerDisplayPaneViews()"})," method available on ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/pfd-plugins#display-panes",children:"PFD"})," and ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/mfd-plugins#display-panes",children:"MFD"})," plugins."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/enumerations/DisplayPaneViewKeys",children:(0,t.jsx)(n.code,{children:"DisplayPaneViewKeys"})})," enum contains all display pane view keys defined and used by the base G3000."]})}),"\n",(0,t.jsxs)(n.p,{children:["We can register the ",(0,t.jsx)(n.code,{children:"TimePaneView"})," we created in the example above with the MFD using the following code (registering with the PFD would use similar code except with a PFD plugin):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { registerPlugin } from '@microsoft/msfs-sdk';\r\nimport { DisplayPaneViewFactory } from '@microsoft/msfs-wtg3000-common';\r\nimport { AbstractG3000MfdPlugin } from '@microsoft/msfs-wtg3000-mfd';\r\nimport { TimePaneView } from './TimePaneView';\r\n\r\nclass TimePaneViewPlugin extends AbstractG3000MfdPlugin {\r\n\r\n  public registerDisplayPaneViews(viewFactory: DisplayPaneViewFactory): void {\r\n    viewFactory.registerView(\r\n      'TimeExample',\r\n      index => <TimePaneView index={index} />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nregisterPlugin(TimePaneViewPlugin);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Views can be created as half-size-only views by setting their ",(0,t.jsx)(n.code,{children:"halfSizeOnly"})," prop to ",(0,t.jsx)(n.code,{children:"true"}),". These views can only be displayed in half-size panes. Attempting to display a half-size-only view in a full-size MFD pane will force the MFD into Half mode. If a half-size-only view is active in a half-size MFD pane, the user will not be able to switch the MFD to Full mode with that pane as the full-size pane."]}),"\n",(0,t.jsx)(n.h2,{id:"pane-view-lifecycle-callbacks",children:"Pane View Lifecycle Callbacks"}),"\n",(0,t.jsxs)(n.p,{children:["Each display pane view has access to four lifecycle callback methods defined in the ",(0,t.jsx)(n.code,{children:"DisplayPaneView"})," abstract class. By default, these methods do nothing, so a view must override them in order to provide its own functionality."]}),"\n",(0,t.jsx)(n.h3,{id:"onresume",children:(0,t.jsx)(n.code,{children:"onResume()"})}),"\n",(0,t.jsx)(n.p,{children:"This method is called when a view transitions from not visible to visible. This could be because it became the active view or because its parent pane exited the hidden state."}),"\n",(0,t.jsx)(n.p,{children:"The current size of the view's parent pane (full or half) and its dimensions are passed to the method as parameters."}),"\n",(0,t.jsxs)(n.p,{children:["All views are created as initially not visible. Therefore, ",(0,t.jsx)(n.code,{children:"onResume()"})," is guaranteed to be called before the first time the view becomes visible to the user."]}),"\n",(0,t.jsx)(n.h3,{id:"onupdate",children:(0,t.jsx)(n.code,{children:"onUpdate()"})}),"\n",(0,t.jsxs)(n.p,{children:["This method is called regularly whenever the view is visible (i.e. when it is active and its parent pane is not hidden). This makes it a good place from which to run updates that only need to occur when the user can ",(0,t.jsx)(n.em,{children:"see"})," the changes. The first call to ",(0,t.jsx)(n.code,{children:"onUpdate()"})," after a view becomes visible is guaranteed to come ",(0,t.jsx)(n.em,{children:"after"})," the call to ",(0,t.jsx)(n.code,{children:"onResume()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The frequency with which ",(0,t.jsx)(n.code,{children:"onUpdate()"})," is called is tied to the Javascript instrument's refresh rate (itself a function of the sim's framerate and the cockpit refresh rate setting). Addtionally, ",(0,t.jsx)(n.code,{children:"onUpdate()"})," is throttled when a display pane is half-size such that the two half-size panes on the same instrument will alternate updates with each instrument refresh cycle (pane A updates on cycle 1, pane B on cycle 2, pane A on cycle 3, and so on)."]}),"\n",(0,t.jsx)(n.h3,{id:"onresize",children:(0,t.jsx)(n.code,{children:"onResize()"})}),"\n",(0,t.jsx)(n.p,{children:"This method is called when the view's parent pane is resized while the view is visible. The new size of the view's parent pane (full or half) and its dimensions are passed to the method as parameters."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"onResize()"})," is not called when a view is not visible. Therefore, it is always recommended to also use the size information passed to the ",(0,t.jsx)(n.a,{href:"#onresume",children:(0,t.jsx)(n.code,{children:"onResume()"})})," method to update the view as necessary when it becomes visible."]})}),"\n",(0,t.jsx)(n.h3,{id:"onpause",children:(0,t.jsx)(n.code,{children:"onPause()"})}),"\n",(0,t.jsx)(n.p,{children:"This method is called when a view transitions from visible to not visible."}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsxs)(n.p,{children:["Building on our ",(0,t.jsx)(n.code,{children:"TimePaneView"})," example from above, we can use lifecycle methods to have the view display the current operating system time and dynamically adjust its font to be larger when the view's parent pane is full-size (unchanged code from the prior version has been elided):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { DisplayPaneSizeMode, DisplayPaneView } from '@microsoft/msfs-wtg3000-common';\r\n\r\nexport class TimePaneView extends DisplayPaneView {\r\n  private readonly style = ObjectSubject.create({\r\n    'font-size': '16px'\r\n  });\r\n\r\n  // ...\r\n\r\n  public onResume(size: DisplayPaneSizeMode): void {\r\n    this.updateFontSize(size);\r\n  }\r\n\r\n  public onResize(size: DisplayPaneSizeMode): void {\r\n    this.updateFontSize(size);\r\n  }\r\n\r\n  private updateFontSize(size: DisplayPaneSizeMode): void {\r\n    // Updates font size to take advantage of wider panes in full mode.\r\n    if (size === DisplayPaneSizeMode.Full) {\r\n      this.style.set('font-size', '24px');\r\n    } else {\r\n      this.style.set('font-size', '16px');\r\n    }\r\n  }\r\n\r\n  public onUpdate(time: number): void {\r\n    // Updates the displayed time string.\r\n    this.time.set(new Date(time).toUTCString())\r\n  }\r\n\r\n  public render(): VNode {\r\n    return (\r\n      <div style={this.style}>{this.time}</div>\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"designated-pane-views",children:"Designated Pane Views"}),"\n",(0,t.jsxs)(n.p,{children:["Each display pane has a set of what are known as ",(0,t.jsx)(n.strong,{children:"designated views"}),'. These views function as sort of the "default" active views for a pane. Of these designated views, one is the ',(0,t.jsx)(n.strong,{children:"primary designated view"})," and the others are ",(0,t.jsx)(n.strong,{children:"context-specific designated views"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The primary designated view for a pane is the view that is chosen to replace a closed view as the pane's active view when no other specific replacement view has been selected."}),"\n",(0,t.jsx)(n.p,{children:"Context-specific designated views function similarly to the primary designated view, except (as their name implies) only under specific contexts. For example, the designated weather view applies only when the user has selected the Weather button on the GTC MFD Home page. The primary designated view should always be equal to a context-specific designated view while its context is active. While its context is not active, a context-specific designated view typically retains its most recent value until its context becomes active again."}),"\n",(0,t.jsxs)(n.p,{children:["Designated pane views are typically selected by the user using the GTCs. Designated pane view logic is ",(0,t.jsx)(n.em,{children:"not"})," handled automatically and must be manually implemented by any GTC view that wishes to work with designated views. The ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000gtc/classes/GtcDesignatedPaneButton",children:(0,t.jsx)(n.code,{children:"GtcDesignatedPaneButton"})})," component is provided to facilitate creation of buttons that control designated pane views."]}),"\n",(0,t.jsx)(n.h2,{id:"display-pane-user-settings",children:"Display Pane User Settings"}),"\n",(0,t.jsx)(n.p,{children:"There are a number of user settings related to display panes. These can be accessed to retrieve information about display pane state, or in some instances, to control certain aspects of panes."}),"\n",(0,t.jsxs)(n.p,{children:["Display pane user settings are defined on a per-pane basis. The settings for all panes are included in the ",(0,t.jsx)(n.code,{children:"DisplayPaneAllUserSettingTypes"})," type. All setting names are suffixed with the index of the pane to which they apply. The setting names without the index suffixes are included in the ",(0,t.jsx)(n.code,{children:"DisplayPaneSettings"})," type. The static methods in the ",(0,t.jsx)(n.code,{children:"DisplayPanesUserSettings"})," utility class can be used to retrieve managers for either all pane settings or aliased settings (without the index suffix) for a specific pane."]}),"\n",(0,t.jsx)(n.p,{children:"Only a subset of display pane user settings are meant to be modified by code outside of the core display pane system. The rest are to be treated as read-only. The following table lists which ones are which."}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Setting Name (Aliased)"}),(0,t.jsx)(n.th,{children:"Modifiable"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"displayPaneVisible"})}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"displayPaneView"})}),(0,t.jsx)(n.td,{children:"Yes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"displayPaneDesignatedView"})}),(0,t.jsx)(n.td,{children:"Yes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"displayPaneDesignatedWeatherView"})}),(0,t.jsx)(n.td,{children:"Yes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"displayPaneController"})}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"displayPaneHalfSizeOnly"})}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"displayPaneMapPointerActive"})}),(0,t.jsx)(n.td,{children:"Yes"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"controlling-panes",children:"Controlling Panes"}),"\n",(0,t.jsxs)(n.p,{children:["Display panes can be controlled via a combination of user settings (see above) and commands sent over the event bus. Display pane event bus commands are defined by the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/DisplayPaneControlEvents",children:(0,t.jsx)(n.code,{children:"DisplayPaneControlEvents"})})," type. When publishing event bus commands, the ",(0,t.jsx)(n.code,{children:"sync"})," option must be set to ",(0,t.jsx)(n.code,{children:"true"}),", and the ",(0,t.jsx)(n.code,{children:"cached"})," option must be set to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Controlling the visibility and size of panes is accomplished by sending the ",(0,t.jsx)(n.code,{children:"toggle_pfd_split"})," and ",(0,t.jsx)(n.code,{children:"toggle_mfd_split"})," events. These events will toggle the PFD between Full and Split mode, and the MFD between Full and Half mode, respectively. You will generally not need to use these events since the logic is already handled by the base G3000 package."]}),"\n",(0,t.jsxs)(n.p,{children:["Controlling the active view displayed by a pane is accomplished by writing the key of the view to the appropriate pane-specific ",(0,t.jsx)(n.code,{children:"displayPaneView"})," user setting. Likewise, the ",(0,t.jsx)(n.code,{children:"displayPaneDesignatedView"})," and ",(0,t.jsx)(n.code,{children:"displayPaneDesignatedWeatherView"})," settings control the designated views for a pane."]}),"\n",(0,t.jsxs)(n.p,{children:["Controlling which GTC controls which pane is accomplished by sending the ",(0,t.jsx)(n.code,{children:"gtc_1_display_pane_select"}),", ",(0,t.jsx)(n.code,{children:"gtc_2_display_pane_select"}),", ",(0,t.jsx)(n.code,{children:"change_display_pane_select_left"}),", and ",(0,t.jsx)(n.code,{children:"change_display_pane_select_right"})," events. You will generally not need to use these events since the logic is already handled by the base G3000 package."]}),"\n",(0,t.jsx)(n.h2,{id:"controlling-pane-views",children:"Controlling Pane Views"}),"\n",(0,t.jsxs)(n.p,{children:["Commands can be sent to display pane views by publishing the ",(0,t.jsx)(n.code,{children:"display_pane_view_event"})," topic to the event bus. The topic should always be published with the ",(0,t.jsx)(n.code,{children:"sync"})," option set to ",(0,t.jsx)(n.code,{children:"true"})," and ",(0,t.jsx)(n.code,{children:"cached"})," option set to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"display_pane_view_event"})," topic requires a data packet in the form of an object that extends the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000common/interfaces/DisplayPaneViewEvent",children:(0,t.jsx)(n.code,{children:"DisplayPaneViewEvent"})})," interface. The data packet defines the index of the pane that is the target of the command. Only the ",(0,t.jsx)(n.em,{children:"active"})," view of the specified pane will receive the command. The data packet also defines an event type (an arbitrary string) and additional data specific to that event type."]}),"\n",(0,t.jsxs)(n.p,{children:["Display pane views can respond to commands via the ",(0,t.jsx)(n.code,{children:"onEvent()"})," callback method, which accepts the received command event as its only parameter. By default, the event passed into ",(0,t.jsx)(n.code,{children:"onEvent()"})," is typed such that it can have any arbitrary string as its event type and event data of type ",(0,t.jsx)(n.code,{children:"any"}),". You may optionally elect to narrow the event type accepted by ",(0,t.jsx)(n.code,{children:"onEvent()"})," using the second optional type parameter on ",(0,t.jsx)(n.code,{children:"DisplayPaneView"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["For an example of display pane view events in action, we can expand ",(0,t.jsx)(n.code,{children:"TimePaneView"})," from above to have it respond to commands to format the time as UTC or local time (unchanged code from the prior version has been elided):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { DisplayPaneView, DisplayPaneViewEvent, DisplayPaneViewProps } from '@microsoft/msfs-wtg3000-common';\r\n\r\nexport interface TimePaneViewEventTypes {\r\n  time_pane_format_set: 'utc' | 'local';\r\n}\r\n\r\nexport class TimePaneView extends DisplayPaneView<\r\n  DisplayPaneViewProps,\r\n  DisplayPaneViewEvent<TimePaneViewEventTypes>\r\n> {\r\n\r\n  private format: 'utc' | 'local' = 'utc';\r\n\r\n  // ...\r\n\r\n  public onAfterRender(): void {\r\n    // Sets the title of the view.\r\n    this._title.set('CURRENT UTC TIME');\r\n  }\r\n\r\n  public onUpdate(time: number): void {\r\n    // Updates the displayed time string.\r\n\r\n    const date = new Date(time);\r\n    const text = this.format === 'utc'\r\n      ? date.toUTCString()\r\n      : date.toString();\r\n\r\n    this.time.set(text);\r\n  }\r\n\r\n  public onEvent(e: DisplayPaneViewEvent<TimePaneViewEventTypes>): void {\r\n    if (e.eventType === 'time_pane_format_set') {\r\n      this.format = e.eventData;\r\n      this._title.set(`CURRENT ${this.format === 'utc' ? 'UTC' : 'LOCAL'} TIME`);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"system-power-on-behavior",children:"System Power-On Behavior"}),"\n",(0,t.jsxs)(n.p,{children:["When the G3000 system powers on, the view displayed by each controllable display pane is reset to an initial view. This initial view also becomes the ",(0,t.jsx)(n.a,{href:"#designated-pane-views",children:"primary designated view"})," for the display pane. Context-specific designated views can either be reset or retained."]}),"\n",(0,t.jsx)(n.p,{children:"By default, the following power-on behavior is applied:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pane"}),(0,t.jsx)(n.th,{children:"Displayed and Primary Designated View"}),(0,t.jsx)(n.th,{children:"Designated Weather View"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Left PFD"}),(0,t.jsxs)(n.td,{children:["Reset to ",(0,t.jsx)(n.code,{children:"DisplayPaneViewKeys.NavigationMap"})]}),(0,t.jsx)(n.td,{children:"Retained"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Left MFD"}),(0,t.jsxs)(n.td,{children:["Reset to ",(0,t.jsx)(n.code,{children:"DisplayPaneViewKeys.NavigationMap"})]}),(0,t.jsx)(n.td,{children:"Retained"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Right MFD"}),(0,t.jsxs)(n.td,{children:["Reset to ",(0,t.jsx)(n.code,{children:"DisplayPaneViewKeys.TrafficMap"})]}),(0,t.jsx)(n.td,{children:"Retained"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Right PFD"}),(0,t.jsxs)(n.td,{children:["Reset to ",(0,t.jsx)(n.code,{children:"DisplayPaneViewKeys.NavigationMap"})]}),(0,t.jsx)(n.td,{children:"Retained"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["The default behavior can be overridden using ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/plugin-basics",children:"plugins"}),". To do so, use the MFD plugin's ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/g3000/mfd-plugins#display-pane-power-on-options",children:(0,t.jsx)(n.code,{children:"getDisplayPanePowerOnOptions()"})})," method to return an instance of ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/g3000mfd/type-aliases/DisplayPanePowerOnOptions",children:(0,t.jsx)(n.code,{children:"DisplayPanePowerOnOptions"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"powerOnViewKeys"})," property of ",(0,t.jsx)(n.code,{children:"DisplayPanePowerOnOptions"})," defines the keys of the views to display and designate at system power-on for each controllable display pane. For each display pane, the key of the view to display and set as the primary designated view can be defined either as a constant value or a function that returns the key. Additionally, the views to set as context-specific designated views can also be defined in the same way. Context-specific designated views can also be configured to be retained by defining a value of ",(0,t.jsx)(n.code,{children:"null"})," instead of a view key. If any option is left undefined, then the default behavior associated with that option is used instead."]}),"\n",(0,t.jsxs)(n.p,{children:["To illustrate how to use ",(0,t.jsx)(n.code,{children:"DisplayPanePowerOnOptions"}),", the following code sets our example ",(0,t.jsx)(n.code,{children:"TimePaneView"})," as the initial power-on view for the Left MFD display pane and the navigation map as the initial power-on view for the Right MFD pane:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { registerPlugin } from '@microsoft/msfs-sdk';\r\nimport { DisplayPaneIndex, DisplayPaneViewKeys } from '@microsoft/msfs-wtg3000-common';\r\nimport { AbstractG3000MfdPlugin, DisplayPanePowerOnOptions } from '@microsoft/msfs-wtg3000-mfd';\r\n\r\nclass DisplayPanePowerOnPlugin extends AbstractG3000MfdPlugin {\r\n\r\n  public getDisplayPanePowerOnOptions(): Readonly<DisplayPanePowerOnOptions> {\r\n    return {\r\n      powerOnViewKeys: {\r\n        [DisplayPaneIndex.LeftMfd]: { displayKey: 'TimeExample' },\r\n        [DisplayPaneIndex.RightMfd]: { displayKey: DisplayPaneViewKeys.NavigationMap }\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n\r\nregisterPlugin(DisplayPanePowerOnPlugin);\n"})}),"\n",(0,t.jsx)(n.p,{children:"We can also use more complicated logic to set the Left MFD display pane's initial power-on view to the designated weather view (whatever it may be):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { registerPlugin } from '@microsoft/msfs-sdk';\r\nimport { DisplayPaneIndex, DisplayPanesUserSettings } from '@microsoft/msfs-wtg3000-common';\r\nimport { AbstractG3000MfdPlugin, DisplayPanePowerOnOptions } from '@microsoft/msfs-wtg3000-mfd';\r\n\r\nclass DisplayPanePowerOnPlugin extends AbstractG3000MfdPlugin {\r\n\r\n  public getDisplayPanePowerOnOptions(): Readonly<DisplayPanePowerOnOptions> {\r\n    const leftMfdDesignatedWeatherViewKey\r\n      = DisplayPanesUserSettings.getDisplayPaneManager(this.binder.bus, DisplayPaneIndex.LeftMfd)\r\n      .getSetting('displayPaneDesignatedWeatherView');\r\n\r\n    return {\r\n      powerOnViewKeys: {\r\n        [DisplayPaneIndex.LeftMfd]: { displayKey: () => leftMfdDesignatedWeatherViewKey.value }\r\n      }\r\n    };\r\n  }\r\n\r\n}\r\n\r\nregisterPlugin(DisplayPanePowerOnPlugin);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["During system power-on, context-specific designated views are guaranteed to be reset (if they are not retained) ",(0,t.jsx)(n.em,{children:"before"})," the displayed/primary designated view is reset. Keep this in mind if you configure the displayed/primary designated view to be reset to a context-specific designated view and also the context-specific designated view to be reset."]})}),"\n",(0,t.jsx)(n.h2,{id:"full-example-of-a-pane-view",children:"Full Example of a Pane View"}),"\n",(0,t.jsx)(n.p,{children:"Here is the full example pane view that was incrementally built up over the previous sections."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { FSComponent, ObjectSubject, Subject, VNode } from '@microsoft/msfs-sdk';\r\nimport {\r\n  DisplayPaneSizeMode, DisplayPaneView, DisplayPaneViewEvent, DisplayPaneViewProps\r\n} from '@microsoft/msfs-wtg3000-common';\r\n\r\nexport interface TimePaneViewEventTypes {\r\n  time_pane_format_set: 'utc' | 'local';\r\n}\r\n\r\nexport class TimePaneView extends DisplayPaneView<\r\n  DisplayPaneViewProps,\r\n  DisplayPaneViewEvent<TimePaneViewEventTypes>\r\n> {\r\n\r\n  private format: 'utc' | 'local' = 'utc';\r\n  private readonly time = Subject.create('');\r\n\r\n  private readonly style = ObjectSubject.create({\r\n    'font-size': '16px'\r\n  });\r\n\r\n  public onAfterRender(): void {\r\n    // Sets the title of the view.\r\n    this._title.set('CURRENT UTC TIME');\r\n  }\r\n\r\n  public onResume(size: DisplayPaneSizeMode): void {\r\n    this.updateFontSize(size);\r\n  }\r\n\r\n  public onResize(size: DisplayPaneSizeMode): void {\r\n    this.updateFontSize(size);\r\n  }\r\n\r\n  private updateFontSize(size: DisplayPaneSizeMode): void {\r\n    // Updates font size to take advantage of wider panes in full mode.\r\n    if (size === DisplayPaneSizeMode.Full) {\r\n      this.style.set('font-size', '24px');\r\n    } else {\r\n      this.style.set('font-size', '16px');\r\n    }\r\n  }\r\n\r\n  public onUpdate(time: number): void {\r\n    // Updates the displayed time string.\r\n\r\n    const date = new Date(time);\r\n    const text = this.format === 'utc'\r\n      ? date.toUTCString()\r\n      : date.toString();\r\n\r\n    this.time.set(text);\r\n  }\r\n\r\n  public onEvent(e: DisplayPaneViewEvent<TimePaneViewEventTypes>): void {\r\n    if (e.eventType === 'time_pane_format_set') {\r\n      this.format = e.eventData;\r\n      this._title.set(`CURRENT ${this.format === 'utc' ? 'UTC' : 'LOCAL'} TIME`);\r\n    }\r\n  }\r\n\r\n  public render(): VNode {\r\n    return (\r\n      <div style={this.style}>{this.time}</div>\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"TimePaneView"})," displays the operating system time. It dynamically adjusts the size of its font to be larger when its parent pane is full-size. It will switch between formatting the time as UTC time and local time based on display pane view events sent to it by outside code. Finally, its title is set to either ",(0,t.jsx)(n.em,{children:'"CURRENT UTC TIME"'})," or ",(0,t.jsx)(n.em,{children:'"CURRENT LOCAL TIME"'}),", depending on how it is formatting the displayed time."]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return d},a:function(){return r}});var s=i(667294);let t={},a=s.createContext(t);function r(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);