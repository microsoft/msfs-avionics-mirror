"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["436899"],{177376:function(e,t,i){i.r(t),i.d(t,{metadata:()=>n,contentTitle:()=>l,default:()=>d,assets:()=>a,toc:()=>h,frontMatter:()=>r});var n=JSON.parse('{"id":"avionics/wt21/electronic-checklists","title":"WT21 Electronic Checklists","description":"Introduction","source":"@site/docs/avionics/wt21/electronic-checklists.md","sourceDirName":"avionics/wt21","slug":"/avionics/wt21/electronic-checklists","permalink":"/msfs-avionics-mirror/2024/docs/avionics/wt21/electronic-checklists","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_label":"Electronic Checklists","sidebar_position":4,"toc_max_heading_level":4},"sidebar":"sidebar","previous":{"title":"panel.xml Tag Documentation","permalink":"/msfs-avionics-mirror/2024/docs/avionics/wt21/panel-xml-tag-documentation"},"next":{"title":"Plugin Basics","permalink":"/msfs-avionics-mirror/2024/docs/avionics/wt21/plugin-basics"}}'),s=i("785893"),c=i("250065");let r={sidebar_label:"Electronic Checklists",sidebar_position:4,toc_max_heading_level:4},l="WT21 Electronic Checklists",a={},h=[{value:"Introduction",id:"introduction",level:2},{value:"Creating a Checklist XML File",id:"creating-a-checklist-xml-file",level:2},{value:"The Root <code>&lt;Checklist&gt;</code> Tag",id:"the-root-checklist-tag",level:3},{value:"Preamble",id:"preamble",level:3},{value:"Groups",id:"groups",level:3},{value:"Lists",id:"lists",level:3},{value:"Items",id:"items",level:3},{value:"Defining Items",id:"defining-items",level:4},{value:"Text Formatting",id:"text-formatting",level:3}];function o(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"wt21-electronic-checklists",children:"WT21 Electronic Checklists"})}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"The WT21 supports an electronic checklist feature that allows checklists to be viewed and completed within the avionics. Using this feature, the user can view checklists on the MFDs. The user can also check off individual items in checklists and the system will track which items and checklists have been completed."}),"\n",(0,s.jsx)(t.p,{children:"By default, the electronic checklists feature is disabled in the WT21. In order to enable the feature in an airplane installation, there are two things that must be done:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Create an XML file that configures the checklists that are supported by the installation. For more information, see the ",(0,s.jsx)(t.a,{href:"#creating-a-checklist-xml-file",children:"next section"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Point the WT21 to the checklists XML file using the ",(0,s.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/wt21/panel-xml-tag-documentation#checklist",children:(0,s.jsx)(t.code,{children:"<Checklist>"})})," ",(0,s.jsx)(t.code,{children:"panel.xml"})," tag."]}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["The size of the Checklist display is ",(0,s.jsx)(t.em,{children:"40 characters"})," per line with ",(0,s.jsx)(t.em,{children:"10 lines"})," per page. These limits need to be taken into account when creating checklist items and the preamble."]})}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-checklist-xml-file",children:"Creating a Checklist XML File"}),"\n",(0,s.jsx)(t.p,{children:"Checklists are configured using an XML file. The XML file defines the checklists included in the installation, how they are organized, and the contents of each checklist."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["The checklist XML file must be placed within the ",(0,s.jsx)(t.code,{children:"coui://html_ui/"})," directory or one of its subdirectories. If the file is placed in another directory, the WT21 will not be able to access it."]})}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsx)(t.p,{children:"It is best practice to place the checklist XML file in an aircraft-specific directory, for example:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"coui://html_ui/Airplanes/My_Airplane/checklist.xml\n"})}),(0,s.jsx)(t.p,{children:"This greatly reduces the risk of file conflicts within the sim's virtual file system."})]}),"\n",(0,s.jsxs)(t.h3,{id:"the-root-checklist-tag",children:["The Root ",(0,s.jsx)(t.code,{children:"<Checklist>"})," Tag"]}),"\n",(0,s.jsxs)(t.p,{children:["Like all XML files, the checklist XML file must contain a single root tag. This tag must be named ",(0,s.jsx)(t.code,{children:"<Checklist>"}),". All other tags in the file are placed within the root ",(0,s.jsx)(t.code,{children:"<Checklist>"})," tag."]}),"\n",(0,s.jsx)(t.h3,{id:"preamble",children:"Preamble"}),"\n",(0,s.jsxs)(t.p,{children:["The preamble is a notice displayed to the user when opening a checklist menu for the first time. The default preamble is based on the CJ4, but it can be customized by adding a ",(0,s.jsx)(t.code,{children:"<Preamble>"})," tag directly under the root ",(0,s.jsx)(t.code,{children:"<Checklist>"})," tag in the XML file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<Checklist>\r\n  <Preamble>\r\n    THIS IS AN EXAMPLE PREAMBLE\r\n    FOR THE WT21 CHECKLISTS\r\n    PLEASE READ CAREFULLY\r\n    AND FLY SAFELY\r\n  </Preamble>\r\n</Checklist>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Each line within the ",(0,s.jsx)(t.code,{children:"<Preamble>"})," tag corresponds to a line of text displayed to the user. The leading and trailing whitespace is trimmed from each line and no automatic line wrapping occurs. For advanced formatting, check out the ",(0,s.jsx)(t.a,{href:"#text-formatting",children:"Text Formatting"})," section."]}),"\n",(0,s.jsxs)(t.p,{children:["The preamble is limited to ",(0,s.jsx)(t.em,{children:"8 lines"})," of text with a maximum of ",(0,s.jsx)(t.em,{children:"40 characters"})," per line."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Preamble",src:i(222688).Z+"",width:"756",height:"985"})}),"\n",(0,s.jsx)(t.h3,{id:"groups",children:"Groups"}),"\n",(0,s.jsx)(t.p,{children:"Checklists are organized into groups. Each group contains one or more checklists. In the checklist page each group has its own associated tab and the user can browse checklists in different groups by selecting different tabs."}),"\n",(0,s.jsxs)(t.p,{children:["Groups are defined in the XML file with ",(0,s.jsx)(t.code,{children:"<Group>"})," tags placed directly under the root ",(0,s.jsx)(t.code,{children:"<Checklist>"})," tag:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Checklist>\r\n  <Group name="NORMAL CHECKLIST">\r\n  </Group>\r\n\r\n  <Group name="ABNORMAL CHECKLIST">\r\n  </Group>\r\n\r\n  <Group name="EMERGENCY CHECKLIST">\r\n  </Group>\r\n\r\n  <Group name="USER CHECKLIST">\r\n  </Group>\r\n</Checklist>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The order of the ",(0,s.jsx)(t.code,{children:"<Group>"})," tags determines the order they appear in on the Checklist page. Up to 6 groups can be defined in the WT21. In case more than 6 groups are defined, only the first 6 will be displayed."]}),"\n",(0,s.jsx)(t.p,{children:"The name of each group will be displayed at the top of the Checklist page when a list from that group is selected."}),"\n",(0,s.jsxs)(t.p,{children:["The WT21 differentiates between two types of checklist groups: ",(0,s.jsx)(t.em,{children:"normal checklists"})," and ",(0,s.jsx)(t.em,{children:"other checklists"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Normal checklists"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The name of the checklist group must match ",(0,s.jsx)(t.code,{children:"NORMAL CHECKLIST"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["The last item of each checklist in this group (except for the last one) will be ",(0,s.jsx)(t.code,{children:"NEXT NORMAL CHKLIST"})," which, when selected, will display the next normal checklist."]}),"\n",(0,s.jsx)(t.li,{children:"In the checklist menu, completed normal checklists will be marked accordingly."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Other checklists"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The last item of each checklist in this group will be ",(0,s.jsx)(t.code,{children:"RETURN TO CKLST MENU"})," which, when selected, will return the user to the checklist menu."]}),"\n",(0,s.jsx)(t.li,{children:"When the checklist is completed and the user returns to the checklist menu, the checklist will be reset making it available for completion again."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Checklist Groups",src:i(174067).Z+"",width:"756",height:"985"})}),"\n",(0,s.jsx)(t.h3,{id:"lists",children:"Lists"}),"\n",(0,s.jsx)(t.p,{children:"Lists represent individual checklists. Each list belongs to a checklist group and contains one or more checklist items. The user can select and display one list at a time in the Checklist page."}),"\n",(0,s.jsxs)(t.p,{children:["Lists are defined in the XML file with ",(0,s.jsx)(t.code,{children:"<List>"})," tags placed directly under the ",(0,s.jsx)(t.code,{children:"<Group>"})," tags of their parent groups:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Checklist>\r\n  <Group name="NORMAL CHECKLIST">\r\n    <List name="BEFORE STARTING ENGINES">\r\n    </List>\r\n\r\n    <List name="STARTING ENGINES">\r\n    </List>\r\n  </Group>\r\n</Checklist>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The order of the ",(0,s.jsx)(t.code,{children:"<List>"})," tags within a ",(0,s.jsx)(t.code,{children:"<Group>"})," tag determines the order of the corresponding lists in the group. The name of each list will be displayed at the top of the Checklist page when the list is selected, and also appears in the checklist pane when the user is browsing through checklists."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Checklist Lists",src:i(878843).Z+"",width:"756",height:"985"})}),"\n",(0,s.jsx)(t.h3,{id:"items",children:"Items"}),"\n",(0,s.jsxs)(t.p,{children:['Checklist items represent the "content" of checklists. Only one checklist item type is supported by the WT21: actionable items. ',(0,s.jsx)(t.em,{children:"Actionable items"})," are items that can be selected and completed by the user.\r\nAs the user scrolls through the list, the selected item is highlighted with a cyan border and the completion state of the item can be toggled using the CCP. When an item is completed, its text is displayed in green and a checkmark is displayed to the left of the item."]}),"\n",(0,s.jsx)(t.p,{children:"In order to be displayed in the avionics, the list must contain at least one item."}),"\n",(0,s.jsxs)(t.p,{children:["Items are defined in the XML file using ",(0,s.jsx)(t.code,{children:"<Item>"})," tags placed directly under the ",(0,s.jsx)(t.code,{children:"<List>"})," tags of their parent lists. The order of the ",(0,s.jsx)(t.code,{children:"<Item>"})," tags within their parent tag determines the order of the corresponding items in the list."]}),"\n",(0,s.jsx)(t.h4,{id:"defining-items",children:"Defining Items"}),"\n",(0,s.jsxs)(t.p,{children:["To define an actionable item, use an ",(0,s.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,s.jsx)(t.code,{children:"type"})," attribute of ",(0,s.jsx)(t.code,{children:"actionable"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Item type="actionable">\r\n  <LabelText>BATTERY SWITCH</LabelText>\r\n  <ActionText>ON</ActionText>\r\n</Item>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"<LabelText>"})," child tag is required and defines the text that describes the item's topic. The ",(0,s.jsx)(t.code,{children:"<ActionText>"})," child tag is required and defines the text that describes the action to be taken for the item. The action text is rendered to the right of the label text, and the label and action texts are connected with a string of dots."]}),"\n",(0,s.jsx)(t.h3,{id:"text-formatting",children:"Text Formatting"}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsx)(t.p,{children:"All standard text formatting conventions for XML files must be respected when creating the checklist XML file. In particular, this means that certain characters must always be escaped when they appear in the text content for a tag:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<"})," (less than): escaped with ",(0,s.jsx)(t.code,{children:"&lt;"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"&"})," (ampersand): escaped with ",(0,s.jsx)(t.code,{children:"&amp;"})]}),"\n"]})]}),"\n",(0,s.jsxs)(t.p,{children:["Text parsed from the various text tags in the XML file preserves all whitespace characters (including newline characters) ",(0,s.jsx)(t.strong,{children:"except"})," leading and trailing whitespace, which are entirely removed. Enclosing the text in quotes (either single or double) causes the text within the quotes to be parsed as a JSON-formatted string (after any XML-escaped characters are resolved)."]}),"\n",(0,s.jsx)(t.p,{children:"To preserve leading and/or trailing whitespace in a text tag, use a JSON-formatted string:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Text>\r\n  "  The spaces before and after this sentence will be preserved.  "\r\n</Text>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["To insert a forced line break, use a JSON-formatted string with an escaped newline character (",(0,s.jsx)(t.code,{children:"\\n"}),"):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Text>\r\n  "This text will have a line break...\\nafter the ellipsis."\r\n</Text>\n'})})]})}function d(e={}){let{wrapper:t}={...(0,c.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},174067:function(e,t,i){i.d(t,{Z:function(){return n}});let n=i.p+"assets/images/checklist-groups-522f6da28010356c9632698f298c738b.png"},878843:function(e,t,i){i.d(t,{Z:function(){return n}});let n=i.p+"assets/images/checklist-lists-fadc321655a7cdb2f0e49ba858d155b8.png"},222688:function(e,t,i){i.d(t,{Z:function(){return n}});let n=i.p+"assets/images/preamble-34eef78a65340a0237e45a0b3e0d664e.png"},250065:function(e,t,i){i.d(t,{Z:function(){return l},a:function(){return r}});var n=i(667294);let s={},c=n.createContext(s);function r(e){let t=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);