"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["623510"],{33970:function(e,t,i){i.r(t),i.d(t,{metadata:()=>n,contentTitle:()=>c,default:()=>d,assets:()=>l,toc:()=>o,frontMatter:()=>a});var n=JSON.parse('{"id":"avionics/epic2/integration/electronic-checklists","title":"Epic2 Electronic Checklists","description":"Introduction","source":"@site/docs/avionics/epic2/integration/electronic-checklists.md","sourceDirName":"avionics/epic2/integration","slug":"/avionics/epic2/integration/electronic-checklists","permalink":"/msfs-avionics-mirror/2024/docs/avionics/epic2/integration/electronic-checklists","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_label":"Electronic Checklists","sidebar_position":4,"toc_max_heading_level":4},"sidebar":"sidebar","previous":{"title":"panel.xml Basics","permalink":"/msfs-avionics-mirror/2024/docs/avionics/epic2/integration/panel-xml-basics"},"next":{"title":"panel.xml Tag Documentation","permalink":"/msfs-avionics-mirror/2024/docs/avionics/epic2/integration/panel-xml-tag-documentation"}}'),s=i("785893"),r=i("250065");let a={sidebar_label:"Electronic Checklists",sidebar_position:4,toc_max_heading_level:4},c="Epic2 Electronic Checklists",l={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Creating a Checklist XML File",id:"creating-a-checklist-xml-file",level:2},{value:"The Root <code>&lt;Checklist&gt;</code> Tag",id:"the-root-checklist-tag",level:3},{value:"Groups",id:"groups",level:3},{value:"Lists",id:"lists",level:3},{value:"Linking a list to a CAS message",id:"linking-a-list-to-a-cas-message",level:4},{value:"Items",id:"items",level:3},{value:"Defining Actionable Items",id:"defining-actionable-items",level:4},{value:"Defining Note Or Title Items",id:"defining-note-or-title-items",level:4},{value:"Defining Spacer Items",id:"defining-spacer-items",level:4},{value:"Text Formatting",id:"text-formatting",level:4}];function h(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"epic2-electronic-checklists",children:"Epic2 Electronic Checklists"})}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"The Epic2 supports an electronic checklist feature that allows checklists to be viewed and completed within the avionics. Using this feature, the user can view checklists on the lower MFD. The user can also check off individual items in checklists and the system will track which items and checklists have been completed."}),"\n",(0,s.jsx)(t.p,{children:"The Epic2 also allows for abnormal checklists to be linked to CAS items - in the event that a CAS alert is fired and a checklist is linked to that alert, the Abnormal Queue checklist page will be available."}),"\n",(0,s.jsx)(t.p,{children:"In comparison to the G3000 checklists, the Epic2 checklists are rather dumb. There is no support for branching, links, or indentation."}),"\n",(0,s.jsx)(t.p,{children:"By default, the electronic checklists feature is disabled in the Epic2. In order to enable the feature in an airplane installation, there are two things that must be done:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Create an XML file that configures the checklists that are supported by the installation. For more information, see the ",(0,s.jsx)(t.a,{href:"#creating-a-checklist-xml-file",children:"next section"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Point the Epic2 to the checklists XML file using the ",(0,s.jsx)(t.a,{href:"/msfs-avionics-mirror/2024/docs/avionics/epic2/integration/panel-xml-tag-documentation#checklist",children:(0,s.jsx)(t.code,{children:"<Checklist>"})})," ",(0,s.jsx)(t.code,{children:"panel.xml"})," tag."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-checklist-xml-file",children:"Creating a Checklist XML File"}),"\n",(0,s.jsx)(t.p,{children:"Checklists are configured using an XML file. The XML file defines the checklists included in the installation, how they are organized, and the contents of each checklist."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["The checklist XML file must be placed within the ",(0,s.jsx)(t.code,{children:"coui://html_ui/"})," directory or one of its subdirectories. If the file is placed in another directory, the Epic2 will not be able to access it."]})}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsx)(t.p,{children:"It is best practice to place the checklist XML file in an aircraft-specific directory, for example:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"coui://html_ui/Airplanes/My_Airplane/checklist.xml\n"})}),(0,s.jsx)(t.p,{children:"This greatly reduces the risk of file conflicts within the sim's virtual file system."})]}),"\n",(0,s.jsxs)(t.h3,{id:"the-root-checklist-tag",children:["The Root ",(0,s.jsx)(t.code,{children:"<Checklist>"})," Tag"]}),"\n",(0,s.jsxs)(t.p,{children:["Like all XML files, the checklist XML file must contain a single root tag. This tag must be named ",(0,s.jsx)(t.code,{children:"<Checklist>"}),". All other tags in the file are placed within the root ",(0,s.jsx)(t.code,{children:"<Checklist>"})," tag."]}),"\n",(0,s.jsx)(t.h3,{id:"groups",children:"Groups"}),"\n",(0,s.jsx)(t.p,{children:"Checklists are organized into groups. Each group contains one or more checklists. In the checklist page each group has its own associated tab and the user can browse checklists in different groups by selecting different tabs."}),"\n",(0,s.jsxs)(t.p,{children:["Groups are defined in the XML file with ",(0,s.jsx)(t.code,{children:"<Group>"})," tags placed directly under the root ",(0,s.jsx)(t.code,{children:"<Checklist>"})," tag:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Checklist>\r\n  <Group name="Normal">\r\n  </Group>\r\n\r\n  <Group name="Abnormal">\r\n  </Group>\r\n\r\n  <Group name="Emergency">\r\n  </Group>\r\n</Checklist>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The order of the ",(0,s.jsx)(t.code,{children:"<Group>"})," tags determines the order in which their tabs appear in the Checklist page. The Epic2 supports only the above-defined groups."]}),"\n",(0,s.jsx)(t.p,{children:"The name of each group will be displayed at the top of the Checklist page when a list from that group is selected. Additionally, the GTC Checklist page uses each group's name to label its corresponding tab by default (image, bottom)."}),"\n",(0,s.jsx)(t.h3,{id:"lists",children:"Lists"}),"\n",(0,s.jsx)(t.p,{children:"Lists represent individual checklists. Each list belongs to a checklist group and contains one or more checklist items. Unlike the G3000, branches are not supported by the Epic 2. The user can select and display one list at a time in the Checklist page."}),"\n",(0,s.jsxs)(t.p,{children:["Lists are defined in the XML file with ",(0,s.jsx)(t.code,{children:"<List>"})," tags placed directly under the ",(0,s.jsx)(t.code,{children:"<Group>"})," tags of their parent groups:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Checklist>\r\n  <Group name="Normal">\r\n    <List name="Before Engine Start">\r\n    </List>\r\n\r\n    <List name="Engine Start">\r\n    </List>\r\n  </Group>\r\n</Checklist>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The order of the ",(0,s.jsx)(t.code,{children:"<List>"})," tags within a ",(0,s.jsx)(t.code,{children:"<Group>"})," tag determines the order of the corresponding lists in the group. The name of each list will be displayed at the top of the Checklist page when the list is selected, and also appears in the checklist pane when the user is browsing through checklists."]}),"\n",(0,s.jsx)(t.h4,{id:"linking-a-list-to-a-cas-message",children:"Linking a list to a CAS message"}),"\n",(0,s.jsx)(t.p,{children:"Lists can also be linked to a CAS message in the Epic2. When a CAS message is active, and a linked checklist exists, the Abnormal Queue button will become available on the checklist pane. When the Abnormal Queue page is selected, the checklists will be coloured based on the severity of the CAS message."}),"\n",(0,s.jsxs)(t.p,{children:["To link a checklist to a CAS message, use a ",(0,s.jsx)(t.code,{children:"<LinkedCasMessages>"})," tag, with child ",(0,s.jsx)(t.code,{children:"<Message>"})," tags. The contents of the message tags should be the names of the linked CAS messages."]}),"\n",(0,s.jsx)(t.p,{children:"Example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<List name="Fuel Level Low">\r\n  <LinkedCasMessages>\r\n    <Message>FUEL LEVEL LOW L</Message>\r\n    <Message>FUEL LEVEL LOW R</Message>\r\n    <Message>FUEL LEVEL LOW L-R</Message>\r\n  </LinkedCasMessages>\r\n\r\n  <Item type="title">\r\n    <Text>\r\n      3A-FUEL-06\r\n    </Text>\r\n  </Item>\r\n</List>\n'})}),"\n",(0,s.jsx)(t.h3,{id:"items",children:"Items"}),"\n",(0,s.jsx)(t.p,{children:'Checklist items represent the "content" of checklists. There are four different types of items:'}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Actionable"}),(0,s.jsxs)(t.td,{children:["A ",(0,s.jsx)(t.em,{children:"selectable"})," item describing a checklist step that can be completed."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Note"}),(0,s.jsxs)(t.td,{children:["A ",(0,s.jsx)(t.em,{children:"non-selectable"})," item that provides informational content. Cannot be completed."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Title"}),(0,s.jsxs)(t.td,{children:["A ",(0,s.jsx)(t.em,{children:"non-selectable"})," item that represents a section title."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Spacer"}),(0,s.jsxs)(t.td,{children:["A ",(0,s.jsx)(t.em,{children:"non-selectable"})," item that inserts an empty line into the rendered version of the checklist."]})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Selectable items can be selected by users as they scroll through a list and will be highlighted with a cyan border when selected. Non-selectable items cannot be selected - they are skipped when the user scrolls through the list."}),"\n",(0,s.jsx)(t.p,{children:"Actionable items have a completion state. The user can toggle the completion state of actionable items from not completed to completed and vice versa. When an actionable item is completed, it is rendered in lime and a green checkmark appears beside it."}),"\n",(0,s.jsx)(t.p,{children:"A list must contain at least one item, but there is no minimum requirement for any specific type of item. Nonetheless, it is recommended that a list contain at least one selectable item."}),"\n",(0,s.jsxs)(t.p,{children:["Items are defined in the XML file using ",(0,s.jsx)(t.code,{children:"<Item>"})," tags placed directly under the ",(0,s.jsx)(t.code,{children:"<List>"})," tags of their parent lists. The order of the ",(0,s.jsx)(t.code,{children:"<Item>"})," tags within their parent tag determines the order of the corresponding items in the list."]}),"\n",(0,s.jsx)(t.h4,{id:"defining-actionable-items",children:"Defining Actionable Items"}),"\n",(0,s.jsxs)(t.p,{children:["To define an actionable item, use an ",(0,s.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,s.jsx)(t.code,{children:"type"})," attribute of ",(0,s.jsx)(t.code,{children:"actionable"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Item type="actionable">\r\n  <LabelText>\r\n    1. Preflight Inspection\r\n  </LabelText>\r\n  <ActionText>\r\n    COMPLETED\r\n  </ActionText>\r\n</Item>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"<LabelText>"})," child tag is required and defines the text that describes the item's topic. The ",(0,s.jsx)(t.code,{children:"<ActionText>"})," child tag is required and defines the text that describes the action to be taken for the item. The action text is rendered to the right of the label text, and the label and action texts are connected with a string of dots."]}),"\n",(0,s.jsx)(t.h4,{id:"defining-note-or-title-items",children:"Defining Note Or Title Items"}),"\n",(0,s.jsxs)(t.p,{children:["To define a note item, use an ",(0,s.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,s.jsx)(t.code,{children:"type"})," attribute of ",(0,s.jsx)(t.code,{children:"note"})," or ",(0,s.jsx)(t.code,{children:"title"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Item type="note">\r\n  <Text>\r\n    Following engine start, a warm engine should run at idle thrust for at least 2 minutes prior to takeoff.\r\n  </Text>\r\n</Item>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"<Text>"})," child tag is required and defines the text that is rendered for the item."]}),"\n",(0,s.jsx)(t.h4,{id:"defining-spacer-items",children:"Defining Spacer Items"}),"\n",(0,s.jsxs)(t.p,{children:["To define a spacer item, use an ",(0,s.jsx)(t.code,{children:"<Item>"})," tag with a ",(0,s.jsx)(t.code,{children:"type"})," attribute of ",(0,s.jsx)(t.code,{children:"spacer"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Item type="spacer" />\n'})}),"\n",(0,s.jsx)(t.p,{children:"A spacer item's height (not including the padding and margin applied to all items) is equal to the line height of an actionable or note item."}),"\n",(0,s.jsx)(t.h4,{id:"text-formatting",children:"Text Formatting"}),"\n",(0,s.jsxs)(t.admonition,{type:"info",children:[(0,s.jsx)(t.p,{children:"All standard text formatting conventions for XML files must be respected when creating the checklist XML file. In particular, this means that certain characters must always be escaped when they appear in the text content for a tag:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"<"})," (less than): escaped with ",(0,s.jsx)(t.code,{children:"&lt;"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"&"})," (ampersand): escaped with ",(0,s.jsx)(t.code,{children:"&amp;"})]}),"\n"]})]}),"\n",(0,s.jsxs)(t.p,{children:["Text rendered for all item types are formatted to automatically wrap to new lines when necessary while preserving whitespace characters (including newline characters). Text parsed from the various text tags in the XML file preserves all whitespace characters (including newline characters) ",(0,s.jsx)(t.strong,{children:"except"})," leading and trailing whitespace, which are entirely removed. Enclosing the text in quotes (either single or double) causes the text within the quotes to be parsed as a JSON-formatted string (after any XML-escaped characters are resolved)."]}),"\n",(0,s.jsx)(t.p,{children:"To preserve leading and/or trailing whitespace in a text tag, use a JSON-formatted string:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Text>\r\n  "  The spaces before and after this sentence will be preserved.  "\r\n</Text>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["To insert a forced line break, use a JSON-formatted string with an escaped newline character (",(0,s.jsx)(t.code,{children:"\\n"}),"):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'<Text>\r\n  "This text will have a line break...\\nafter the ellipsis."\r\n</Text>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["To prevent text from automatically wrapping to a new line at a specific space character, use the non-breaking space character instead. The non-breaking space character can be used directly in XML without escaping. However, it is recommended to escape the character (with ",(0,s.jsx)(t.code,{children:"&#xa0;"}),") to make it obvious where non-breaking spaces are used:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:"<Text>\r\n  This text will not automatically wrap...&#xa0;after the ellipsis.\r\n</Text>\n"})})]})}function d(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},250065:function(e,t,i){i.d(t,{Z:function(){return c},a:function(){return a}});var n=i(667294);let s={},r=n.createContext(s);function a(e){let t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);