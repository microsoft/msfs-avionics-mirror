"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["160157"],{815e3:function(e,i,t){t.r(i),t.d(i,{metadata:()=>s,contentTitle:()=>a,default:()=>d,assets:()=>o,toc:()=>l,frontMatter:()=>c});var s=JSON.parse('{"id":"framework-systems/checklist/checklist-api","title":"The Checklist API","description":"Introduction","source":"@site/docs/framework-systems/checklist/checklist-api.md","sourceDirName":"framework-systems/checklist","slug":"/framework-systems/checklist/checklist-api","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/checklist-api","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Checklist API","sidebar_position":1},"sidebar":"sidebar","previous":{"title":"Defining CAS Alerts Using panel.xml","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/cas/defining-cas-alerts-using-panel-xml"},"next":{"title":"Parsing Checklists from DOM","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/parsing-checklists-from-dom"}}'),n=t("785893"),r=t("250065");let c={sidebar_label:"Checklist API",sidebar_position:1},a="The Checklist API",o={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Checklist Structure",id:"checklist-structure",level:2},{value:"Checklist Items",id:"checklist-items",level:2},{value:"Checklist Definitions",id:"checklist-definitions",level:2},{value:"Set Definition",id:"set-definition",level:3},{value:"Group Definition",id:"group-definition",level:3},{value:"List Definition",id:"list-definition",level:3},{value:"Branch Definition",id:"branch-definition",level:3},{value:"Item Definition",id:"item-definition",level:3},{value:"Declaring Checklist Definitions",id:"declaring-checklist-definitions",level:2},{value:"Checklist State",id:"checklist-state",level:2},{value:"Controlling State",id:"controlling-state",level:3},{value:"State Provider",id:"state-provider",level:3}];function h(e){let i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"the-checklist-api",children:"The Checklist API"})}),"\n",(0,n.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(i.p,{children:["The SDK offers an API for implementing electronic checklists that are embedded within an avionics system. The API is designed to be generic enough to be useful across a wide range of use cases. It can also be ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/extending-the-checklist-api",children:"extended"})," to suit the requirements of a particular avionics system."]}),"\n",(0,n.jsx)(i.p,{children:"The following sections describe"}),"\n",(0,n.jsx)(i.h2,{id:"checklist-structure",children:"Checklist Structure"}),"\n",(0,n.jsx)(i.p,{children:"The Checklist API implements checklists with a five-tiered structure:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Checklist set"}),". Each checklist set contains zero or more checklist groups."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Checklist group"}),". This represents a group of related checklists. Each checklist group contains zero or more checklist lists."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Checklist list"}),'. This represents what is traditionally thought of as a single "checklist". Each checklist list contains zero or more checklist items and zero or more checklist branches.']}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Checklist branch"}),". This represents a sub-list within a checklist list. Each checklist branch contains zero or more checklist items."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"Checklist item"}),". This represents a single line item within a checklist. Items can be members of a branch or of the base checklist (i.e. not in a branch)."]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"checklist-items",children:"Checklist Items"}),"\n",(0,n.jsx)(i.p,{children:"A checklist item represents a single line item within a checklist. There are six types of checklist items:"}),"\n",(0,n.jsxs)(i.p,{children:["An ",(0,n.jsx)(i.strong,{children:"actionable item"})," is an item that has a completion state. At any time, an actionable item is either completed or not completed."]}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.strong,{children:"branch item"})," is an item whose completion state can depend on the completion state of zero or more linked branches within the same checklist list. When determining the completion state of a branch item from its linked branches, each linked branch is assigned one of three logic types (",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/ChecklistBranchItemLogicType",children:(0,n.jsx)(i.code,{children:"ChecklistBranchItemLogicType"})}),"): ",(0,n.jsx)(i.code,{children:"None"}),", ",(0,n.jsx)(i.code,{children:"Sufficient"}),", or ",(0,n.jsx)(i.code,{children:"Necessary"}),". The branch item is considered completed when at least one linked branch with the ",(0,n.jsx)(i.code,{children:"Sufficient"})," logic type is completed ",(0,n.jsx)(i.em,{children:"or"})," all linked branches with the ",(0,n.jsx)(i.code,{children:"Necessary"})," logic type are completed. Linked branches with the ",(0,n.jsx)(i.code,{children:"None"})," logic type do not affect the branch item's completion state. A branch item also has a override state. When a branch item is overridden, it is always considered completed regardless of the completion state of its linked branches."]}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.strong,{children:"link item"})," is an item that links to a checklist list or checklist branch. It has no completion state."]}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.strong,{children:"note item"})," is an item that displays informational text. It has no completion state."]}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.strong,{children:"title item"})," is an item that displays a section title or heading. It has no completion state."]}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.strong,{children:"spacer item"})," is an item that is used to add spacing between other items when a checklist is displayed. It has no completion state."]}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/enumerations/ChecklistItemType",children:(0,n.jsx)(i.code,{children:"ChecklistItemType"})})," enum is used to reference checklist item types programmatically."]})}),"\n",(0,n.jsx)(i.h2,{id:"checklist-definitions",children:"Checklist Definitions"}),"\n",(0,n.jsx)(i.p,{children:"Within the Checklist API, checklist definitions are used to describe all the components of a set of checklists."}),"\n",(0,n.jsx)(i.h3,{id:"set-definition",children:"Set Definition"}),"\n",(0,n.jsxs)(i.p,{children:["A checklist set definition (",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistSetDef",children:(0,n.jsx)(i.code,{children:"ChecklistSetDef"})}),") defines an ordered array of checklist groups contained within the set. It can also optionally define arbitrary metadata associated with the set."]}),"\n",(0,n.jsx)(i.h3,{id:"group-definition",children:"Group Definition"}),"\n",(0,n.jsxs)(i.p,{children:["A checklist group definition (",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistGroupDef",children:(0,n.jsx)(i.code,{children:"ChecklistGroupDef"})}),") defines the group's name and an ordered array of checklist lists contained within the group. It can also optionally define arbitrary metadata associated with the group."]}),"\n",(0,n.jsx)(i.h3,{id:"list-definition",children:"List Definition"}),"\n",(0,n.jsxs)(i.p,{children:["A checklist list definition (",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistListDef",children:(0,n.jsx)(i.code,{children:"ChecklistListDef"})}),") defines the list's name and an ordered array of checklist items contained within the list. It can also optionally define a unique ID (used to create links to the list) and arbitrary metadata associated with the list."]}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:["The unique ID assigned to a list, if one exists, ",(0,n.jsx)(i.strong,{children:"must"})," be unique across all lists ",(0,n.jsx)(i.em,{children:"and"})," all branches in the entire checklist set."]})}),"\n",(0,n.jsx)(i.h3,{id:"branch-definition",children:"Branch Definition"}),"\n",(0,n.jsxs)(i.p,{children:["A checklist branch definition (",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistBranchDef",children:(0,n.jsx)(i.code,{children:"ChecklistBranchDef"})}),") defines the branch's unique ID (used to create links to the branch), name and an ordered array of checklist items contained within the branch. It can also optionally define arbitrary metadata associated with the branch."]}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:["The unique ID assigned to a branch ",(0,n.jsx)(i.strong,{children:"must"})," be unique across all branches ",(0,n.jsx)(i.em,{children:"and"})," all lists in the entire checklist set."]})}),"\n",(0,n.jsx)(i.h3,{id:"item-definition",children:"Item Definition"}),"\n",(0,n.jsxs)(i.p,{children:["Checklist item definitions at a minimum must satisfy the types defined in the ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/BaseChecklistItemTypeDefMap",children:(0,n.jsx)(i.code,{children:"BaseChecklistItemTypeDefMap"})})," type alias. Definitions for individual item types can define additional properties as long as the resulting definitions still satisfy the types in ",(0,n.jsx)(i.code,{children:"BaseChecklistItemTypeDefMap"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["The API provides a set of default checklist item definitions for each item type. These extend the types defined in ",(0,n.jsx)(i.code,{children:"BaseChecklistItemTypeDefMap"})," with some properties that are commonly useful."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Item Type"}),(0,n.jsx)(i.th,{children:"Definition"}),(0,n.jsx)(i.th,{children:"Additional properties"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Actionable"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistActionableItemDef",children:(0,n.jsx)(i.code,{children:"ChecklistActionableItemDef"})})}),(0,n.jsx)(i.td,{children:"Defines a label text and an action text for the item."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Branch"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistBranchItemDef",children:(0,n.jsx)(i.code,{children:"ChecklistBranchItemDef"})})}),(0,n.jsx)(i.td,{children:"Defines text for the item."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Link"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistLinkItemDef",children:(0,n.jsx)(i.code,{children:"ChecklistLinkItemDef"})})}),(0,n.jsx)(i.td,{children:"Defines optional text for the item."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Note"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistNoteItemDef",children:(0,n.jsx)(i.code,{children:"ChecklistNoteItemDef"})})}),(0,n.jsx)(i.td,{children:"Defines text for the item."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Title"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistTitleItemDef",children:(0,n.jsx)(i.code,{children:"ChecklistTitleItemDef"})})}),(0,n.jsx)(i.td,{children:"Defines text for the item."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"Spacer"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistSpacerItemDef",children:(0,n.jsx)(i.code,{children:"ChecklistSpacerItemDef"})})}),(0,n.jsx)(i.td,{children:"Defines an optional height for the item."})]})]})]}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistItemTypeDefMap",children:(0,n.jsx)(i.code,{children:"ChecklistItemTypeDefMap"})})," type alias can be used to map from checklist item types to their associated default checklist item definitions."]}),"\n",(0,n.jsxs)(i.p,{children:["For more information on how to extend the API to support custom item definitions, please refer to ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/extending-the-checklist-api#custom-item-definitions",children:"this page"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"declaring-checklist-definitions",children:"Declaring Checklist Definitions"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"#checklist-definitions",children:"Checklist definitions"})," can be declared programmatically:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"import { ChecklistItemType, ChecklistItemTypeDefMap, ChecklistSetDef } from '@microsoft/msfs-sdk';\r\n\r\nconst checklistDef: ChecklistSetDef<ChecklistItemTypeDefMap, void, void, void> = {\r\n  groups: [\r\n    {\r\n      name: 'Normal Procedures',\r\n      lists: [\r\n        {\r\n          name: 'Before Engine Start',\r\n          items: [\r\n            {\r\n              type: ChecklistItemType.Actionable,\r\n              labelText: '1. Preflight inspection',\r\n              actionText: 'Completed'\r\n            },\r\n            {\r\n              type: ChecklistItemType.Actionable,\r\n              labelText: '2. Parking brake',\r\n              actionText: 'On'\r\n            },\r\n            {\r\n              type: ChecklistItemType.Actionable,\r\n              labelText: '3. Battery switch',\r\n              actionText: 'On'\r\n            },\r\n            {\r\n              type: ChecklistItemType.Actionable,\r\n              labelText: '4. Alternator switch',\r\n              actionText: 'On'\r\n            }\r\n          ],\r\n          metadata: undefined\r\n        }\r\n      ],\r\n      metadata: undefined\r\n    }\r\n  ],\r\n  metadata: undefined\r\n};\n"})}),"\n",(0,n.jsx)(i.p,{children:"They can also be parsed from JSON:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-json",children:'{\r\n  "groups": [\r\n    {\r\n      "name": "Normal Procedures",\r\n      "lists": [\r\n        {\r\n          "name": "Before Engine Start",\r\n          "items": [\r\n            {\r\n              "type": "Actionable",\r\n              "labelText": "1. Preflight inspection",\r\n              "actionText": "Completed"\r\n            },\r\n            {\r\n              "type": "Actionable",\r\n              "labelText": "2. Parking brake",\r\n              "actionText": "On"\r\n            },\r\n            {\r\n              "type": "Actionable",\r\n              "labelText": "3. Battery switch",\r\n              "actionText": "On"\r\n            },\r\n            {\r\n              "type": "Actionable",\r\n              "labelText": "4. Alternator switch",\r\n              "actionText": "On"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["Finally, they can also be parsed from DOM (such as from XML files) using ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/ChecklistDOMParser",children:(0,n.jsx)(i.code,{children:"ChecklistDOMParser"})}),". For more information on how to use ",(0,n.jsx)(i.code,{children:"ChecklistDOMParser"}),", please refer to ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/checklist/parsing-checklists-from-dom",children:"this page"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"checklist-state",children:"Checklist State"}),"\n",(0,n.jsx)(i.p,{children:"The Checklist API supports managing checklist state. Checklist state is managed independently for each checklist set. The state of a checklist set consists of its structure and the completion state of the set's lists and items. Each actionable checklist item has a completion state - it is either completed or not. The completion state of a list depends on the completion state of the actionable items contained within it - a list is considered not completed if and only if at least one actionable item is not completed. This means that a list with no actionable items is always considered completed."}),"\n",(0,n.jsx)(i.p,{children:"Checklist state is encapsulated by the following:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistSet",children:(0,n.jsx)(i.code,{children:"ChecklistSet"})}),": the state of a checklist set."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistGroup",children:(0,n.jsx)(i.code,{children:"ChecklistGroup"})}),": the state of a checklist group."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistList",children:(0,n.jsx)(i.code,{children:"ChecklistList"})}),": the state of a checklist list."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistBranch",children:(0,n.jsx)(i.code,{children:"ChecklistBranch"})}),": the state of a checklist branch."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistItem",children:(0,n.jsx)(i.code,{children:"ChecklistItem"})}),": the state of a checklist item. The state includes references to the item's type and ",(0,n.jsx)(i.a,{href:"#item-definition",children:"definition"}),". The state of an actionable item includes its completion state. The state of a branch item includes its completion and override states."]}),"\n"]}),"\n",(0,n.jsx)(i.h3,{id:"controlling-state",children:"Controlling State"}),"\n",(0,n.jsxs)(i.p,{children:["Checklist state can be controlled using ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/ChecklistManager",children:(0,n.jsx)(i.code,{children:"ChecklistManager"})})," and ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/ChecklistController",children:(0,n.jsx)(i.code,{children:"ChecklistController"})}),". ",(0,n.jsx)(i.code,{children:"ChecklistManager"})," maintains the state for a single checklist set. ",(0,n.jsx)(i.code,{children:"ChecklistController"})," is used to send commands to ",(0,n.jsx)(i.code,{children:"ChecklistManager"})," to change state. The completion state of checklist items and lists can be controlled in this manner."]}),"\n",(0,n.jsxs)(i.p,{children:["To use ",(0,n.jsx)(i.code,{children:"ChecklistManager"})," and ",(0,n.jsx)(i.code,{children:"ChecklistController"}),", an index must first be assigned to each checklist set whose state is to be controlled. The index must be a positive integer and must be unique for each set. The event bus is also required for both classes to function."]}),"\n",(0,n.jsxs)(i.p,{children:["When a ",(0,n.jsx)(i.code,{children:"ChecklistManager"})," is created, it is initialized as asleep. While the manager is asleep, it will not respond to any commands. The manager must be awakened using ",(0,n.jsx)(i.code,{children:"wake()"})," in order for it to respond to commands. After a manager is awakened, it can be put to sleep again using ",(0,n.jsx)(i.code,{children:"sleep()"}),"."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"import { ChecklistManager, EventBus } from '@microsoft/msfs-sdk';\r\n\r\nconst bus = new EventBus();\r\n\r\n// Create a manager for the checklist set defined by checklistSetDef and assign it an index of 1.\r\nconst manager = new ChecklistManager(1, bus, checklistSetDef);\r\n\r\n// Wake the manager up. It is now ready to respond to commands to change the checklist state.\r\nmanager.wake();\n"})}),"\n",(0,n.jsx)(i.admonition,{type:"warning",children:(0,n.jsxs)(i.p,{children:["Only one instance of ",(0,n.jsx)(i.code,{children:"ChecklistManager"})," should be created for each checklist set across the entire airplane. Do not create multiple instances of ",(0,n.jsx)(i.code,{children:"ChecklistManager"})," for the same checklist set on different VCockpit instruments."]})}),"\n",(0,n.jsxs)(i.p,{children:["Once a ",(0,n.jsx)(i.code,{children:"ChecklistManager"})," has been created, checklist state can be controlled by directly calling methods on the manager."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"manager.wake();\r\n\r\n// Toggles the completion state of the first item in the first list in the first group.\r\nmanager.toggle(0, 0, -1, 0);\r\n\r\n// Resets the completion state of all items in the set to not complete.\r\nmanager.resetAll();\n"})}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"ChecklistController"})," can be used to remotely control checklist state without direct access to a ",(0,n.jsx)(i.code,{children:"ChecklistManager"})," instance. ",(0,n.jsx)(i.code,{children:"ChecklistController"})," can also be used when the controller is on a different VCockpit instrument from the manager. The controller offers an interface similar to that used to control state directly from the manager."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"import { ChecklistController, EventBus } from '@microsoft/msfs-sdk';\r\n\r\nconst bus = new EventBus();\r\n\r\n// Create a controller for the checklist set assigned to index 1.\r\nconst controller = new ChecklistController(1, bus);\r\n\r\n// Toggles the completion state of the first item in the first list in the first group.\r\ncontroller.toggle(0, 0, -1, 0);\r\n\r\n// Resets the completion state of all items in the set to not complete.\r\ncontroller.resetAll();\n"})}),"\n",(0,n.jsx)(i.admonition,{type:"note",children:(0,n.jsxs)(i.p,{children:["Checklist state can also be remotely controlled by publishing the event bus topics defined in ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/type-aliases/ChecklistControlEvents",children:(0,n.jsx)(i.code,{children:"ChecklistControlEvents"})}),". However, it is recommended to use ",(0,n.jsx)(i.code,{children:"ChecklistController"})," instead, because it abstracts away much of the boilerplate involved with publishing the event bus topics."]})}),"\n",(0,n.jsx)(i.h3,{id:"state-provider",children:"State Provider"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/ChecklistStateProvider",children:(0,n.jsx)(i.code,{children:"ChecklistStateProvider"})})," defines an interface for a provider of checklist state for a single checklist set. A default implementation of this interface is also available as ",(0,n.jsx)(i.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/DefaultChecklistStateProvider",children:(0,n.jsx)(i.code,{children:"DefaultChecklistStateProvider"})}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["To use ",(0,n.jsx)(i.code,{children:"DefaultChecklistStateProvider"}),", create an instance of it using the definition for a checklist set and the ",(0,n.jsx)(i.a,{href:"#controlling-state",children:"index"})," assigned to the set's state. Then once the provider is initialized, the provided state object will automatically update when the set's state changes."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-typescript",children:"import { DefaultChecklistStateProvider } from '@microsoft/msfs-sdk';\r\n\r\n// Create a provider of state for the checklist set defined by checklistSetDef, assigned an index of 1.\r\nconst provider = new DefaultChecklistStateProvider(1, bus, checklistSetDef);\r\n\r\n// Initialize the provider.\r\nprovider.init();\r\n\r\n// Subscribe to the completion state of the first list in the first group.\r\nconst list = provider.state.groups[0].lists[0];\r\nlist.isCompleted.sub(isCompleted => {\r\n  console.log(`${list.name} is ${isCompleted ? '' : 'not '}completed!`);\r\n}, true);\r\n\n"})})]})}function d(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},250065:function(e,i,t){t.d(i,{Z:function(){return a},a:function(){return c}});var s=t(667294);let n={},r=s.createContext(n);function c(e){let i=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);