"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["325800"],{460412:function(e,n,i){i.r(n),i.d(n,{metadata:()=>t,contentTitle:()=>r,default:()=>h,assets:()=>a,toc:()=>o,frontMatter:()=>d});var t=JSON.parse('{"id":"api/framework/interfaces/VNavConstraint","title":"Interface: VNavConstraint","description":"A Vertical Flight Plan Constraint.","source":"@site/docs/api/framework/interfaces/VNavConstraint.md","sourceDirName":"api/framework/interfaces","slug":"/api/framework/interfaces/VNavConstraint","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/VNavConstraint","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"VisualFacility","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/VisualFacility"},"next":{"title":"VNavControlEvents","permalink":"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/VNavControlEvents"}}'),s=i("785893"),l=i("250065");let d={},r="Interface: VNavConstraint",a={},o=[{value:"Properties",id:"properties",level:2},{value:"distance",id:"distance",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"fpa",id:"fpa",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"index",id:"index",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"isBeyondFaf",id:"isbeyondfaf",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"isPathEnd",id:"ispathend",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"isTarget",id:"istarget",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"legs",id:"legs",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"maxAltitude",id:"maxaltitude",level:3},{value:"Defined in",id:"defined-in-7",level:4},{value:"minAltitude",id:"minaltitude",level:3},{value:"Defined in",id:"defined-in-8",level:4},{value:"name",id:"name",level:3},{value:"Defined in",id:"defined-in-9",level:4},{value:"nextVnavEligibleLegIndex?",id:"nextvnaveligiblelegindex",level:3},{value:"Defined in",id:"defined-in-10",level:4},{value:"targetAltitude",id:"targetaltitude",level:3},{value:"Defined in",id:"defined-in-11",level:4},{value:"type",id:"type",level:3},{value:"Defined in",id:"defined-in-12",level:4}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",strong:"strong",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"interface-vnavconstraint",children:"Interface: VNavConstraint"})}),"\n",(0,s.jsx)(n.p,{children:"A Vertical Flight Plan Constraint."}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"distance",children:"distance"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"distance"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The total distance of the legs that make up this constriant segment in meters."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:266"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"fpa",children:"fpa"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"fpa"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The flight path angle to take through the legs in this constraint in degrees. Always a positive number."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:269"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"index",children:"index"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"index"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The global index of the flight plan leg that hosts the constraint. The constraint is always considered to be\nlocated at the end of its host leg."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:233"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"isbeyondfaf",children:"isBeyondFaf"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"isBeyondFaf"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whether or not this constraint is beyond the FAF."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:281"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"ispathend",children:"isPathEnd"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"isPathEnd"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whether or not this constraint is the last constraint prior to a MANSEQ or other VNAV ineligible leg type."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:252"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"istarget",children:"isTarget"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"isTarget"}),": ",(0,s.jsx)(n.code,{children:"boolean"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Whether or not this constraint is a target that will be held at\nduring a level-off or whether it will instead be passed through\nwith no level off."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:249"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"legs",children:"legs"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"legs"}),": ",(0,s.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/VNavLeg",children:(0,s.jsx)(n.code,{children:"VNavLeg"})}),"[]"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The legs contained in this constraint segment. Legs are positioned in the array in the ",(0,s.jsx)(n.em,{children:"reverse"})," order in which\nthey appear in the flight plan."]}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:275"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"maxaltitude",children:"maxAltitude"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"maxAltitude"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The max altitude of the constraint in meters, or positive infinity if the constraint has no maximum altitude."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:239"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"minaltitude",children:"minAltitude"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"minAltitude"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The minimum altitude of the constraint in meters, or negative infinity if the constraint has no minimum altitude."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:236"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"name",children:"name"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The name of the leg at this constraint."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:263"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"nextvnaveligiblelegindex",children:"nextVnavEligibleLegIndex?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"nextVnavEligibleLegIndex"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The global index of the earliest flight plan leg that is eligible for computing a VNAV path that is not followed\nby a path-ineligible leg in this constraint, if this constraint contains at least one path-ineligible leg. If the\nlast leg in this constraint is path-ineligible, then this index will be equal to the global index of this\nconstraint's host leg plus one. If this constraint has no path-ineligible legs, then this property is undefined."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:260"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"targetaltitude",children:"targetAltitude"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"targetAltitude"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The target altitude of the constraint in meters."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:242"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"type",children:"type"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"type"}),": ",(0,s.jsx)(n.code,{children:'"direct"'})," | ",(0,s.jsx)(n.code,{children:'"climb"'})," | ",(0,s.jsx)(n.code,{children:'"descent"'})," | ",(0,s.jsx)(n.code,{children:'"manual"'})," | ",(0,s.jsx)(n.code,{children:'"missed"'})," | ",(0,s.jsx)(n.code,{children:'"dest"'})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The type of constraint segment."}),"\n",(0,s.jsx)(n.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,s.jsx)(n.p,{children:"src/sdk/autopilot/VerticalNavigation.ts:278"})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},250065:function(e,n,i){i.d(n,{Z:function(){return r},a:function(){return d}});var t=i(667294);let s={},l=t.createContext(s);function d(e){let n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);