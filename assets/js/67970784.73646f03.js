"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[86835],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=m(a),d=r,h=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},53036:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const i={sidebar_position:1},o="Simvars",s={unversionedId:"interacting-with-msfs/simvars",id:"interacting-with-msfs/simvars",title:"Simvars",description:"Introduction",source:"@site/docs/interacting-with-msfs/simvars.md",sourceDirName:"interacting-with-msfs",slug:"/interacting-with-msfs/simvars",permalink:"/msfs-avionics-mirror/docs/interacting-with-msfs/simvars",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sidebar",previous:{title:"Refs and the Component Lifecycle",permalink:"/msfs-avionics-mirror/docs/getting-started/refs-and-component-lifecycle"},next:{title:"Key Events",permalink:"/msfs-avionics-mirror/docs/interacting-with-msfs/key-events"}},l={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Types of Simvars",id:"types-of-simvars",level:2},{value:"A Vars",id:"a-vars",level:3},{value:"L Vars",id:"l-vars",level:3},{value:"Setting Simvars in JS",id:"setting-simvars-in-js",level:2},{value:"More Information",id:"more-information",level:2}],c={toc:m},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"simvars"},"Simvars"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"One of the primary ways by which addons can communicate with MSFS is via Simulation Variables, or ",(0,r.kt)("em",{parentName:"p"},"simvars"),". These variable contain data and information about the state of the simulator itself, your airplane, and various other components of MSFS."),(0,r.kt)("p",null,"From Javascript, you can utilize two of the types of simvars available in MSFS."),(0,r.kt)("h2",{id:"types-of-simvars"},"Types of Simvars"),(0,r.kt)("h3",{id:"a-vars"},"A Vars"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A vars")," are normal MSFS simulation variables which can be queried. Historically, they have been called ",(0,r.kt)("strong",{parentName:"p"},"A vars")," due to needing to prefix those simvars with the text ",(0,r.kt)("strong",{parentName:"p"},"A:"),", but this is not required from the Javascript framework. To query a simvar, supply the simvar name and the units you would like to return the value in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const indicatedAirspeed = SimVar.GetSimVarValue('INDICATED AIRSPEED', 'knots');\n")),(0,r.kt)("p",null,"Some simvars in the sim can also take an index, such as with engine simvars. This index can be appended to the end of the simvar to specify which in a collection of items the value should be retrieved for:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const engineN1 = SimVar.GetSimVarValue('TURB ENG N1:1', 'percent');\n")),(0,r.kt)("h3",{id:"l-vars"},"L Vars"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"L vars")," are customizeable user settable values that can have any name, and are prefixed with the text ",(0,r.kt)("strong",{parentName:"p"},"L:")," in their name. These variables are used to store addon specific information that is to be shared with other parts of the addon or with the outside world."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const isInMenuMode = SimVar.GetSimVarValue('L:IS_MENU_ACTIVE', 'bool');\n")),(0,r.kt)("p",null,"L vars must be properly prefixed and their name must be a contiguous string with no spaces. Setting an L var for the first time creates the variable; it is not necessary to define them anywhere ahead of time. All L vars can hold only ",(0,r.kt)("strong",{parentName:"p"},"numeric")," data, and not arbitrary string or binary data."),(0,r.kt)("h2",{id:"setting-simvars-in-js"},"Setting Simvars in JS"),(0,r.kt)("p",null,"Setting a simvar is very straightforward:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"SimVar.SetSimVarValue('GENERAL ENG THROTTLE LEVER POSITION:1', 'percent', 100);\n")),(0,r.kt)("p",null,"However, do note that setting simvars via JS is an asynchronous operation that is not guaranteed to finish by the time the next line of code is run. ",(0,r.kt)("inlineCode",{parentName:"p"},"SetSimVarValue()")," returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<void>"),", which allows you to wait until the command has been accepted to run additional code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"//Using .then\nSimVar.SetSimVarValue('LIGHT NAV', 'bool', true)\n  .then(() => console.log('Nav light is on!'));\n\n//Using async/await\nawait SimVar.SetSimVarValue('LIGHT NAV', 'bool', true);\nconsole.log('Nav light is on!');\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"For some simvars, even awaiting the ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," will not guarantee the update is complete. Calls into the sim are cached and run at frame end for performance reasons and not all sim systems are synchronous. Nonetheless, we still highly recommend using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," form, which yeilds much more consistent results for these cases."),(0,r.kt)("p",{parentName:"admonition"},"Most usages of setting simvars will not fall into this case, where explicit post-set timings are required.")),(0,r.kt)("h2",{id:"more-information"},"More Information"),(0,r.kt)("p",null,"For more information about the various simvars available in MSFS as well as a full list and description of each one, please see the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.flightsimulator.com/html/index.htm#t=Programming_Tools%2FSimVars%2FSimulation_Variables.htm"},"MSFS SDK Documentation"),"."))}u.isMDXComponent=!0}}]);