"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[57078],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(t),d=a,f=c["".concat(o,".").concat(d)]||c[d]||m[d]||i;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},39128:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const i={sidebar_label:"Defining Aural Alerts Using panel.xml",sidebar_position:3},l="Defining Aural Alerts Using `panel.xml`",s={unversionedId:"sounds/defining-aural-alerts-using-panel-xml",id:"sounds/defining-aural-alerts-using-panel-xml",title:"Defining Aural Alerts Using `panel.xml`",description:"Introduction",source:"@site/docs/sounds/defining-aural-alerts-using-panel-xml.md",sourceDirName:"sounds",slug:"/sounds/defining-aural-alerts-using-panel-xml",permalink:"/msfs-avionics-mirror/docs/sounds/defining-aural-alerts-using-panel-xml",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Defining Aural Alerts Using panel.xml",sidebar_position:3},sidebar:"sidebar",previous:{title:"Aural Alert System",permalink:"/msfs-avionics-mirror/docs/sounds/aural-alert-system"},next:{title:"CAS System",permalink:"/msfs-avionics-mirror/docs/cas/cas-system"}},o={},u=[{value:"Introduction",id:"introduction",level:2},{value:"The Aural Alerts Syntax",id:"the-aural-alerts-syntax",level:2}],p={toc:u},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"defining-aural-alerts-using-panelxml"},"Defining Aural Alerts Using ",(0,a.kt)("inlineCode",{parentName:"h1"},"panel.xml")),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"When using the ",(0,a.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/sounds/aural-alert-system"},"Aural Alert System API"),", you may choose to support defining aural alerts and their activation criteria in ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml"),"."),(0,a.kt)("h2",{id:"the-aural-alerts-syntax"},"The Aural Alerts Syntax"),(0,a.kt)("p",null,"To use this syntax, include any tag in ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml")," that has as its children a series of ",(0,a.kt)("inlineCode",{parentName:"p"},"<Alert>")," tags. Each child ",(0,a.kt)("inlineCode",{parentName:"p"},"<Alert>")," tag then defines a single alert:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<AuralAlerts>\n  \x3c!--\n    Defines a non-repeating alert that plays the \'aural_autopilot\' sound event when the AUTOPILOT MASTER simvar changes\n    from 1 to 0.\n  --\x3e\n  <Alert uuid="autopilot" queue="my-queue" priority="10" continuous="false" requeue="false">\n    <Sequence>aural_autopilot</Sequence>\n    <Condition>\n      <Not>\n        <Simvar name="AUTOPILOT MASTER" unit="Bool"/>\n      </Not>\n    </Condition>\n  </Alert>\n\n  \x3c!--\n    Defines a repeating alert that plays the \'aural_no_takeoff\' sound event when the \'cas-no-takeoff\' CAS alert is\n    displayed with Warning priority in either the unacknowledged or acknowledged state.\n  --\x3e\n  <Alert uuid="no-takeoff" queue="my-queue" priority="0" continuous="false" requeue="true">\n    <Sequence>aural_no_takeoff</Sequence>\n    <CAS uuid="cas-no-takeoff" type="warning" acknowledged="true" />\n  </Alert>\n</AuralAlerts>\n')),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The Aural Alerts syntax has some important limitations:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Alerts cannot be triggered/untriggered."),(0,a.kt)("li",{parentName:"ul"},"Alerts cannot be customized when activated."),(0,a.kt)("li",{parentName:"ul"},"Aliases and suffixes are not supported."))),(0,a.kt)("p",null,"To parse and use the alert definitions from ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml"),", you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"DefaultXmlAuralAlertParser")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AuralAlertSystemXmlAdapter")," classes."),(0,a.kt)("p",null,"The following is an example of how to configure an instrument to support alerts defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"panel.xml")," using the Aural Alerts syntax (it is assumed that ",(0,a.kt)("inlineCode",{parentName:"p"},"AuralAlertSystem")," is already set up and initialized):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { AuralAlertSystemXmlAdapter, CasSystem, EventBus, CompositeLogicXMLHost, DefaultXmlAuralAlertParser } from '@microsoft/msfs-sdk';\n\nclass MyInstrument extends BaseInstrument {\n\n  private readonly bus = new EventBus();\n\n  private readonly logicHost = new CompositeLogicXMLHost();\n\n  // Can be either primary or non-primary\n  private readonly casSystem = new CasSystem(this.bus);\n\n  // ...\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n\n    // The second constructor argument sets the default queue to assign alerts that didn't explicitly define a queue in panel.xml.\n    const parser = new DefaultXmlAuralAlertParser(this, 'xml-default-queue');\n\n    // Get the parent element containing the alert tags\n    const element = this.xmlConfig.getElementsByTagName('PlaneHTMLConfig')[0].querySelector('AuralAlerts');\n\n    const adapter = new AuralAlertSystemXmlAdapter(this.bus, this.logicHost, this.casSystem, element, parser);\n\n    adapter.start();\n  }\n}\n")))}m.isMDXComponent=!0}}]);