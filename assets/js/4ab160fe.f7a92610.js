"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([[18899],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>y});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),u=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(r),c=n,y=p["".concat(o,".").concat(c)]||p[c]||m[c]||l;return r?a.createElement(y,s(s({ref:t},d),{},{components:r})):a.createElement(y,s({ref:t},d))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,s=new Array(l);s[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:n,s[1]=i;for(var u=2;u<l;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},87200:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));const l={id:"AuralAlertSystem",title:"Class: AuralAlertSystem",sidebar_label:"AuralAlertSystem",sidebar_position:0,custom_edit_url:null},s=void 0,i={unversionedId:"framework/classes/AuralAlertSystem",id:"framework/classes/AuralAlertSystem",title:"Class: AuralAlertSystem",description:"A system which manages and plays aural alerts using a priority queue system.",source:"@site/docs/framework/classes/AuralAlertSystem.md",sourceDirName:"framework/classes",slug:"/framework/classes/AuralAlertSystem",permalink:"/msfs-avionics-mirror/docs/framework/classes/AuralAlertSystem",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"AuralAlertSystem",title:"Class: AuralAlertSystem",sidebar_label:"AuralAlertSystem",sidebar_position:0,custom_edit_url:null},sidebar:"sidebar",previous:{title:"AuralAlertRegistrationManager",permalink:"/msfs-avionics-mirror/docs/framework/classes/AuralAlertRegistrationManager"},next:{title:"AuralAlertSystemWarningAdapter",permalink:"/msfs-avionics-mirror/docs/framework/classes/AuralAlertSystemWarningAdapter"}},o={},u=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"sleep",id:"sleep",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"wake",id:"wake",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4}],d={toc:u},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"A system which manages and plays aural alerts using a priority queue system."),(0,n.kt)("p",null,"The system collects registered alerts, and manages how they are played. Each alert belongs to a queue. Only one\nalert from each queue can play simultaneously. Alerts are queued to be played when they become activated or triggered.\nIf two alerts are queued at the same time, the one with higher priority is played first. Alerts cannot interrupt an\nalready playing alert, regardless of their relative priorities."),(0,n.kt)("h2",{id:"constructors"},"Constructors"),(0,n.kt)("h3",{id:"constructor"},"constructor"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"new AuralAlertSystem"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"bus"),"): ",(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/AuralAlertSystem"},(0,n.kt)("inlineCode",{parentName:"a"},"AuralAlertSystem"))),(0,n.kt)("p",null,"Creates a new AuralAlertSystem. The system is initially asleep after being created."),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"bus")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/msfs-avionics-mirror/docs/framework/classes/EventBus"},(0,n.kt)("inlineCode",{parentName:"a"},"EventBus"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The event bus.")))),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/msfs-avionics-mirror/docs/framework/classes/AuralAlertSystem"},(0,n.kt)("inlineCode",{parentName:"a"},"AuralAlertSystem"))),(0,n.kt)("h4",{id:"defined-in"},"Defined in"),(0,n.kt)("p",null,"src/sdk/utils/sound/AuralAlertSystem.ts:334"),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"sleep"},"sleep"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"sleep"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("p",null,"Puts this system to sleep. Clears all triggered and queued alerts and stops all currently playing alerts at the\nearliest opportunity. While this system is asleep, activating alerts will not queue them to be played and\ntriggering alerts has no effect."),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,n.kt)("p",null,"src/sdk/utils/sound/AuralAlertSystem.ts:381"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"wake"},"wake"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"wake"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("p",null,"Wakes this system. If the sound server is also awake, all active continuous or repeating alerts will be re-queued\nto play. While both this system and the sound server are awake, activation of alerts will queue them to be played.\nActivation of any alerts that were already active when the system woke up will not queue them to be played unless\nthe alert was deactivated in the interim."),(0,n.kt)("h4",{id:"returns-2"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,n.kt)("p",null,"src/sdk/utils/sound/AuralAlertSystem.ts:366"))}m.isMDXComponent=!0}}]);