"use strict";(self.webpackChunkdocs_api=self.webpackChunkdocs_api||[]).push([["372022"],{32175:function(e,n,r){r.r(n),r.d(n,{metadata:()=>s,contentTitle:()=>o,default:()=>u,assets:()=>c,toc:()=>d,frontMatter:()=>a});var s=JSON.parse('{"id":"framework-systems/subscriptions/specialized-subscribables","title":"Specialized Subscribables","description":"MappedSubject","source":"@site/docs/framework-systems/subscriptions/specialized-subscribables.md","sourceDirName":"framework-systems/subscriptions","slug":"/framework-systems/subscriptions/specialized-subscribables","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/subscriptions/specialized-subscribables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_label":"Specialized Subscribables","sidebar_position":3},"sidebar":"sidebar","previous":{"title":"Subscribables","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/subscriptions/subscribables"},"next":{"title":"Intro to the FMC Framework","permalink":"/msfs-avionics-mirror/2024/docs/framework-systems/fmc/intro-to-the-fmc-framework"}}'),t=r("785893"),i=r("250065");let a={sidebar_label:"Specialized Subscribables",sidebar_position:3},o="Specialized Subscribables",c={},d=[{value:"<code>MappedSubject</code>",id:"mappedsubject",level:2},{value:"<code>ObjectSubject</code>",id:"objectsubject",level:2},{value:"<code>ArraySubject</code>",id:"arraysubject",level:2},{value:"<code>SetSubject</code>",id:"setsubject",level:2},{value:"<code>MapSubject</code>",id:"mapsubject",level:2}];function l(e){let n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"specialized-subscribables",children:"Specialized Subscribables"})}),"\n",(0,t.jsx)(n.h2,{id:"mappedsubject",children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/MappedSubject",children:(0,t.jsx)(n.code,{children:"MappedSubject"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/framework-systems/subscriptions/subscribables#mapping-a-subscribable-to-new-subscribables",children:"This section"})," on subscribables discusses how a subscribable can be mapped to a new subscribable via the ",(0,t.jsx)(n.code,{children:"map()"})," method. While ",(0,t.jsx)(n.code,{children:"map()"})," works for mapping a single input to an output, it can't handle mapping ",(0,t.jsx)(n.em,{children:"multiple"})," inputs to an output. For the multiple-input case, we can use ",(0,t.jsx)(n.code,{children:"MappedSubject"})," instead."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's see how we can use ",(0,t.jsx)(n.code,{children:"MappedSubject"})," to map a subscribable that provides the current headwind component from multiple inputs:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { MappedSubject, MathUtils } from '@microsoft/msfs-sdk';\r\n\r\nconst planeHeading: Subscribable<number> = ...;\r\nconst windDirection: Subscribable<number> = ...;\r\nconst windSpeed: Subscribable<number> = ...;\r\n\r\nconst headwind = MappedSubject.create(\r\n  ([planeHeading, windDirection, windSpeed]) => {\r\n    const relativeWindAngle = MathUtils.diffAngleDeg(planeHeading, windDirection);\r\n    return windSpeed * Math.cos(relativeWindAngle * Math.PI / 180);\r\n  },\r\n  this.planeHeading,\r\n  this.windDirection,\r\n  this.windSpeed\r\n);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the above example, ",(0,t.jsx)(n.code,{children:"MappedSubject.create()"})," takes a mapping function and an ordered sequence of input subscribables and returns a new ",(0,t.jsx)(n.code,{children:"MappedSubject"})," (which implements ",(0,t.jsx)(n.code,{children:"MappedSubscribable"}),") whose value is the result of applying the mapping function to the values of the input subscribables. The values of the input subscribables are provided to the mapping function as a parameter in the form of an ordered ",(0,t.jsx)(n.code,{children:"readonly"})," tuple. In the above example the input parameter has a type of ",(0,t.jsx)(n.code,{children:"readonly [number, number, number]"})," and is destructured into the ",(0,t.jsx)(n.code,{children:"planeHeading"}),", ",(0,t.jsx)(n.code,{children:"windDirection"}),", and ",(0,t.jsx)(n.code,{children:"windSpeed"})," components."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MappedSubject"})," supports any number of inputs (including zero!). You don't even need to know the exact number of inputs at compile time by taking advantage of the spread operator:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const inputArray: Subscribable<number>[] = ...;\r\n\r\n// Maps n inputs, where n is in the range [0, \u221E), to their sum.\r\nconst sum = MappedSubject.create(\r\n  inputs => inputs.reduce((sum, value) => sum + value, 0),\r\n  ...inputArray\r\n);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The mapping function used to create a ",(0,t.jsx)(n.code,{children:"MappedSubject"})," is executed whenever ",(0,t.jsx)(n.em,{children:"any"})," of the inputs change. For mappings with many inputs that frequently change, the performance cost of running the mapping function should be taken into account when designing it."]})}),"\n",(0,t.jsxs)(n.p,{children:["You can choose to omit the mapping function from ",(0,t.jsx)(n.code,{children:"MappedSubject.create()"}),", in which case the inputs will be mapped to an ordered ",(0,t.jsx)(n.code,{children:"readonly"})," n-tuple (the same tuple that would be passed into the mapping function). This can be useful if a handler needs to be called whenever any one of multiple values changes:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const a: Subscribable<number> = ...;\r\nconst b: Subscribable<boolean> = ...;\r\nconst c: Subscribable<string> = ...;\r\n\r\n// Instead of...\r\n\r\nconst handler = (): void => {\r\n  const aVal = a.get();\r\n  const bVal = b.get();\r\n  const cVal = c.get();\r\n\r\n  // Do something...\r\n}\r\n\r\na.sub(handler);\r\nb.sub(handler);\r\nc.sub(handler);\r\n\r\n// ... We can do...\r\n\r\nMappedSubject.create(a, b, c).sub(([aVal, bVal, cVal]) => {\r\n  // Do something...\r\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When ",(0,t.jsx)(n.code,{children:"MappedSubject"})," is used to map inputs to an n-tuple, the mapped n-tuple is considered to have changed (and therefore will trigger notifications to subscribers) whenever any of the inputs change. For ",(0,t.jsx)(n.code,{children:"MappedSubject"}),"s created with a mapping function, the standard strict equality (",(0,t.jsx)(n.code,{children:"==="}),") logic is used to compare values unless a custom equality function is defined:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const inputArray: Subscribable<number>[] = ...;\r\n\r\nconst sum = MappedSubject.create(\r\n  inputs => inputs.reduce((sum, value) => sum + value, 0),\r\n  // Custom equality function that ensures NaN is considered equal to itself.\r\n  (a, b) => {\r\n    if (isNaN(a) && isNaN(b)) {\r\n      return true;\r\n    } else {\r\n      return a === b;\r\n    }\r\n  },\r\n  ...inputArray\r\n);\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["The equality function used to create a ",(0,t.jsx)(n.code,{children:"MappedSubject"})," compares ",(0,t.jsx)(n.em,{children:"mapped"})," values, ",(0,t.jsx)(n.strong,{children:"not"})," input values."]})}),"\n",(0,t.jsxs)(n.p,{children:["Finally, because ",(0,t.jsx)(n.code,{children:"MappedSubject"})," implements ",(0,t.jsx)(n.code,{children:"MappedSubscribable"})," and ",(0,t.jsx)(n.code,{children:"Subscription"}),", it supports the standard pause, resume, and destroy operations. These operations function in the same manner as described for mapped subscribables ",(0,t.jsxs)(n.a,{href:"subscribables#mapping-a-subscribable-to-new-subscribables",children:["returned by ",(0,t.jsx)(n.code,{children:"map()"})]}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"objectsubject",children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/ObjectSubject",children:(0,t.jsx)(n.code,{children:"ObjectSubject"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ObjectSubject"})," is a subscribable with an object value whose enumerable properties represent a set of key-value pairs. Once defined, properties (keys) can't be added or removed from the object. The object value is considered to change when the value of any of its properties changes. Property values are compared using the strict equality operator (",(0,t.jsx)(n.code,{children:"==="}),")."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ObjectSubject"})," allows in-place mutation of its object value on a per-property basis or using a syntax similar to ",(0,t.jsx)(n.code,{children:"Object.assign()"}),". Handlers subscribed to an ",(0,t.jsx)(n.code,{children:"ObjectSubject"})," via ",(0,t.jsx)(n.code,{children:"sub()"})," are notified of changes to each individual property:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ObjectSubject } from '@microsoft/msfs-sdk';\r\n\r\nconst subject = ObjectSubject.create({\r\n  'prop1': 0,\r\n  'prop2': false,\r\n  'prop3': ''\r\n});\r\n\r\nsubject.sub((obj, prop, value) => {\r\n  console.log(`Property ${prop} changed to ${value}`);\r\n});\r\n\r\n// 'Property prop1 changed to 5' is logged to the console.\r\nsubject.set('prop1', 5);\r\n\r\n// 'Property prop2 changed to false' is logged to the console.\r\nsubject.set('prop2', true);\r\n\r\n// 'Property prop1 changed to 10', then 'Property prop3 changed to qwerty'\r\n// are logged to the console.\r\nsubject.set({ 'prop1': 10, 'prop3': 'qwerty' });\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:["Mutating the object value of an ",(0,t.jsx)(n.code,{children:"ObjectSubject"})," through means other than ",(0,t.jsx)(n.code,{children:"ObjectSubject"}),"'s ",(0,t.jsx)(n.code,{children:"set()"})," method will not trigger notifications to subscribers:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const obj = { 'prop1': 0 }\r\nconst subject = ObjectSubject.create(obj);\r\n\r\n// None of the following will trigger notifications:\r\nobj.prop1 = 1;\r\nobj['prop1'] = 5;\r\nObject.assign(obj, { 'prop1': 10 });\n"})}),(0,t.jsxs)(n.p,{children:["To help prevent errors like the above, ",(0,t.jsx)(n.code,{children:"ObjectSubject"})," only provides a readonly version of its object value through the ",(0,t.jsx)(n.code,{children:"get()"})," method and to subscribers."]})]}),"\n",(0,t.jsx)(n.h2,{id:"arraysubject",children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/ArraySubject",children:(0,t.jsx)(n.code,{children:"ArraySubject"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ArraySubject"})," is a subscribable whose value is an array. Importantly, ",(0,t.jsx)(n.code,{children:"ArraySubject"})," does not implement the ",(0,t.jsx)(n.code,{children:"Subscribable"})," interface. Instead, it implements the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/SubscribableArray",children:(0,t.jsx)(n.code,{children:"SubscribableArray"})})," interface."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ArraySubject"})," allows in-place mutation of its array value in various ways, including insertion and deletion of indexes and changing the value stored at an index. Handlers subscribed to an ",(0,t.jsx)(n.code,{children:"ArraySubject"})," via ",(0,t.jsx)(n.code,{children:"sub()"})," are notified of changes in the array and provided information on which indexes changed:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { ArraySubject, SubscribableArrayEventType } from '@microsoft/msfs-sdk';\r\n\r\n// The subject's value is initialized to an empty array.\r\nconst subject = ArraySubject.create<number>();\r\n\r\nsubject.sub((index: number, type: SubscribableArrayEventType, items: number | number[], array: readonly number[]) => {\r\n  if (type === SubscribableArrayEventType.Cleared) {\r\n    console.log('Array was cleared');\r\n  } else {\r\n    console.log(`${type === SubscribableArrayEventType.Added ? 'Added' : 'Removed'} at index ${index}: ${items}`);\r\n  }\r\n});\r\n\r\nsubject.insert(1); // 'Added at index 0: 1' is logged to the console.\r\nsubject.insertRange(1, [2, 3, 4]); // 'Added at index 1: [2, 3, 4]' is logged to the console.\r\nconsole.log(subject.getArray()); // '[1, 2, 3, 4]' is logged to the console.\r\n\r\nsubject.removeAt(2); // 'Removed at index 2: 3' is logged to the console.\r\nconsole.log(subject.getArray()); // '[1, 2, 4]' is logged to the console.\r\n\r\n// 'Array was cleared', then 'Added at index 0: [4, 3, 2, 1]' are logged to the console.\r\nsubject.set([4, 3, 2, 1]);\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:["Mutating the array value of an ",(0,t.jsx)(n.code,{children:"ArraySubject"})," through means other than ",(0,t.jsx)(n.code,{children:"ArraySubject"}),"'s built-in methods will not trigger notifications to subscribers:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const arr: number[] = [];\r\nconst subject = ArraySubject.create(arr);\r\n\r\n// None of the following will trigger notifications:\r\narr.push(0);\r\narr.splice(0, 1);\r\narr[0] = 5;\n"})}),(0,t.jsxs)(n.p,{children:["To help prevent errors like the above, ",(0,t.jsx)(n.code,{children:"ArraySubject"})," only provides a readonly version of its array value through the ",(0,t.jsx)(n.code,{children:"getArray()"})," method and to subscribers."]})]}),"\n",(0,t.jsx)(n.h2,{id:"setsubject",children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/SetSubject",children:(0,t.jsx)(n.code,{children:"SetSubject"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"SetSubject"})," is a subscribable whose value is a Javascript ",(0,t.jsx)(n.code,{children:"Set"})," object. A set is a collection of keys in which each key appears at most once. Keys can be freely added to and removed from a ",(0,t.jsx)(n.code,{children:"SetSubject"})," using syntax that mirrors the one used by ",(0,t.jsx)(n.code,{children:"Set"}),". Subscribers are notified of each key that is added or removed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { SetSubject, SubscribableSetEventType } from '@microsoft/msfs-sdk';\r\n\r\n// Creates a new SetSubject whose initial keys include the numbers 1, 2, 3.\r\nconst subject = SetSubject.create<number>([1, 2, 3]);\r\n\r\nsubject.sub((set: ReadonlySet<number>, type: SubscribableSetEventType, key: number) => {\r\n  console.log(`Key ${key} was ${type === SubscribableSetEventType.Added ? 'added' : 'removed'}`);\r\n});\r\n\r\n// 'Key 4 was added' is logged to the console.\r\nsubject.add(4);\r\n\r\n// 'Key 1 was removed' is logged to the console.\r\nsubject.delete(1);\r\n\r\n// Nothing is logged to the console (the set remains unchanged).\r\nsubject.add(4);\r\n\r\n// 'Key 0 was added' is logged to the console.\r\nsubject.toggle(0);\r\n\r\n// 'Key 0 was removed' is logged to the console.\r\nsubject.toggle(0);\r\n\r\n// '[2, 3, 4]' is logged to the console.\r\nconsole.log([...subject.get()]);\r\n\r\n// 'Key 4 was removed', then 'Key 1 was added' are logged to the console.\r\nsubject.set([1, 2, 3]);\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:["Mutating the set value of a ",(0,t.jsx)(n.code,{children:"SetSubject"})," through means other than ",(0,t.jsx)(n.code,{children:"SetSubject"}),"'s built-in methods will not trigger notifications to subscribers. ",(0,t.jsx)(n.code,{children:"SetSubject"})," only provides a readonly version of its set value (",(0,t.jsx)(n.code,{children:"ReadonlySet"}),") through the ",(0,t.jsx)(n.code,{children:"get()"})," method and to subscribers in order to prevent code from changing the set in inappropriate ways. As long as the value is not explicitly cast to the mutable version (",(0,t.jsx)(n.code,{children:"Set"}),"), Typescript should protect you from unintentionally changing it outside of ",(0,t.jsx)(n.code,{children:"SetSubject"}),"."]}),(0,t.jsxs)(n.p,{children:["Additionally, if you pass an existing ",(0,t.jsx)(n.code,{children:"Set"})," into ",(0,t.jsx)(n.code,{children:"SetSubject.create()"}),", the passed-in set is ",(0,t.jsx)(n.strong,{children:"copied"})," into a newly created set. Therefore, any further changes to the passed-in set will not be reflected in the new ",(0,t.jsx)(n.code,{children:"SetSubject"}),"'s value."]})]}),"\n",(0,t.jsxs)(n.p,{children:["In addition to the standard ",(0,t.jsx)(n.code,{children:"Subscribable"})," ",(0,t.jsx)(n.code,{children:"pipe()"}),", ",(0,t.jsx)(n.code,{children:"SetSubject"})," supports piping individual keys into objects implementing the ",(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/interfaces/MutableSubscribableSet",children:(0,t.jsx)(n.code,{children:"MutableSubscribableSet"})})," interface (this includes ",(0,t.jsx)(n.code,{children:"SetSubject"})," itself). What distinguishes this set-specific pipe from the more general version is the ability to transform keys through the pipe. For example, we can use this feature to maintain a set containing keys that are the string representations of the values of another set:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const numbers = SetSubject.create<number>([1, 2, 3]);\r\nconst strings = SetSubject.create<string>();\r\n\r\nnumbers.pipe(strings, key => key.toString());\r\nconsole.log([...strings.get()]); // \'["1", "2", "3"]\'\r\n\r\nnumbers.delete(2);\r\nconsole.log([...strings.get()]); // \'["1", "3"]\'\r\n\r\nnumbers.add(0);\r\nconsole.log([...strings.get()]); // \'["1", "3", "0"]\'\n'})}),"\n",(0,t.jsx)(n.p,{children:'When establishing set pipes that do not use an injective ("one-to-one") transform function, removing a key from the source set removes the transformed key in the target set if and only if there does not exist another key in the source set that maps to the same transformed key:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const numbers = SetSubject.create<number>([1.1, 1.2, 3.5, 5]);\r\nconst rounded = SetSubject.create<number>();\r\n\r\nnumbers.pipe(rounded, Math.round);\r\nconsole.log([...rounded.get()]); // '[1, 4, 5]'\r\n\r\nnumbers.delete(3.5);\r\nconsole.log([...rounded.get()]); // '[1, 5]'\r\n\r\nnumbers.delete(1.1);\r\nconsole.log([...rounded.get()]); // '[1, 5]'\r\n\r\nnumbers.delete(1.2);\r\nconsole.log([...rounded.get()]); // '[5]'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"mapsubject",children:(0,t.jsx)(n.a,{href:"/msfs-avionics-mirror/2024/docs/api/framework/classes/MapSubject",children:(0,t.jsx)(n.code,{children:"MapSubject"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"MapSubject"})," is a subscribable whose value is a Javascript ",(0,t.jsx)(n.code,{children:"Map"})," object. A map is a collection of key-value pairs in which each key appears at most once. Key-value pairs can be freely manipulated (adding/removing keys, changing the value of a key) in ",(0,t.jsx)(n.code,{children:"MapSubject"})," using syntax that mirrors the one used by ",(0,t.jsx)(n.code,{children:"Map"}),". Subscribers are notified of each key-value pair that is changed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { MapSubject, SubscribableMapEventType } from '@microsoft/msfs-sdk';\r\n\r\n// Creates a new MapSubject whose initial key-value pairs are: 'a': 1, 'b': 2, and 'c': 3.\r\nconst subject = MapSubject.create<string, number>([['a', 1], ['b', 2], ['c', 3]]);\r\n\r\nsubject.sub((map: ReadonlyMap<string, number>, type: SubscribableMapEventType, key: string, value: number) => {\r\n  switch (type) {\r\n    case SubscribableMapEventType.Added:\r\n      console.log(`Key ${key} was added with value ${value}`);\r\n    case SubscribableMapEventType.Changed:\r\n      console.log(`Key ${key} was changed with value ${value}`);\r\n    case SubscribableMapEventType.Deleted:\r\n      console.log(`Key ${key} was removed with value ${value}`);\r\n  }\r\n});\r\n\r\n// 'Key d was added with value 4' is logged to the console.\r\nsubject.setValue('d', 4);\r\n\r\n// 'Key a was removed with value 1' is logged to the console.\r\nsubject.delete('a');\r\n\r\n// 'Key b was changed with value 5' is logged to the console.\r\nsubject.setValue('b', 5);\r\n\r\n// '[[\"b\", 5], [\"c\", 3], [\"d\", 4]]' is logged to the console.\r\nconsole.log([...subject.get()]);\r\n\r\n// 'Key b was removed with value 5', then 'Key c was changed with value 0', then 'Key e was added with value 5'\r\n// are logged to the console.\r\nsubject.set([['c', 0], ['e', 5]]);\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:["Mutating the map value of a ",(0,t.jsx)(n.code,{children:"MapSubject"})," through means other than ",(0,t.jsx)(n.code,{children:"MapSubject"}),"'s built-in methods will not trigger notifications to subscribers. ",(0,t.jsx)(n.code,{children:"MapSubject"})," only provides a readonly version of its map value (",(0,t.jsx)(n.code,{children:"ReadonlyMap"}),") through the ",(0,t.jsx)(n.code,{children:"get()"})," method and to subscribers in order to prevent code from changing the map in inappropriate ways. As long as the value is not explicitly cast to the mutable version (",(0,t.jsx)(n.code,{children:"Map"}),"), Typescript should protect you from unintentionally changing it outside of ",(0,t.jsx)(n.code,{children:"MapSubject"}),"."]}),(0,t.jsxs)(n.p,{children:["Additionally, if you pass an existing ",(0,t.jsx)(n.code,{children:"Map"})," into ",(0,t.jsx)(n.code,{children:"MapSubject.create()"}),", the passed-in map is ",(0,t.jsx)(n.strong,{children:"copied"})," into a newly created map. Therefore, any further changes to the passed-in map will not be reflected in the new ",(0,t.jsx)(n.code,{children:"MapSubject"}),"'s value."]})]})]})}function u(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},250065:function(e,n,r){r.d(n,{Z:function(){return o},a:function(){return a}});var s=r(667294);let t={},i=s.createContext(t);function a(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);